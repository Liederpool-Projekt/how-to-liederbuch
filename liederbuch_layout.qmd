---
title: "Liederbuch-Layout"
format: html
---

In diesem Teil der Doku geht es um die Layout-Konfigurationen, die in aller Regel f√ºr ein gesamtes Liederbuch gelten sollen, also zum Beispiel die Schriftart der Akkorde, der Lyrics, der √úberschriften, Seitenr√§nder, Kategorien und vieles mehr. Generell sind diese Konfigurationen im Ordner `lilypond-custom-includes` zu machen.

## Einstellungen √ºberschreiben

In der Datei `lilypond-custom-includes/base_config.ly` k√∂nnen unter anderem LilyPond-Einstellungen, die in den `lilypond-common-includes` definiert wurden, √ºberschrieben werden, zum Beispiel die Einstellungen zu Versetzungszeichen oder Balkensetzungen.

## Generelle Layout-Einstellungen

Die allermeisten liederbuchspezifischen Einstellungen, die man vermutlich ver√§ndern will, finden sich in der Datei `lilypond-common-includes/default_style.ly`. Die dortigen Einstellungen k√∂nnen angepasst werden, indem die entsprechenden Parameter in die Datei `lilypond-custom-includes/custom_style_overrides.ly` kopiert werden und die Werte entsprechend ver√§ndert werden. Sofern nicht anders angegeben, m√ºssen numerische Werte √ºbergeben werden. Folgende Parameter gibt es:

-   `songFormatAndSize` definiert das Format, zum Beispiel `a5` oder `b6`.

-   `songMargin` definiert den Seitenabstand.

-   `songInfoFontSize` definiert die Schriftgr√∂√üe der Songinfo.

-   `songInfoLineWidthFraction` definiert die Breite der Songinfo in Prozent

-   `songTitleSize` definiert die Schriftgr√∂√üe des Titels.

-   `songTitleFont` definiert die Schriftart des Titels. Der Name der Schriftart wird als String, also in Anf√ºhrungszeichen √ºbergeben.

-   `songChordFont` definiert die Schriftart der Akkorde. Der Name der Schriftart wird als String, also in Anf√ºhrungszeichen √ºbergeben.

-   `songLyricFont` definiert die Schriftart der Lyrics (Strophen). Der Name der Schriftart wird als String, also in Anf√ºhrungszeichen √ºbergeben.

-   `songChordFontSeries`. Hier kann eingestellt werden, ob die Akkorde normal (`#'normal`) oder fett (`#'bold`) dargestellt werden sollen.

-   `songTextChordAlignment` ist nur f√ºr das ‚Äûalte‚Äú System notwendig, wenn also keine Noten im Spiel sind. Mit `#'left` werden die Akkorde dann √ºber den Silben links ausgerichtet, mit `#'center` werden sie √ºber der jeweiligen Silbe zentriert.

-   `songScoreChordFontSize` definiert die Gr√∂√üe der Akkordzeichen in den Noten.

-   `songTextChordFontSize` definiert die Gr√∂√üe der Akkordzeichen in den Strophen. Es empfiehlt sich, beide Variablen gleichzusetzen.

-   `songTextChordDistance` definiert den Abstand zwischen den Akkordzeichen in den Strophen zu den zugeh√∂rigen Lyrics (nur neues System).

-   `songTextLineHeigth` definiert den Abstand zwischen den Lyric-Zeilen. Da die Akkorde sich jeweils an den Lyrics orientieren, werden die bei Anpassung des Werts mit verschoben.

-   `songTocColumns` definiert die Anzahl der Spalten, die im Inhaltsverzeichnis genutzt werden sollen.

-   `globalSize` definiert die Gr√∂√üe des Notensatzes.

-   `lyricSize` definiert die Gr√∂√üe der Lyrics.

-   `stanzaFormat` definiert das Format f√ºr die Nummerierung der Strophen. Standardformat ist `"~a."`. `~a` ist hierbei ein Platzhalter f√ºr die Strophennummer. Hier kann also definiert werden, ob als Ausgabe beispielsweise `1.`, `1.:` oder `1)` gew√ºnscht ist.

-   `romanStanzaFormat` definiert das Format f√ºr die r√∂mische Nummerierung der Strophen, also der Alternativnummerierung, die zum Beispiel f√ºr fremdsprachige Strophen genutzt werden kann. Das Prinzip ist dasselbe wie beim `stanzaFormat`.

-   `refString` definiert, welche Stanza beim `\ref`-Befehl √ºbergeben werden soll.

-   `refStringWithNumbers` definiert das Format von nummerierten Refrains nach demselben Schema wie beim `stanzaFormat`.

-   `repStart` definiert den Befehl `\repStart` f√ºr das alte System, um typographisch korrekte Wiederholungszeichen zu setzen.

-   `repStop` siehe `repStart`.

::: callout-note
Es empfiehlt sich, dass die Schriftart ebenfalls im Repo gespeichert wird, da nicht auf jedem Computer dieselben Schriftarten installiert sind.
:::

Der Default-Style sieht so aus:

``` lilypond
songFormatAndSize = "a5"
songMargin = 5
songInfoFontSize = 0
songInfoLineWidthFraction = 0.9
songTitleSize = 6
songTitleFont = "Liberation Sans"
songChordFont = "Liberation Sans"
songLyricFont = "Liberation Sans"
songChordFontSeries = #'bold
songTextChordAlignment = #'left
songScoreChordFontSize = 2
songTextChordFontSize = \songScoreChordFontSize
songTextChordDistance = 2.8
songTextLineHeigth = 5.8
songTocColumns = 3
globalSize = 15
lyricSize = 1.6
stanzaFormat = "~a."
romanStanzaFormat = "~@r."
refString = "Ref.:"
refStringWithNumbers = "Ref. ~a:"
% h√ºbsche Wiederholungszeichen f√ºr den Liedtext
repStart = "ùÑÜ"
repStop = "ùÑá"
```

### Anpassung von Kanoneins√§tzen {#sec-einsaetze}

Der Stil, in dem Kanoneins√§tze markiert werden, kann in den `lilypond-custom-includes/base_config.ly` eingestellt werden (unbedingt unter die `general_include`!). So sieht die Standardeinstellung aus:

``` lilypond
\paper {
  cueMarkup = \markup {
    \italic
      #(make-on-the-fly-markup (lambda (layout props m)
        (interpret-markup layout props 
          (string-join (map (lambda (n) (format #f "~@r." n)) (chain-assoc-get 'cues props)) ", ")))
        (make-null-markup))
  }
}
```

Relevant sind vermutlich die Auszeichnung (italic, bold). Das kann entsprechend angepasst werden. Au√üerdem das Ziffernformat, also r√∂misch oder arabisch. Das funktioniert mit dem String `"~@r."`. Arabische Ziffern k√∂nnten mit dem String `"~a."` erreicht werden. Alle verf√ºgbaren Formatspezifikationen gibt es in der [Scheme-Doku](https://www.gnu.org/software/guile/manual/html_node/Formatted-Output.html) zu finden.

## Anpassung der Akkordsymbole {#sec-akkordsymbole-anpassen}

Auch die bestimmte Darstellung, spezieller Akkordsymbole kann in den `custom_style_overrides.ly` angepasst werden. Siehe dazu mehr in der [LilyPond-Doku](https://lilypond.org/doc/v2.24/Documentation/notation/displaying-chords.de.html#customizing-chord-names).

## Kategorien

Mithilfe unserer Skripte ist es m√∂glich, Lieder Kategorien zuzuordnen und sie optional mit Kategoriebildchen zu versehen. Auch ein Kategorienverzeichnist ist m√∂glich (siehe [Einf√ºhrung](liederbuecher_machen.qmd#sec-kategorienverzeichnis)). So funktioniert es:

### Kategorien erstellen

Als erstes solltest du Kategorien in der Datei `lilypond-custom-includes/categories.ly` definieren. Die Datei sieht so aus:

``` lilypond
#(define category-names '(
  (see "See und\nPiraten")
  ;(categoriekey "Titel der Kategorie")
  ))

%% Path to Category images
#(define-public (category-image-path category)
   (string-append "../../liederbuecher/beispiel_liederbuch/categories/"
         category ".eps"))
```

Das gehen wir jetzt Zeile f√ºr Zeile durch. In der ersten Zeile wird die Scheme[^1]-Funktion definiert, das ist erstmal uninteressant. Ab der zweiten Zeile werden dann alle Kategorien und ihre Titel definiert. Das Schema wird im auskommentierten Teil beschrieben[^2]: Erst kommt die ID der Kategorie und danach in Anf√ºhrungszeichen der Titel. Auf die ID wird in der Lied-Layout-Datei referenziert. Der Titel ist der, der dann im Kategorienverzeichnis benutzt wird. Im obigen Beispiel ist also `see` die ID und `"See und/nPiraten"` der Titel. Das `/n` bewirkt √ºbrigens einen Zeilenumbruch.

[^1]: Scheme ist die Programmiersprache, in der LilyPond geschrieben ist.

[^2]: Bei Scheme wird mit dem Semikolon (`;`) auskommentiert.

Im zweiten Teil wird der Pfad zu den Kategoriebildchen definiert. Der sollte auf jeden Fall angepasst werden und auf einen Ordner in deinem Liederbuch-Ordner verweisen. Die Dateinamen m√ºssen dabei der ID entsprechen und das EPS-Format haben.

### Liedern Kategorien zuweisen

In der Layout-Datei der Lieder k√∂nnen im zweiten Schritt dann Kategorien den Liedern zugewiesen werden, in dem in der `categories`-Variable alle betreffenden IDs durch Leerzeichen getrennt aufgeschrieben werden. Das k√∂nnte dann so aussehen:

``` lilypond
HEADER = \bookpart {
  \header {
    \basicSongInfo
    %infotext = ""
    categories = "see abend andacht"
  }
}
```

Das Lied w√ºrde also den Kategorien mit den IDs `see`, `abend` und `andacht` zugewiesen werden.

## Seitennummerierung beeinflussen {#sec-seitennummerierung}

Die Seitennummerierung bei Liederb√ºchern folgt der grunds√§tzlichen Logik, dass gerade Seiten immer links sind und ungerade Seiten immer rechts. Die erste Seite ist grunds√§tzlich immer die Seite 0. Das f√ºhrt unter Umst√§nden zu folgendem Problem:

| Links | Rechts |
|----|----|
| 0 (Deckblatt) | 1 (Leerseite Einband, eigentlich links) |
| 2 (erstes Lied, eigentlich rechts) | 3 ‚Ä¶ |

Wie zu sehen, sollte das Deckblatt in diesem Fall (der vermutlich der Regelfall ist) eigentlich die Seite 1 haben. Die L√∂sung ist, dass im Paper-Block der Book-Umgebung in der Liederbuchdatei die Ziffer der ersten Seite definiert wird (diese folgt dann nach wie vor der oben genannten Logik):

``` lilypond
\book {
  \paper {
    first-page-number = #1
  }
  %‚Ä¶
}
```

## Seitennummerierung ausblenden {#sec-seitennummerierungausblenden}

Soll die Seitennummerierung ausgeblendet werden, kann daf√ºr folgender Befehl in der Bookpart-Umgebung verwendet werden:

``` lilypond
\bookpart {
  \paper {
    print-page-number = ##f
  }
}
```
