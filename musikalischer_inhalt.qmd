---
title: "Musikalischer Inhalt"
format: html
---

In diesem Abschnitt der Doku zeigen wir L√∂sungen f√ºr Probleme oder Herausforderungen, die sich aus der Arbeit mit unserem System ergeben. Vieles davon wurde von tux entwickelt und befindet sich in den `lilypond-common-includes`, bei manchen Themen verweisen wir auch einfach nur auf die LilyPond-Doku. Dieser Teil ist fokussiert auf Fragen bez√ºglich der Notation und dem Liedtext.

::: callout-note
Anmerkung: Die Codebeispiele sind teilweise vereinfacht und verk√ºrzt, um die Probleme und L√∂sungen m√∂glichst einfach zu erkl√§ren. Sie sind damit nicht zwangsl√§ufig eins zu eins √ºbertragbar und anwendbar (und finden sich teils nicht eins zu eins im Liederpool wieder).
:::

## Wiederholungen in den Strophen

Problem: Wiederholungszeichen (`ùÑÜ` und `ùÑá` ) im Text sollen nur in den Strophen, nicht aber unter den Noten stehen. Trotzdem wollen wir denselben Text f√ºr beides verwenden.

L√∂sung: Vor den wiederholten Teil im Text `\repStartWithTag` und vor der letzten Silbe (nach den `--` !) `\repStophWithTag`.

Zur Erkl√§rung: Es handelt sich faktisch um eine Stanza, die aber immer *vor* Silben gesetzt werden muss (sie kann aber auch rechts von Silben ausgerichtet werden). Diese Stanza wird nur bei einem bestimmten Tag ausgegeben, der `repeats` hei√üt. Mehr zu Tags findest du in der [Lilypond-Doku](https://lilypond.org/doc/v2.25/Documentation/notation/using-tags.de.html). Standardm√§√üig wird der Tag ausgegeben, soll das nicht der Fall sein (wie zum Beispiel unter den Noten), muss innerhalb des `MUSIC`-Teils der Befehl `\removeWithTag #'repeats` inkludiert werden.

Codebeispiel (aus: Ade zur guten Nacht):

``` lilypond
thirdVerse = \lyricmode {
  %‚Ä¶
  \repStartWithTag
  Wie man -- chen _ Glo -- cken -- schlag,
  da Herz bei _ Her -- zen lag,
  das hast du ver -- ges -- \repStopWithTag sen.
}

%‚Ä¶

MUSIC = {
  \removeWithTag #'repeats
  <<
      \songChords
      \new ChoirStaff = "firstStaff"
      <<
        \new Voice = "firstVoice" { \melodyVoice }
        \addlyrics { \firstVerse }
        \addlyrics { \secondVerse }
        \addlyrics { \thirdVerse }
        \addlyrics { \fourthVerse }
      >>
  >>
}
```

![In den Strophen sieht das dann zum Beispiel so aus:](images/wiederholungszeichen.svg)

## Melismata (mehrere Noten zu einer Silbe)

Problem: In manchen Strophen gibt es an einer Stelle ein Melisma und in der n√§chsten Strophe an derselben Stelle nicht. Dadurch verschiebt sich der Text.

L√∂sung: Nutzen von `\set ignoreMelismata = ##t` nach Bedarf. Siehe dazu auch in der [LilyPond-Doku](https://lilypond.org/doc/v2.25/Documentation/notation/multiple-notes-to-one-syllable).

Codebeispiel:

``` lilypond
%firstVerse mit Melismata:
firstVerse = \lyricmode {
  #(stanza 1)
  A -- de zur gu -- ten Nacht!
  Jetzt wird der Schluss ge -- macht,
  dass ich muss schei -- den.
  \repStartWithTag
  Im Som -- mer, da w√§chst der Klee, im Win -- ter da schneit‚Äôs den Schnee,
  da kom -- me ich wie -- \repStopWithTag der.
}

%secondVerse ohne Melismata
secondVerse = \lyricmode {
  #(stanza 2)
  Es trau -- ern Berg und Tal,
  wo ich viel tau -- send -- mal
  bin dr√º -- ber gan -- gen.
  \set ignoreMelismata = ##t %ab hier werden Melismata ignoriert
  \repStartWithTag
  Das hat dei -- ne Sch√∂n -- heit ge -- macht,
  die hat mich zum Lie -- ben ge -- bracht
  \unset ignoreMelismata %und hier wieder nicht mehr
  mit gro -- √üem Ver -- lan -- \repStopWithTag gen.
}
```

![So sieht dann der Output der ersten beiden Verse aus:](images/melismata.svg)

## Mehrere Silben zu einer Note

Siehe [Lilypond-Doku](https://lilypond.org/doc/v2.24/Documentation/notation/common-notation-for-vocal-music#multiple-syllables-to-one-note).

## Silbentrennung bei Volta-Klammern {#sec-silbentrennung-volta-klammern}

Problem: Es kommt vor, dass in Liedern die Melodie der Strophe wiederholt wird. Wenn man dabei eine Wiederholung mit Volta-Klammern notiert und ein Wort in die Wiederholung ‚Äûhineinragt‚Äú, dann skipt man die folgenden Notenwerte, was aber dazu f√ºhrt, dass unter der gesamten Klammer eins Lyric-Hyphens (Bindestriche zwischen den Silben) gesetzt werden.

L√∂sung: Mit `\once \hide \LyricHyphen` werden alle Hyphens der n√§chsten Silbe unterdr√ºckt. Stattdessen wird mit `\rightHyphen` bzw. `\leftHyphen` ein manueller Hyphen gesetzt (die Funktion ist in den `common-includes` definiert). Die `\skip4`-Befehle werden ggf. √ºber eine daf√ºr gesetzte Variable definiert (im unteren Beispiel `voltaSkipsLyrics`). Da die Hyphens im Text (also den ‚ÄûStrophen‚Äú) nicht zu sehen sein sollen, werden sie mittels eines Tags gesetzt, der `volta` hei√üt. Mehr zu Tags in der [Lilypond-Doku](https://lilypond.org/doc/v2.25/Documentation/notation/using-tags.de.html).

Codebeispiel:

``` lilypond
voltaSkipsLyrics = \lyricmode {
  \repeat unfold 10 { \skip4 }
}

firstVerseB = \lyricmode {
  Hab es selbst so ge -- w√§hlt, nie die Jah -- re \tag #'volta { \once \hide LyricHyphen \rightHyphen } ge -- \tag #'volta { \voltaSkipsLyrics \leftHyphen } z√§hlt,
  nie nach ges -- tern und mor -- gen ge -- fragt.
}
```

::: {#fig-hyphens layout-ncol="2"}
![So soll das nicht aussehen.](images/incorrect_hyphens.svg)

![So sieht das ganze dann ‚Äûsch√∂n‚Äú aus:](images/correct_hyphens.svg)

Links das Problem, rechts die L√∂sung.
:::

::: callout-warning
Achtung! Die manuell gesetzten Hyphens werden dann auch in den Strophen gesetzt. Deswegen m√ºssen diese unbedingt so eingesetzt werden, dass man sie in den Strophen entfernen kann. Zum Beispiel mit einem Tag `hyphen`. Beispiel aus ‚ÄûEh die Sonne √ºber Berg und Tal‚Äú:

``` lilypond
refLyricsB = \lyricmode {
  %‚Ä¶
  ob √º -- ber uns die St√ºr -- me gehn, wir sind \tag #'hyphen { \once \hide LyricHyphen \rightHyphen } be --
}
refLyricsC = \lyricmode {
  \tag #'hyphen { \skip4 \leftHyphen } reit.
}
```

Die manuell gesetzten Hyphens w√ºrden nun auch in den Strophen ausgedr√ºckt werden. Diese Bindestriche wollen wir da aber nat√ºrlich nicht haben, deswegen m√ºssen wir das unter den Strophen ‚Äûwegtaggen‚Äú (Beispiel ist vereinfacht):

``` lilypond
TEXT = \markuplist {
  \group-verses {
    \chordlyrics { \removeWithTag #'hyphen \refLyrics }
  }
}
```
:::

## Umgang mit Wiederholungen bei gleichbleibendem Text

Problem: Gibt es Volta-Klammern bei Liedern, in denen der Text des wiederholten Teils gleich ist, zum Beispiel, weil es nach der Klammer anders weitergeht, kommt es vor, dass man in die Lyrics zum Beispiel schreiben m√ºsste: `Und je -- der Kerl, der mit uns war, hat f√ºr im -- mer sich zu uns ge -- sellt. Und sellt.`. Das ist nat√ºrlich unpraktisch f√ºr die √úbernahme in die Strophen, weil man das `sellt. Und` ja nicht in den Strophen haben m√∂chte.

L√∂sung: Auch hier kommen wieder Tags zum Einsatz und zwar wie folgt. Es wird ein neuer Tag `repeat` definiert, der alles in einschlie√üt, was f√ºr die Volta-Wiederholungen notwendig ist. F√ºr die Strophen werden dann extra-Variablen definiert, in denen dieser Tag ausgeschaltet wird. Wichtig: Der Tag muss sich nat√ºrlich auch in der Melodie und den Akkorden wiederfinden.

Codebeispiel:

``` lilypond
firstVerseWithRepeat = \lyricmode {
  #(stanza 1)
  Wir sind ei -- ne klei -- ne ver -- lo -- re -- ne Schar,
  wir ste -- hen f√ºr uns auf der Welt.
  \repStartWithTag Und je -- der Kerl, der mit uns war,
  hat f√ºr im -- mer sich zu uns ge -- \tag #'repeat { sellt. Und } \repStopWithTag sellt.
}

firstVerse = \lyricmode {
  \removeWithTag #'repeat \firstVerseWithRepeat
}

firstVoice = \relative c' {
  \partial4
  fis4
  g8 e4 fis8 g e4 g8
  fis g4 fis8 e4 d4
  g8 g4 g8 a d4 c8
  h2. h4
  \repeat volta 2 {
    c4 c c c
    h8 h4 (a8) g4 g8 a
    h8 h4 h8 a h4 a8
  }
  \alternative {
    % Tag bedenken
    \tag #'repeat { g2. h4 }
    { g1 }
  }
}

verseChords = \chordmode {
  \partial4
  s4 e1:m h2:7 e4:m d:7
  g2 d:7 g1
  \repeat volta 2 {
    c1 g g2 d:7
  }Bock
  \alternative {
    %Tag bedenken
    \tag #'repeat { g1 }
    { g1 }
  }
}

% im MUSIC-Teil wird der Tag dann wieder aktiviert
MUSIC = {
  \keepWithTag #'repeat
  <<
      \songChords
      \new ChoirStaff = "firstStaff"
      <<
        \new Voice = "firstVoice" { \melodyVoice }
        \addlyrics { \firstVerseWithRepeat }
        \addlyrics { \secondVerseWithRepeat }
        \addlyrics { \thirdVerseWithRepeat }
      >>
  >>
}

% F√ºr die Strophen wollen wir keine Volta-Wiederholung
verse-chords = \chords { \removeWithTag #'repeat \verseChords }
```

## Umgang mit Wiederholungen bei ‚Äûneuem‚Äú Text

Problem: Volta-Klammern (Wiederholungsklammern), bei denen nicht derselbe Text wiederholt wird, sollten in den Strophen aufgel√∂st werden, damit der Text hintereinander (und nicht wie in den Noten untereinander) steht.

L√∂sung: Daf√ºr nutzen wir den Befehl `\unfoldRepeats`, der in den `verse-chords` und `verse-voice` gesetzt werden muss und dann per `\override` auf die Strophen angewendet werden kann (Achtung: `\override` gilt immer nur f√ºr das folgende Element, zum Beispiel ein Vers oder ein `\group-verses`-Ausdruck). Au√üerdem m√ºssen die Verse aufgeteilt werden in verschiedene Teile.

Codebeispiel:

``` lilypond
firstVerseA = \lyricmode {
  #(stanza 1)
  Er -- ste Wie -- der -- ho -- lung,
}

firstVerseB = \lyricmode {
  zwei -- te Wie -- der -- ho -- lung.
}

firstVerseC = \lyricmode {
  Wei -- ter geht‚Äôs
}

firstVerse = { \firstVerseA \firstVerseB \firsVerseC }

verse-chords = \chords { \unfoldRepeats \verseChords }
verse-voice = { \unfoldRepeats \firstVoice }
verse-breaks = { 
  s4 s2*3 s4 \break
  s4 s2*3 s4 \break
  s4 s2*3 s4 \break
}

TEXT = \markuplist {
  \override #`(verse-chords . ,verse-chords)
  \override #`(verse-reference-voice . ,verse-voice)
  \override #`(verse-break-voice . ,verse-breaks)
  \group-verses {
    \chordlyrics \firstVerse
  }
}
```

## Strophen mit unterschiedlichen Noten- oder Silbenverteilung oder Rhythmus

Problem:

-   Gerade bei neueren Liedern kommt es h√§ufig vor, dass sie unterschiedliche Rhythmen (zum Beispiel Auftakte) in den Strophen haben. Da der Text an Noten ausgerichtet wird, kommt es somit zu einem Problem, wenn in der 1. Strophe beispielsweise kein Auftakt vorhanden ist, in der 2. Strophe jedoch schon, kann der Versanfang der 2. Strophe nicht an Noten ausgerichtet werden, da diese in der Melodie (der 1. Strophe) gar nicht vorkommen.

-   Das Notenbild / der Notensatz der 1. Strophe soll aber nicht unn√∂tig aufgebl√§ht werden durch Auftaktkonstruktionen (und es gibt nat√ºrlich auch noch wesentlich komplexere Konflikte), da dadurch die Lesbarkeit erschwert wird und das Notenbild mehr Verwirrung als Klarheit schaffen w√ºrde.

L√∂sung:

-   Nutzung von einer Funktion, die Tags nutzt: `\alt` (siehe Codebeispiel). Die Idee ist, dass es eine einfache Notation gibt (√ºblicherweise die der 1. Strophe) und eine komplexere, an der alle Verse ausgerichtet werden k√∂nnen. Die `\alt`-Funktion wird im `\relative`-Teil wie folgt angewendet: `\alt { A } { B }`. A steht f√ºr die einfache Notation, B f√ºr die komplexe.

-   Nun gibt es wiederum das Problem, dass der Text in den unterschiedlichen Notationen an unterschiedlichen Stellen geskipt werden muss. Daf√ºr gibt es die L√∂sung √ºber die Funktion `\multiVerseSkips X`. Das `X` ist dabei zu ersetzen mit der Anzahl der zu skipenden Noten. `X` muss mindestens den Wert `1` haben.

-   Im `MUSIC`-Teil muss der Tag nun auch angegeben werden. Zum Codebeispiel: Im `music`-Teil muss nichts angepasst werden, stattdessen kann man nun im `MUSIC`-Teil angeben, ob man die multiVerse-Ansicht oder die firstVerse-Ansicht angezeigt werden m√∂chte. Das jeweils andere kann auskommentiert werden.

Codebeispiel:

``` lilypond
firstVerse = \lyricmode {
  #(stanza 1)
  \multiVerseSkips 4 Komm zu mir, leg dich ins Laub
  \\multiVerseSkips 1 und \\multiVerseSkips 1 h√∂r, was die Wur -- zeln er -- z√§h -- len.
  Je -- \\multiVerseSkips 1 des \\multiVerseSkips 1 Blatt zer -- f√§llt ein -- mal zu Staub
  \\multiVerseSkips 2 und je -- der Baum wird auch wie -- der zu Er -- de.
  Doch je -- des En -- de ist ein An -- fang
  und vol -- ler Kreis -- l√§u -- fe sind Zeit und Raum.
  Al -- les ver -- geht, doch nichts geht ver -- lo -- ren,
  al -- les ist Wirk -- lich -- keit und al -- les ist Traum.
}

% Verwendung von alt
firstVoice = \relative c' {
  \alt {} { \partial2 a8 a d8 f8 }
  a4. a8 a4
  g4 a g
  e2.
  \alt { r2 d4 } { r4 r8 d d d }
  e4. e8 e4
  d4 e d
  c4 a2
}

% Einbindung in music/MUSIC
music = {
  <<
      \songChords
      \new ChoirStaff = "firstStaff"
      <<
        \new Voice = "firstVoice" { \melodyVoice }
        \addlyrics { \firstVerse }
        \addlyrics { \tag #'multiVerse \secondVerse }
        \addlyrics { \tag #'multiVerse \thirdVerse }
        \addlyrics { \tag #'multiVerse \fourthVerse }
        \addlyrics { \tag #'multiVerse \fifthVerse }
      >>
  >>
}

MUSIC = {
  \keepWithTag #'multiVerse
  %\keepWithTag #'firstVerse
  \music
}
```

::: {#fig-wurzeln layout-ncol="2"}
![Die `\firstVerse`-Ansicht:](images/firstverse.svg)

![Die `\multiVerse`-Ansicht:](images/multiverse.svg)

Das sind die beiden m√∂glichen resultierenden Ansichten.
:::

## Zeilenumbr√ºche in den Strophen

Siehe [Layout-Teil der Doku](liedlayout.qmd#zeilenumbrueche).

## (Leichte) Textvariationen

Problem: Es gibt teilweise leichte Textvariationen bei einzelnen W√∂rtern.

L√∂sung: Auch da helfen uns wieder die Tags ([Lilypond-Doku](https://lilypond.org/doc/v2.25/Documentation/notation/using-tags.de.html)). Je nach Belieben kann dann entweder die eine Variante aktiviert werden oder die andere.

### Innerhalb einer Variante

Beim Regenbogenlied gibt es beispielsweise eine Unterscheidung im Artikel zwischen dem ersten und zweitem Refrain. Die L√∂sung daf√ºr ist, einfach beides einzubauen und dann das jeweils nicht ben√∂tigte auszuschalten. Das hat den Vorteil, dass wir trotzdem dieselbe Textbasis verwenden k√∂nnen.

Codebeispiel:

``` lilypond
refLyrics = \lyricmode {
  \ref
  \repStartWithTag √ú -- ber uns \tag #'first { ein } \tag #'second { der } Re -- gen -- bo -- gen,
  zeigt uns den Weg in sei -- nem Licht,
  die Wol -- ken sind schon fort -- ge -- zo -- gen,
  ver -- weh -- ren uns die Son -- ne \repStopWithTag nicht.
}

refLyricsFirst = \lyricmode { \removeWithTag #'second \refLyrics }
refLyricsSecond = \lyricmode { \removeWithTag #'first \refLyrics }
```

### Verschiedene Varianten

Anders verh√§lt es sich, wenn wir ein Lied haben, bei dem es verschiedene Varianten gibt. Mitunter kann es hilfreich sein, einen k√ºrzeren Befehl zu haben, wenn beide Varianten sich an vielen Stellen unterscheiden. Das kann folgenderma√üen gel√∂st werden:

``` lilypond
variant =
#(define-music-function (parser location a b) (ly:music? ly:music?) 
  #{ \tag #'bock { #a } \tag #'codex { #b } #})
```

Wenn mehr als zwei Varianten ben√∂tigt werden, kann der Befehl problemlos erweitert werden, indem weitere Elemente hinzugef√ºgt werden:

`#(define-music-function (parser location a b c d) (ly:music? ly:music? ly:music? ly:music?)  #{ \tag #'bock { #a } \tag #'codex { #b } \tag #'buedel { #c } \tag #'boernel { #d } #})`.

Der Tag-Abruf erfolgt dann zum Beispiel so:

``` lilypond
firstVerse = \lyricmode {
  #(stanza 1)
  Das ist der ers -- te \variant { Vers } { Verse } { Teil } { Ab -- schnitt }.
}
```

Dabei ist die oben definierte Reihenfolge entscheidend! Der jeweils gew√ºnschte Tag muss dann unbedingt im `MUSIC`-Teil zugewiesen werden. Dabei sollte im `MUSIC`-Teil ebenfalls erkennbar sein, wie viele und welche Varianten es √ºberhaupt gibt, zum Beispiel durch auskommentierte Alternativvarianten:

``` lilypond
MUSIC = {
  \keepWithTag #'bock
  %\keepWithTag #'codex
  %\keepWithTag #'buedel
  %\keepWithTag #'boernel
  <<
      \songChords
      \new ChoirStaff = "firstStaff"
      <<
        \new Voice = "firstVoice" { \melodyVoice }
        \addlyrics { \firstVerse }
      >>
  >>
}
```

## Strophennummerierung {#sec-strophennummerierung}

Die Strophennummerierung erfolgt nach folgendem Schema: `#(sanza 1)` f√ºr 1. Strophe, `#(stanza 2)` f√ºr zweite Strophe etc. Das genaue Aussehen kann nat√ºrlich global auch angepasst werden.

## Refrainnummerierung {#sec-refnum}

Ein einfacher Refrain wird gesetzt durch den Befehl `\ref`. Gibt es mehrere Refrains kann die Strophe spezifiziert werden, nach der der Refrain gesungen wird: `\ref #'(5)` f√ºr die 5. Strophe oder `\ref #'(3 4)` f√ºr die 3. und 4. Strophe. Wie zu sehen ist, k√∂nnen auch mehrere Strophennummern √ºbergeben werden.

::: callout-important
Bitte beachte unbedingt unsere [Standards](liedsatz_standards.qmd#sec-refnum-standards) zur Refrainsetzung!
:::

## Swing-Style

Den Swing-Style kann man mittels der Funktion `\swingMusic` erwirken. Das setzt den *folgenden* musikalischen Ausdruck im Swing-Style. `\swingMusic` kann beispielsweise in die `\melodyVoice` gepackt werden (dann geschweifte Klammern nicht vergessen). Die Midi-Ausgabe erfolgt dann sogleich rhythmisch korrekt.

Der Swing-Style kann mithilfe der Funktion `\swingOff` wieder ausgestellt werden. Das ist im unteren Beispiel zwar f√ºr die Midi-Ausgabe gar nicht n√∂tig, allerdings printed `\swingOff` auch das entsprechende Zeichen, dass kein Swing-Style mehr gespielt werden soll. Andernfalls w√ºsste man anhand des Liedblattes nicht, dass der Swing-Style aufh√∂rt.

``` lilypond
melodyVoice = {
  \global
  \swingMusic { \firstVoice \interludeVoice }
  \swingOff \refVoice
  \bar "|."
}
```

## Markierungen f√ºr beispielsweise Kanoneins√§tze {#sec-kanon}

Markierungen wie beispielsweise eine r√∂mische Ziffer f√ºr den Einsatz einer Kanonstimme sollten auf folgendem Wege eingetragen werden (Beispiel f√ºr dreistimmigen Kanon):

``` lilypond
eins = { \tag #'einsaetze { \tweak self-alignment-X #LEFT \mark \markup { \italic "I." } } }
zwei = { \tag #'einsaetze { \tweak self-alignment-X #LEFT \mark \markup { \italic "II." } } }
drei = { \tag #'einsaetze { \tweak self-alignment-X #LEFT \mark \markup { \italic "III." } } }
```

Was passiert da und wo gibt es ggf. etwas anzupassen? Der Variablenname kommt als erstes. Dahinter folgt ein Tag, der hier `einsaetze` hei√üt, damit die Markierungen unten in den Strophen ausgeschaltet werden k√∂nnen. Anschlie√üend folgen einige Platzierungsbefehle und dann ein `\markup`-Befehl: `\markup { \italic "I." }`. In der Regel sollten Markierungen wie diese immer kursiv geschrieben sein. Bei Kanoneins√§tzen sollen r√∂mische Ziffern genutzt werden. Die Markierungen k√∂nnen aber nat√ºrlich auch in der Layout-Datei √ºberschrieben werden.

## Optionale Akkorde

Optionale Akkorde k√∂nnen eingeklammert werden anhand der Funktion `\klamm { d4:7 }`.

## Alternative Akkorde {#sec-altchords}

Alternative Akkorde k√∂nnen mit der Funktion `\altChord` gesetzt werden. Die Funktion nimmt den nachfolgenden Akkord und behandelt ihn als ‚Äûnormalen‚Äú Akkord (mit L√§nge, Midi-Ausgabe etc.). Au√üerdem wird ein zweiter nachfolgender Akkord verlangt, der in Klammern ausgedr√ºckt wird. Dieser Akkord wird allerdings nicht musikalisch beachtet, er kommt weder im Midi vor, noch spielt die Dauer des Akkordes eine Rolle. Ein Beispiel:

``` lilypond
verseChords = \chordmode {
  \altChord b2 g:m c2 f d:m
}
```

Damit unterscheidet sich die Funktion von der Funktion `\klamm`, da bei dieser ein Akkord einfach nur geklammert wird, w√§hrend bei `\altChord` der Akkord zwar auch geklammert wird, musikalisch aber gar keine Rolle spielt.

Das kann beispielsweise genutzt werden, um einen Text, der wiederholt wird mit unterschiedlichen Akkorden, in der Strophe oder in den Noten nicht doppelt schreiben zu m√ºssen. Zum Beispiel beim Lied ‚ÄûDer Tramper‚Äú. Code:

``` lilypond
verseChords = \chordmode {
  %‚Ä¶
  \repeat volta 2 {
    \altChord b2 g2:m c2 f d:m
    b a:7
  }
  \alternative {
    \tag #'repeat { d:m d:7 }
    { d2:m ~ \tag #'repeat { d4.:m } \tag #'klamm { \klamm d4.:7 } }
  }
}
```

## Benutzerdefinierte Akkordnamen

Akkordzeichen k√∂nnen unter Umst√§nden deutlich komplizierter sein als beispielsweise `a:7`. Die in den meisten F√§llen verwendete Schreibweise f√ºr Akkorde wie `a a:m a:7 a:sus4` etc. ist nur eine Kurzschreibform. Grunds√§tzlich ist jeder denkbare Akkord in LilyPond abbildbar, sofern man wei√ü, wie man ihn abbilden m√∂chte. Die daf√ºr erforderlichen Informationen finden sich in der [LilyPond-Doku](https://lilypond.org/doc/v2.23/Documentation/notation/displaying-chords.de.html#customizing-chord-names).

In der Datei `lilypond-custom-includes/custom_style_overrides.ly` k√∂nnen die Akkorde dann benutzerdefiniert und global angepasst werden, zum Beispiel:

``` lilypond
customChordPrintings = {
  <h dis' fis' e''>-\markup { \small "add11" }
  <a cis' gis' h'>-\markup { \small "maj9" }
}
```

Der obige Code macht aus der Eingabe `h:1.3.5.11` ein Hadd11. Hilfreich k√∂nnen gegebenenfalls die Markup-Befehle `\small`¬†f√ºr eine kleinere Schrift und `\super` f√ºr Hochstellung sein.

## Akkordtabulatur

F√ºr manche speziellen Akkorde ist es n√ºtzlich f√ºr Gitarrenspieler\*innen, eine Tabulatur des Akkords direkt auf der Seite des Liedes zu haben. Das geht so:

``` lilypond
TEXT = \markuplist {
  \fret-chord #"x;x;o;2;3;2;" #"d"
}
```

Im ersten String bekommt jede Gitarrensaite eine Zuweisung (`x` f√ºr nicht gespielt, `o` f√ºr leer oder Zahl f√ºr den Bund), gefolgt von einem Semikolon. Im zweiten String wird die LilyPond-Akkordbezeichnung gefordert. Bei komplizierteren Akkorden hat man dann vermutlich eher etwas wie `h:1.3.5.11` (f√ºr Hadd11) stehen als `d` (f√ºr D-Dur).

## Akkordabst√§nde

Siehe [Layout-Doku](liedlayout_doku.qmd#sec-abstand-akkorde).

## R√∂mische Ziffern

Siehe [Layout-Doku](liedlayout_doku.qmd#sec-romanstanza).

## Balkensetzung

Bei der Balkensetzung sind unbedingt [unsere Standards](liedsatz_standards.qmd) zu beachten. Wie man in LilyPond die Balkensetzung beeinflusst, steht in der [LilyPond-Doku](https://lilypond.org/doc/v2.25/Documentation/notation/setting-automatic-beam-behavior).

## Textpausen {#sec-textpausen}

In bestimmten F√§llen kann es gew√ºnscht sein, dass eine In-Text-Pause gesetzt werden soll, also eine musikalische Pause im Text. Das geht mit dem Befehl `\textRest`. Die Pause nimmt ein Zeichen ein und sollte immer getaggt werden, damit sie im Zweifel auch ausgeschaltet werden kann. Beispiel:

``` lilypond
firstVerse = \lyricmode {
  Das ist ein \tag #'textrest { \textRest } \tag #'skip Bei -- spiel
}
```

Mit einem `\removeWithTag` kann die Textpause dann entfernt werden und mit `\pushToTag` kann an die Stelle vor dem n√§chsten Wort, die im obigen Beispiel mit dem Tag `skip` markiert wurde, ein `\skip4`-Befehl eingef√ºgt werden:

``` lilypond
TEXT = \markuplist {
  \group-verses {
    \chordlyrics { \pushToTag #'skip { \skip4 } \removeWithTag #'textrest \firstVerse }
  }
}
```

## Kanon- und sonstige Eins√§tze {#sec-einsaetze}

Kanoneins√§tze k√∂nnen mit dem Befehl `\cue` angegeben werden. Dem Befehl wird mindestens eine Zahl √ºbergeben, also beispielsweise `\cue 1` oder `\cue 1,2`. Der Einsatz muss **vor** der Note markiert werden, wo der Einsatz stattfindet. Beispiel:

``` lilypond
firstVoice = \relative c' {
  \cue 1 d4 e2 f4 |
}
```

Die Standardeinstellung ist, dass die Eins√§tze mit r√∂mischen Zahlen und kursiv angegeben werden, also z.B. *`I.`* oder *`I., II.`*. Das kann √ºber die Paper-Variable f√ºr ein einzelnes Lied oder auch das gesamte Liederbuch (dann am besten in den `custom-includes`) angepasst werden.
