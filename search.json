[
  {
    "objectID": "frescobaldi_einrichten.html",
    "href": "frescobaldi_einrichten.html",
    "title": "Einrichtung von Frescobaldi",
    "section": "",
    "text": "Frescobaldi ist eine sogenannte „Integrierte Entwicklungsumgebung“ (IDE). Das bedeutet, sie schafft ein angenehmes Arbeitsumfeld, wenn du mit LilyPond arbeitest. LilyPond selbst ist nämlich quasi nur die „Sprache“ in der du Noten setzt und das Programm, womit du sie auswertest („setzt“). Frescobaldi vereint dann unter anderem einen PDF-Viewer, einen MIDI-Player und noch ein paar andere nützliche Werkzeuge.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "frescobaldi_einrichten.html#frescobaldi-installieren",
    "href": "frescobaldi_einrichten.html#frescobaldi-installieren",
    "title": "Einrichtung von Frescobaldi",
    "section": "Frescobaldi installieren",
    "text": "Frescobaldi installieren\n\nGehe auf https://frescobaldi.org/ und wähle unter Download die neueste Version für dein Betriebssystem. In eigentlich allen Linux-Distributionen sollte Frescobaldi zudem in der Paketverwaltung zu finden sein.\nDu wirst auf eine Github-Seite weitergeleitet, wo du unter Assets die richtige Version auswählen kannst. Für Windows wähle *.exe, für Linux *.tar.gz und für MacOS .dmg.\nLade die Datei herunter und führe sie aus.\nFolge dem Installationsprozess.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "frescobaldi_einrichten.html#beim-ersten-ausführen",
    "href": "frescobaldi_einrichten.html#beim-ersten-ausführen",
    "title": "Einrichtung von Frescobaldi",
    "section": "Beim ersten Ausführen",
    "text": "Beim ersten Ausführen\n\nGehe in die Einstellungen.\nUnter Lilypond-Einstellungen musst du die korrekte Lilypond-Version einstellen. Gehe dazu auf Hinzufügen und wähle dann im Explorerfenster die *.exe-Datei aus. Dazu musst du in den Ordner gehen, in dem du den LilyPond-Ordner eben abgelegt hast (siehe oben), und die Datei bin/lilypond.exe auswählen.\nAußerdem ist die Einstellung Dokument speichern, wenn möglich unter Lilypond-Einstellungen und dort Lilypond starten sinnvoll, damit man gleich kompilieren kann, ohne dauernd speichern zu müssen.\nEine weitere sinnvolle Einstellung ist unter Allgemeine Einstellungen im Reiter Saving die Einstellung Leerzeichen am Zeilenende entfernen. Es macht Sinn, dort einen Haken zu setzen.\nFalls du Linux nutzt, ist es wichtig, dass du jeweils vorm Starten von Frescobaldi einen MIDI-Player startest. Was du dafür tun musst, ist in diesem GitHub-Issue erklärt.\nDas war’s schon. Fertig!",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "markdown_tutorial.html",
    "href": "markdown_tutorial.html",
    "title": "Markdown Basics",
    "section": "",
    "text": "Anmerkung: CC-BY-SA; Grundlage: https://blogs.uni-bremen.de/studytools/2021/09/07/markdown-einfach-gut-schreiben/, Änderungen wurden vorgenommen\n\n„Ein Tool, sie alle zu schreiben, […] selbst im Dunkeln zu tippen und ewig zu speichern…“\n– Der Herr der Ringe\n\nJa, Schreiben im digitalen Zeitalter ist nicht weniger kompliziert als früher: kam es damals auf Federkiel und Tinte an, hast du heute hunderte Programme zur Auswahl. Und darfst dich ständig umgewöhnen: vieles ist nicht kompatibel miteinander und verschwindet vielleicht nach 5 Jahren im Schicksalsb… sorry – in der Versenkung. Nerv!\nAber es geht auch anders!\nEs gibt sie: eine Methode, mit der du (fast) überall schreiben kannst und am Ende trotzdem immer ein gut formatierter Text dabei herauskommt – egal ob Chat-Nachricht, Buch oder eine Webseite. Die Lösung heißt: Markdown!\nMarkdown ist eine Markup-Sprache (eine sogenannte „Auszeichnungssprache“). Mit Sonderzeichen bekommen Worte, Sätze oder Absätze bestimmte Funktionen zugewiesen. Nach der Umwandlung in das endgültige Format ist der fertige Text dann auch genau so formatiert. Das Tolle daran ist: du benötigst kein spezielles Programm zum erstellen und kannst mit wenigen Zeichen einen fertig formatierten Text schreiben. Der ist schon als „roher“ Text gut lesbar – nicht erst nach dem Umwandeln. Die Basics von Markdown kannst du außerdem innerhalb weniger Minuten lernen, denn die sind wirklich intuitiv!\nUnd wie soll das jetzt „die eine Lösung für jeden Text“ sein? Easy-Peasy: wahnsinnig viele Programme verstehen von sich aus schon Markdown!\nHinweis: Markdown ist eine Konvention um einfache Textdateien zu schreiben. Daher brauchst du im Grunde kein besonderes Programm, um Markdown zu schreiben. Hilfreich ist es aber trotzdem, denn ein Markdown-fähiger Editor kann dir mit Farben („Syntax-Highlighting“) oder sichtbarer Formatierung die Bedeutung deiner Sonderzeichen anzeigen. Damit sieht dein Text entweder bunt und besser lesbar aus, oder gleich wie der fertige Text.\nHier ein paar Beispiele:\n\nDer Editor Zettlr ist ein Markdown-Editor, der fürs wissenschaftliche Schreiben konzipiert wurde. Damit kannst du alle Anforderungen umsetzen – von Fußnoten bis Quellenangaben oder Diagrammen.\nDas Mindmap-Programm Freeplane kann deine Mindmap als Markdown-Dokument ausgeben. Dafür werden alle Überschriften in der Mindmap Kapitel-Überschriften in Markdown. Schwupps, schon ist deine Mindmap ein Text!\nAuch im Chat-Programm Rocket.Chat der Uni-Bremen kannst du mit Markdown deine Nachrichten formatieren.\nDas Statistik-Programm R nutzt eine Markdown-Variante (R-Markdown) und kann damit deine Datenanalysen als druckfertiges Dokument erstellen – ganz ohne Office, aber mit allen Grafiken und Tabellen.\nMarkText.\n\nAber damit nicht genug: Neben den vielen Online-Editoren, Programmen und Apps mit Markdown-Unterstützung lassen sich mit Markdown auch Präsentationen erstellen, Blogs gestalten oder sogar Diagramme und Mindmaps zeichnen…\nMarkdown ist also sehr flexibel nutzbar – es kommt nur darauf an, in welches Format es später umgewandelt werden soll und welches Programm du dazu nutzen willst. Deinen Text kannst du also für immer lesbar speichern, ohne auf Kostenpflichtige Software angewiesen zu sein.\nFun-Fact:\nMarkdown wurde 2004 von John Gruber und Aaron Swartz erdacht. Markdown orientiert sich dabei am Stil für E-Mails und sollte vor allem eines: ganz einfach lesbar und schreibbar sein – egal ob als einfacher oder formatierter Text.\n\n\nDank dieser schlichten Eleganz gibt es inzwischen viele unterschiedliche Varianten von Markdown für unterschiedliche Bereiche:\nneben dem ursprünglichen „Markdown“ gibt es nun „Github-flavored-Markdown“ (GfM; von der gleichnamigen Coding-Plattform) und Varianten wie „R-Markdown“ für das Statistik-Programm R.\nDas Projekt “CommonMark” versucht die vielen Varianten und ihre Spezialfälle zu bündeln, um daraus einen tatsächlichen Standard zu entwickeln.\nUnd der Dokumentenkonverter Pandoc wandelt fast jedes Dokumentenformat in ein anderes um… und nutzt das unglaublich umfangreiche „Pandoc-Markdown“.\nWenn du mit Markdown aus deinem einfachen Text einen schönen Text zaubern möchtest, brauchst du also eine Software, die Markdown versteht und dir daraus etwas bastelt: eine HMTL-Webseite, ein E-Book, eine PDF, Office-Dokument oder Blog – für alle Bereiche gibt es unterschiedliche Software. Aber die ist erstmal gar nicht so wichtig… Wichtig ist, dass du Markdown schreiben und lesen kannst!\nAlso, guck mal…\n\n\n\n\n\nEingabe:\n# Überschrift 1\n## Überschrift 2\n### Überschrift 3\nAusgabe:",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "markdown_tutorial.html#markdown-varianten",
    "href": "markdown_tutorial.html#markdown-varianten",
    "title": "Markdown Basics",
    "section": "",
    "text": "Dank dieser schlichten Eleganz gibt es inzwischen viele unterschiedliche Varianten von Markdown für unterschiedliche Bereiche:\nneben dem ursprünglichen „Markdown“ gibt es nun „Github-flavored-Markdown“ (GfM; von der gleichnamigen Coding-Plattform) und Varianten wie „R-Markdown“ für das Statistik-Programm R.\nDas Projekt “CommonMark” versucht die vielen Varianten und ihre Spezialfälle zu bündeln, um daraus einen tatsächlichen Standard zu entwickeln.\nUnd der Dokumentenkonverter Pandoc wandelt fast jedes Dokumentenformat in ein anderes um… und nutzt das unglaublich umfangreiche „Pandoc-Markdown“.\nWenn du mit Markdown aus deinem einfachen Text einen schönen Text zaubern möchtest, brauchst du also eine Software, die Markdown versteht und dir daraus etwas bastelt: eine HMTL-Webseite, ein E-Book, eine PDF, Office-Dokument oder Blog – für alle Bereiche gibt es unterschiedliche Software. Aber die ist erstmal gar nicht so wichtig… Wichtig ist, dass du Markdown schreiben und lesen kannst!\nAlso, guck mal…",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "markdown_tutorial.html#markdown-syntax",
    "href": "markdown_tutorial.html#markdown-syntax",
    "title": "Markdown Basics",
    "section": "",
    "text": "Eingabe:\n# Überschrift 1\n## Überschrift 2\n### Überschrift 3\nAusgabe:",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "markdown_tutorial.html#überschrift-2",
    "href": "markdown_tutorial.html#überschrift-2",
    "title": "Markdown Basics",
    "section": "Überschrift 2",
    "text": "Überschrift 2\n\nÜberschrift 3\nBemerkung:\nÜberschriften werden durch ein vorangestelltes Rauten-Symbol (#) mit einem Leerzeichen dahinter markiert. Es gibt insgesamt 6 mögliche Überschriftenebenen.\n\n\nFormatierungen / Emphasis\nEingabe:\n*italic*, _italic_\n**bold**, __bold__\n***italic and bold***, ___italic and bold___\n**combine _italic_ and bold**\n~~strikethrough~~\nAusgabe:\nitalic, italic\nbold, bold\nitalic and bold, italic and bold\ncombine italic and bold\nstrikethrough\nBemerkung:\nUm einen Text kursiv zu formatieren, wird er durch einen Stern („Asterisk“), * oder einen Unterstrich, _, gerahmt. Um einen Text fett zu setzen, werden zwei Sterne bzw. zwei Unterstriche benötigt. Eine Kombination von beidem ist auch möglich. Drei Sterne/Unterstriche markieren einen fetten und kursiven Text. Durchgestrichener Text wird durch zwei Tilden (~) markiert.\n\n\nListen / Lists\nEingabe:\n* Das ist eine Liste\n- Das ist auch eine Liste\n+ Das ist ebenfalls eine Liste\n\n\n1. Das ist eine nummerierte Liste\n2. und weiter geht die Liste.\nAusgabe:\n\nDas ist eine Liste\nDas ist auch eine Liste\nDas ist ebenfalls eine Liste\n\n\nDas ist eine nummerierte Liste\nund weiter geht die Liste.\n\nBemerkung:\nListen werden erstellt durch einen Stern *, ein Minus - oder ein Plus + sowie ein Leerzeichen dahinter (genauso wie bei Überschriften). Nummerierte Listen nach demselben Prinzip mit einer Zahl, einem Punkt dahinter und sowie einem Leerzeichen (1.).\n\n\nLinks\nEingabe:\n[Philipps-Universität Marburg](https://www.uni-marburg.de)\n\n[Philipps-Universität Marburg](https://www.uni-marburg.de \"PUM\")\n\nhttps://www.uni-marburg.de\nAusgabe:\nPhilipps-Universität Marburg\nPhilipps-Universität Marburg\nhttps://www.uni-marburg.de\nBemerkung:\nDer Text des Links wird in eckige Klammern gesetzt ([...]), der eigentliche Link in gerundete Klammern ((...)). Ein Linktitel, der beim daraufgehen mit der Maus erscheint, kann in Anführungszeichen (\") hinter den eigentlichen Link gesetzt werden. Ist kein spezifischer Text gewollt, kann der Link einfach so in den Fließtext integriert und wird dann automatisch erkannt.\n\n\nZeilenumbrüche\nEingabe:\nZeilenumbrüche können mit einem Enter gemacht werden.\nOder mit zwei Leerzeichen  \nEin Absatz hingegen mit einer Leerzeile so:\n\nDas ist der nächste Absatz steht dann hier.\nAusgabe:\nZeilenumbrüche können mit einem Enter gemacht werden. Oder mit zwei Leerzeichen\nEin Absatz hingegen mit einer Leerzeile so:\nDas ist der nächste Absatz steht dann hier.\nBemerkung:\n\nBilder / Images\n\nEingabe:\n![Beispielbild](images/git.png)\nAusgabe:\n\n\nBildbeschreibung\n\n\n\nBemerkung:\nBilder funktionieren nach demselben Prinzip wie Links. Das Bild muss sich, um korrekt geladen zu werden, in demselben Ordner wie die Markdown-Datei befinden.\nGood to know: Bilder können in vielen Markdown-Editoren auch per Drag-and-Drop eingefügt werden.\n\n\nTabellen / Tables\nEingabe:\n| Spaltenüberschrift 1 | Spaltenüberschrift 2   | Spaltenüberschrift 3 |\n| ---                  | :---:                  | ---:                 |\n| Inhalt Spalte 1      | Inhalt Spalte 2        | 1,20 €               |\n| noch was …           | und weiter             | 3,60 €               |\n| noch mehr            | bla bla                | 5,40 €               |\n\n: Tabellenüberschrift\n\n\nSpaltenüberschrift 1 | Spaltenüberschrift 2 | Spaltenüberschrift 3\n----- | :----: | -----:\nInhalt Spalte 1 | Inhalt Spalte 2 | 1,20 €\nnoch was … | und weiter | 3,60 €\nnoch mehr | bla bla | 5,40 €\n\n: Tabellenüberschrift\nAusgabe:\n\nTabellenüberschrift\n\n\nSpaltenüberschrift 1\nSpaltenüberschrift 2\nSpaltenüberschrift 3\n\n\n\n\nInhalt Spalte 1\nInhalt Spalte 2\n1,20 €\n\n\nnoch was …\nund weiter\n3,60 €\n\n\nnoch mehr\nbla bla\n5,40 €\n\n\n\n\nTabellenüberschrift\n\n\nSpaltenüberschrift 1\nSpaltenüberschrift 2\nSpaltenüberschrift 3\n\n\n\n\nInhalt Spalte 1\nInhalt Spalte 2\n1,20 €\n\n\nnoch was …\nund weiter\n3,60 €\n\n\nnoch mehr\nbla bla\n5,40 €\n\n\n\nBemerkung:\nTabellen werden markiert, in dem alle Spaltengrenzen mit senkrechten Strichen (pipes) (|) begrenzt werden. Die äußeren Pipes sind lediglich optional und müssen nicht zwingend gesetzt werden. Auch die aufgefüllten Leerzeichen sind optional und dienen in dem Falle nur der besseren Lesbarkeit. Im zweiten Beispiel ist zu sehen, dass sich nichts verändert hat. Mit drei Minus-Zeichen (---) wird eine Spaltenüberschrift markiert. Mit einem Doppelpunkt vor (linskbündig), nach (rechtsbündig) oder auf beiden Seiten der Minus-Zeichen (zentriert) kann die Ausrichtung der Spalte bestimmt werden. Markdown-Tabellen kann man sich auch von Online-Seiten formatieren lassen: https://tablesgenerator.com/markdown_tables\nTabellen sind nicht Bestandteil des Basic Markdown, allerdings in GFM (Github-flavored-Markdown) und damit können die meisten Editoren damit umgehen (auch RMarkdown und Quarto). Achtung! Tabellenüberschriften funktionieren offenbar nicht bei GFM, sondern nur bei RMarkdown/Quarto/…\n\n\nFußnoten / Footnotes\nEingabe:\nText^[Fußnote]\nAusgabe:\nText1\nBemerkung:\nFußnoten werden markiert durch ein Dach (^). Der Text der Fußnote wird dann in eckigen Klammern gesetzt ([...]). Die Fußnote wird dann autmatisch in den Text integriert und auch numeriert. Fußnoten werden nicht vom Basis Markdown unterstützt, allerdings sind sie in GFM (Github-flavored-Markdown) integriert und auch in den in der Wissenschaft häufig genutzten RMarkdown bzw. dessen Weiterentwicklung Quarto sind Fußnoten möglich.\n\n\nBlockzitat / Blockquote\nEingabe:\n&gt; Das ist ein Blockzitat\n&gt;\n&gt; &gt; Das ist eine Antwort.\n&gt; &gt;\n&gt; &gt; &gt; Das ist noch eine Antwort. *Formatierungen* **funktionieren** **_auch_ hier.**\nAusgabe:\n\nDas ist ein Blockzitat\n\nDas ist eine Antwort.\n\nDas ist noch eine Antwort. Formatierungen funktionieren auch hier.\n\n\n\nBemerkung:\nBlockzitate werden markiert durch ein Größer-als-Zeichen (&gt;). Wichtig ist wie bei vielen Markdown-Befehlen das Leerzeichen dahinter. Weitere „Antworten“ / Zitate in Zitaten können durch zwei &gt; markiert werden. Auch dabei ist ein Leerzeichen zu setzen (&gt; &gt;). Formatierungen funktionieren auch innerhalb von Zitaten.\n\n\nCode\nEingabe:\n`ein einzelner Code-Schnipsel`\n\n\n``` r\n#Ein ganzer Codeblock\n    ```\nAusgabe:\nein einzelner Code-Schnipsel\n#Ein ganzer Codeblock.\nlibrary(\"tidyverse\")\nBemerkung:\nCode kann gerahmt von je einem accent grave markiert werden (`). Ein ganzer Code-Block über drei Accents (```). Viele Markdown-Editoren unterstützen auch Syntax-Highlighting. Dafür muss die jeweilige Programmiersprache hinter den ersten drei Accents benannt werden.\n\n\nSonderzeichen\nEingabe:\nStudent\\*innen und Professor\\_innen\nAusgabe:\nStudent*innen und Professor_innen\nBemerkung:\nDer Nachteil bei der Nutzung von Sonderzeichen zur Formatierung ist, dass die ihre Verwendung im Text schwieriger sein kann, wenn Markdown aus ihnen eine Formatierung liest. Gerade beim Gendern kommt dies besonders häufig vor, da das Gendersternchen und auch der Gender-Gap in Markdown für die Formatierungen italic und bold genutzt werden. Um dies zu verhindern kann ein Backslash (\\) verwendet werden.\n\n\n\nHorizontale Linie\nEingabe:\n***\n\n___\n\n---\nAusgabe:\n\n\n\nBemerkung:\nEine horizontale Linie kann über drei Asterisken (***), Unterstriche (___) oder Minus-Zeichen (---) erzeugt werden.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "markdown_tutorial.html#hilfe",
    "href": "markdown_tutorial.html#hilfe",
    "title": "Markdown Basics",
    "section": "Hilfe",
    "text": "Hilfe\nJede Menge Hilfe und Unterstützung ist im Internet zu finden. Zu empfehlen sind unter anderem:\n\nMarkdown-Basics von Quarto: https://quarto.org/docs/authoring/markdown-basics.html\nQuarto-Cheatsheet: https://www.datacamp.com/cheat-sheet/quarto-cheat-sheet-previously-known-as-r-markdown\nRMarkdown-Tutorial von RStudio: https://rmarkdown.rstudio.com/lesson-1.html\nRMarkdown-Cheatsheet: https://rmarkdown.rstudio.com/lesson-15.html\nWissenschaftliche Texte und Artikel mit Markdown schreiben\n\nVideos:\n\nWissenschaftliches Schreiben mit Quarto Markdown – eine Anleitung | Dr. Benjamin Schlegel\nBesser schreiben mit Pandoc und Markdown von Albert Krewinkel | NooK\nWissenschaftliches Schreiben in Markdown | Alumni des Heidelberger Life-Science Lab\nAcademic Writing in Markdown | Nicholas Cifuentes-Goodbody",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "markdown_tutorial.html#footnotes",
    "href": "markdown_tutorial.html#footnotes",
    "title": "Markdown Basics",
    "section": "Fußnoten",
    "text": "Fußnoten\n\n\nFußnote↩︎",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Markdown Basics"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Moin.",
    "section": "",
    "text": "Schön, dass du hergefunden hast! In diesem Leitfaden zeigen wir dir, wie du mit LilyPond und Git Liederbücher anhand unserer Vorlagen und Skripte erstellen kannst. Wir versuchen dich dabei bestmöglich an die Hand zu nehmen, um die Hürden, die es dabei gibt, möglichst niedrig zu halten. Zu diesem Zwecke gibt es diesen Leitfaden, aber auch eine Gruppe auf Signal, in der sich alle Personen befinden, die mit unserem System Liederbücher machen.\n\n\nEine kleine Übersicht über Vorteile, die unser System mit sich bringt. Wenn dir davon nicht alles was sagt, ist das gar nicht schlimm.\n\nDu kannst Liederbücher mit Noten und ohne Noten erstellen. Du kannst außerdem entscheiden, ob du Akkorde über den Strophen haben möchtest oder nicht.\nDu benötigst dafür keine kostenpflichtigen Programme. Alle Programme, die wir nutzen, sind Free and Open Source Software.\nDu kannst davon profitieren, dass wir in unserem Liederpool schon etliche Lieder gesetzt haben.\nDurch unsere Struktur profitierst du von Fehlerkorrekturen anderer Liederbuchprojekte.\nLilyPond ist ein codebasiertes Notensatzprogramm, das bedeutet, man kann sehr gut ein Versionierungs- und Nachverfolgungssystem mit Git nutzen.\n\n\n\n\nWir sind ein Zusammenschluss an verschiedenen Liederbuchprojekten, die alle LilyPond nutzen. Irgendwann kamen wir an den Punkt, dass es cool wäre, wenn man mehr Synergien untereinander hätte. Daraufhin haben wir das Konzept unseres Liederpools entwickelt, in dem sich nur der musikalische Inhalt eines Liedes befindet, den man dann in seinem Liederbuchprojekt spezifisch layouten kann. Das hat zwei riesige Vorteile: Einerseits kann man von dem profitieren, was andere schon gesetzt haben, und andererseits kann man von den Fehlerkorrekturen anderer profitieren.\n\n\n\nDiese Website besteht aus grob zwei Teilen:\n\nEinem How-To-Liederbuch, das dir bei der Einrichtung von LilyPond, Frescobaldi und Git hilft. Außerdem wird darin erklärt, wie du dein erstes Lied setzt, wie du es in unseren Pool einbringen kannst und natürlich, wie du ein eigenes Liederbuch anfertigst.\nEiner möglichst vollständigen Dokumentation unseres Systems, einschließlich der selbstgeschriebenen Skripte. Das umfasst:\n\nStandards für den Liedersatz\nDoku von Metadaten-Angaben\nDoku von musikalischem Inhalt\nDoku vom Lied-Layouten\nDoku vom Liederbuch-Layouten\nWie Links als Quelle in die Metadaten eingebunden werden sollen\nNützliche Lifehacks\nEine ausführlichere Einführung in Git\nDoku unseres Review-Prozesses\nEinführung in Markdown (in Markdown bzw. Quarto ist diese Website geschrieben)\n\n\nSo, jetzt genug der langen Vorrede. Los geht’s!"
  },
  {
    "objectID": "index.html#was-können-wir-dir-bieten",
    "href": "index.html#was-können-wir-dir-bieten",
    "title": "Moin.",
    "section": "",
    "text": "Eine kleine Übersicht über Vorteile, die unser System mit sich bringt. Wenn dir davon nicht alles was sagt, ist das gar nicht schlimm.\n\nDu kannst Liederbücher mit Noten und ohne Noten erstellen. Du kannst außerdem entscheiden, ob du Akkorde über den Strophen haben möchtest oder nicht.\nDu benötigst dafür keine kostenpflichtigen Programme. Alle Programme, die wir nutzen, sind Free and Open Source Software.\nDu kannst davon profitieren, dass wir in unserem Liederpool schon etliche Lieder gesetzt haben.\nDurch unsere Struktur profitierst du von Fehlerkorrekturen anderer Liederbuchprojekte.\nLilyPond ist ein codebasiertes Notensatzprogramm, das bedeutet, man kann sehr gut ein Versionierungs- und Nachverfolgungssystem mit Git nutzen."
  },
  {
    "objectID": "index.html#wer-wir-sind",
    "href": "index.html#wer-wir-sind",
    "title": "Moin.",
    "section": "",
    "text": "Wir sind ein Zusammenschluss an verschiedenen Liederbuchprojekten, die alle LilyPond nutzen. Irgendwann kamen wir an den Punkt, dass es cool wäre, wenn man mehr Synergien untereinander hätte. Daraufhin haben wir das Konzept unseres Liederpools entwickelt, in dem sich nur der musikalische Inhalt eines Liedes befindet, den man dann in seinem Liederbuchprojekt spezifisch layouten kann. Das hat zwei riesige Vorteile: Einerseits kann man von dem profitieren, was andere schon gesetzt haben, und andererseits kann man von den Fehlerkorrekturen anderer profitieren."
  },
  {
    "objectID": "index.html#kleiner-überblick-darüber-was-du-auf-dieser-website-alles-findest",
    "href": "index.html#kleiner-überblick-darüber-was-du-auf-dieser-website-alles-findest",
    "title": "Moin.",
    "section": "",
    "text": "Diese Website besteht aus grob zwei Teilen:\n\nEinem How-To-Liederbuch, das dir bei der Einrichtung von LilyPond, Frescobaldi und Git hilft. Außerdem wird darin erklärt, wie du dein erstes Lied setzt, wie du es in unseren Pool einbringen kannst und natürlich, wie du ein eigenes Liederbuch anfertigst.\nEiner möglichst vollständigen Dokumentation unseres Systems, einschließlich der selbstgeschriebenen Skripte. Das umfasst:\n\nStandards für den Liedersatz\nDoku von Metadaten-Angaben\nDoku von musikalischem Inhalt\nDoku vom Lied-Layouten\nDoku vom Liederbuch-Layouten\nWie Links als Quelle in die Metadaten eingebunden werden sollen\nNützliche Lifehacks\nEine ausführlichere Einführung in Git\nDoku unseres Review-Prozesses\nEinführung in Markdown (in Markdown bzw. Quarto ist diese Website geschrieben)\n\n\nSo, jetzt genug der langen Vorrede. Los geht’s!"
  },
  {
    "objectID": "liederbuecher_machen.html",
    "href": "liederbuecher_machen.html",
    "title": "Liederbücher erstellen",
    "section": "",
    "text": "Jetzt erstellen wir dir ein Liederbuch, wo das eine schon gesetzte und gelayoutete Lied reinkommen soll.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#ordner-vorbereiten",
    "href": "liederbuecher_machen.html#ordner-vorbereiten",
    "title": "Liederbücher erstellen",
    "section": "Ordner vorbereiten",
    "text": "Ordner vorbereiten\nBenenne den Ordner beispiel_liederbuch im Ordner liederbuecher um in den Namen deines Liederbuchs. Gehe dann in den Ordner und benenne auch die LilyPond-Datei entsprechend um.\nIm Folgenden gehen wir zusammen die Beispiel-Liederbuch-Datei durch und gehen kurz auf die wichtigsten Dinge ein.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#bild--und-liedpfade",
    "href": "liederbuecher_machen.html#bild--und-liedpfade",
    "title": "Liederbücher erstellen",
    "section": "Bild- und Liedpfade",
    "text": "Bild- und Liedpfade\nimagePagePath = \"categories\"\nsongPath = \"../../lieder\"\nGleich ganz am Anfang werden die Orte definiert, in denen nach Bildern, die du im Liederbuch verwendest, und nach den Liedern gesucht wird. Es macht Sinn, den songPath auf jeden Fall so zu lassen. Wenn du Kategorien nutzt, kannst du darüber nachdenken, einen eigenen Bilderordner zu nutzen. Der Ausgangspunkt des relativen Pfades ist der Ordner, in dem sich diese LilyPond-Datei befindet.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#lieder-bilder-und-leerseiten-einbinden",
    "href": "liederbuecher_machen.html#lieder-bilder-und-leerseiten-einbinden",
    "title": "Liederbücher erstellen",
    "section": "Lieder, Bilder und Leerseiten einbinden",
    "text": "Lieder, Bilder und Leerseiten einbinden\nDann folgt der Teil, in dem du Lieder einbinden kannst. Die Lieder werden in der Reihenfolge inkludiert, in der sie in der Datei auftreten. Es gibt folgende Möglichkeiten:\n\n\\includeSong \"ordnername\" inkludiert ein Lied. In unserem Falle wäre das also \\includeSong \"ueber_meiner_heimat_fruehling\".\n\\imagepage #125 \"see.eps\" fügt eine Seite ein, die nur aus einem Bild besteht. Auf der Seite wird dann auch keine Seitenzahl angezeigt. Mit der Zahl hinter dem Rautezeichen wird die Größe des Bildes definiert. Das Bild muss sich im oben festgelegten Ordner befinden.\n\\blankpage fügt eine Leerseite ein.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#book-part",
    "href": "liederbuecher_machen.html#book-part",
    "title": "Liederbücher erstellen",
    "section": "Book-Part",
    "text": "Book-Part\n\nDateiname\nAls erstes kannst du den Dateinamen der Liederbuch-PDF festlegen, zum Beispiel \\bookOutputName \"tusks_lied\" würde beim Kompilieren dann eine PDF mit dem Titel tusks_lied.pdf erzeugen.\n\n\nHeader / PDF-Metadaten\nIm Header kannst du einige PDF-Metadaten festlegen: Autor*innen, Titel, Thema, Schlüsselwörter.\n\\header {\n    pdfcomposer = \"Ich\"\n    pdftitle = \"tusks Lied ♫\" % Unicode is geil!\n    pdfsubject = \"Ein anspruchsvolles Liederbuch mit Noten und etwas Hintergrundinformationen zu den Liedern.\"\n    pdfkeywords = \"Liederbuch, Pfadfinder, bündisch\"\n  }\n\n\nCover-Seite\nEine Coverseite kann man auf diese Weise erstellen:\n\\bookpart {\n  %\\markup { \\epsfile #X #120 #\"images/front.eps\" }\n  %\\markup \\fill-line { \\center-column { \\vspace #1 \\pad-x #9 \\customEps #95 #\"Dateiname.dt\" \\vspace #1 } }\n  \\paper {\n    print-page-number = ##f\n    inner-margin = 0\n    outer-margin = 0\n    binding-offset = 0\n    top-margin = 0\n    bottom-margin = 0\n    last-bottom-spacing = #'((basic-distance . 0) (minimum-distance . 0) (padding . 0))\n    page-count = 1\n  }\n}\nDie beiden auskommentierten \\markup-Befehle sind zwei verschiedene Methoden, ein Titelbild einzubinden, das unter einem anzugebenden Dateipfad zu finden ist. Probier einfach aus, was da für dich besser passt.\nDie Eigenschaften im \\paper-Block setzen jeweils alle Abstände auf null und verhindern, dass eine Seitennummer ausgedrückt wird.\nWichtig: Wenn in einem \\bookpart kein \\markup oder eine \\markuplist aktiv ist, führt das auch nicht zu einer Seite im Liederbuch.\n\n\nVorwort-Seite\n% Seite\n\\bookpart {\n  \\paper { print-page-number = ##f }\n  \\markup { \n    \\title-to-pdf-toc \"Vorwort\"\n    \\vspace #2 \\fill-line { \\null\n    \\override #'(font-name . \"Old Standard TT\") \\fontsize #0.5 \\override #'(line-width . 115) \\left-column { \\justify-string #\"\n    Hier steht lustiger Text\"\n    \" \"\n    \\fill-line { \"blublub\" }\n    }\n    \\null }\n  }\n  % muss drinbleiben, damit die Kategoriebildchen alle reingeladen und referenziert werden können:\n  \\markuplist { \\embed-category-images }\n}\nWenn du ein Vorwort erzeugen möchtest, kannst du das zum Beispiel mit diesem Bookpart machen. Passe einfach alles nach deinen Wünschen an. Mit \\override #'(font-name . \"Schriftname\") änderst du die Schriftart, mit \\fontsize die Schriftgröße. Wichtig ist, dass du irgendwo in deinem Liederbuch (in einem Bookpart) den Befehl \\markuplist { \\embed-category-images } übergibst, denn der stellt sicher, dass die Kategoriebildchen auch reingeladen werden.\n\n\nDie Lied-Ausgabe\nMit dem nächsten Befehl wird die Lied-Ausgabe bewirkt: \\songs.\n\n\nKategorienverzeichnis\n\\bookpart {\n  \\markuplist {\n    \\index-in-columns-with-title #'categories \\column {\n      \\title-to-pdf-toc \"Kategorienverzeichnis\"\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Inhaltsverzeichnis nach Kategorien\" \\null }\n      \\vspace #1\n    }\n  }\n}\nMit diesem Code kannst du ein Kategorienverzeichnis erzeugen. Die Überschrift kannst du anpassen (\"Inhaltsverzeichnis nach Kategorien\"), ebenso deren Textgröße (\\fontsize #5), Schriftfamilie (\\sans) und Formatierungen wie zum Beispiel fett (\\bold).\n\n\nAutor*innenverzeichnis\n\\bookpart {\n  \\markuplist {\n    \\index-in-columns-with-title #'authors \\column {\n      \\title-to-pdf-toc \"Autor*innenverzeichnis\"\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Autorenverzeichnis\" \\null }\n      \\vspace #1\n    }\n  }\n}\nMit diesem Code erstellst du ein Autor*innenverzeichnis aller Autor*innen der in deinem Liederbuch referenzierten Autor*innen. Zu den Anpassungen der Überschrift siehe Kapitel 4.6.\n\n\nInhaltsverzeichnis\n\\bookpart {\n   \\indexSection #\"A\" \\markup { \"A\" }\n   \\indexSection #\"B\" \\markup { \"B\" }\n   \\indexSection #\"C\" \\markup { \"C\" }\n   \\indexSection #\"D\" \\markup { \"D\" }\n   \\indexSection #\"E\" \\markup { \"E\" }\n   \\indexSection #\"F\" \\markup { \"F\" }\n   \\indexSection #\"G\" \\markup { \"G\" }\n   \\indexSection #\"H\" \\markup { \"H\" }\n   \\indexSection #\"I\" \\markup { \"I\" }\n   \\indexSection #\"J\" \\markup { \"J\" }\n   \\indexSection #\"K\" \\markup { \"K\" }\n   \\indexSection #\"L\" \\markup { \"L\" }\n   \\indexSection #\"M\" \\markup { \"M\" }\n   \\indexSection #\"N\" \\markup { \"N\" }\n   \\indexSection #\"O\" \\markup { \"O\" }\n   \\indexSection #\"P\" \\markup { \"P\" }\n   \\indexSection #\"Q\" \\markup { \"Q\" }\n   \\indexSection #\"R\" \\markup { \"R\" }\n   \\indexSection #\"S\" \\markup { \"S\" }\n   \\indexSection #\"T\" \\markup { \"T\" }\n   \\indexSection #\"U\" \\markup { \"U\" }\n   \\indexSection #\"V\" \\markup { \"V\" }\n   \\indexSection #\"W\" \\markup { \"W\" }\n   \\indexSection #\"X\" \\markup { \"X\" }\n   \\indexSection #\"Y\" \\markup { \"Y\" }\n   \\indexSection #\"Z\" \\markup { \"Z\" }\n   \\markuplist {\n    \\index-in-columns-with-title #'alphabetical \\column {\n      \\title-to-pdf-toc \"Inhaltsverzeichnis\"\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Inhaltsverzeichnis\" \\null }\n      \\vspace #.5\n      \\justify {\n        Da die allermeisten Lieder unter verschiedenen Namen bekannt sind,\n        wollen wir euch ein Inhaltsverzeichnis an die Hand geben, mit dem ihr hoffentlich auf verschiedene Arten fündig werdet.\n        Die Liedtitel, die auch die Überschriften sind, findet ihr normal gedruckt.\n        Alle weiteren Alternativtitel oder Liedanfänge sind zur Unterscheidung kursiv gedruckt.\n      }\n      \\vspace #1\n    }\n    \\write-toc-csv\n  }\n}\nMit diesem Code kannst du ein Inhaltsverzeichnis erstellen. Der erste Teil (mit dem Alphabet) erstellt jeweils „Index-Sections“, also ein Abschnitt für jeden Buchstaben. Wenn ein Buchstabe in deinem Liederbuch nicht vorkommt, kannst du ihn auskommentieren, damit er nicht ausgedrückt wird. Anschließend kannst du, wie schon in Kapitel 4.6 erwähnt, die Überschrift anpassen. Auch der ausgedrückte Text darunter ist natürlich anpassbar.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "lilypond_einrichten.html",
    "href": "lilypond_einrichten.html",
    "title": "Einrichtung von LilyPond",
    "section": "",
    "text": "LilyPond ist die Software, die wir zum Noten setzen benutzen. Als erstes müssen wir LilyPond bei dir installieren.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von LilyPond"
    ]
  },
  {
    "objectID": "lilypond_einrichten.html#lilypond-installieren",
    "href": "lilypond_einrichten.html#lilypond-installieren",
    "title": "Einrichtung von LilyPond",
    "section": "LilyPond installieren",
    "text": "LilyPond installieren\n\nGehe auf https://lilypond.org/ und wähle unter Downloads die neueste LilyPond-Version. Grundsätzlich ist immer die stabile Version zu bevorzugen (alle geraden Zahlen, z.B. 2.24). Unser System funktioniert aber (unter Windows) erst ab der Version 2.25.24, das ist eine Entwicklerversion (zu erkennen an der ungeraden 25).\nNun sollte der Download starten. Gehe in den Ordner und entpacke den Download. Herauskommen sollte ein Ordner namens lilypond-*, wobei * die Versionsnummer darstellt.\nFertig. Allerdings solltest du den Ordner an einen Ort legen, an dem er nicht verschoben wird. Zu empfehlen ist\n\nunter Windows: Ins Verzeichnis C und dann in den Ordner Programme (x86). Dort sind auch andere Programmordner, deswegen ergibt das dort Sinn.\nunter Linux: Zum Beispiel ins Verzeichnis home.\n\n\nJetzt hast du LilyPond installiert. Damit es jetzt auch Spaß macht, mit LilyPond zu arbeiten, benötigst du noch Frescobaldi.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von LilyPond"
    ]
  },
  {
    "objectID": "liedlayout.html",
    "href": "liedlayout.html",
    "title": "Liedlayout",
    "section": "",
    "text": "Jetzt hast du das Lied gesetzt und in den Liederpool eingebracht. Wie toll! Das ist der wichtigste Schritt, weil er der grundlegendste ist. Alle, die Zugriff auf den Liederpool haben, können das Lied jetzt auch verwenden.\nDer nächste Schritt ist, das Lied für dein spezifisches Liederbuch zu layouten. Ich kann dich schonmal beruhigen: Das geht viel leichter als das Setzen in den Liederpool, sogar richtig schnell. Und das ist auch der große Vorteil von unserem System. Die Lieder, die schon im Pool sind, machen deutlich weniger Arbeit – du profitierst also sehr von der Arbeit anderer. Aber genug der langen Vorrede. Los geht’s!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#layout-datei-erstellen",
    "href": "liedlayout.html#layout-datei-erstellen",
    "title": "Liedlayout",
    "section": "Layout-Datei erstellen",
    "text": "Layout-Datei erstellen\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nWenn du ein Repository mithilfe unseres Vorlagenrepos erstellt hast, findest du im Ordner lieder einen Ordner 00_vorlage_light. In diesem Ordner öffnest du die Datei vorlage_light.ly. Als erstes solltest du die Datei neu abspeichern. Dazu drücke einfach Strg + Umschalt + S oder alternativ im Menü Datei -&gt; Save -&gt; Speichern unter. Gehe dann in den Ordner lieder deines Repositories und lege einen neuen Ordner an. Benenne ihn am besten nach demselben Schema wie im Liederpool, in unserem Falle also ueber_meiner_heimat_fruehling. Gehe in den Ordner und speichere die Datei unter demselben Namen dort ab. Fertig.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#auf-die-inhaltsdatei-referenzieren",
    "href": "liedlayout.html#auf-die-inhaltsdatei-referenzieren",
    "title": "Liedlayout",
    "section": "Auf die Inhaltsdatei referenzieren",
    "text": "Auf die Inhaltsdatei referenzieren\nNun ist der erste Schritt, auf die Inhaltsdatei zu referenzieren, die wir eben im Liederpool erstellt haben. Dazu vervollständigst du den Pfad: \\include \"../../lilypond-song-includes/liedbausteine/\". Tippe dazu einfach nur den Beginn des Dateinamen (also des Liedtitels nach dem bekannten Schema) ein. Unter den dann erscheinenden Optionen kannst du dir bereits das passende Lied auswählen.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#layouten",
    "href": "liedlayout.html#layouten",
    "title": "Liedlayout",
    "section": "Layouten",
    "text": "Layouten\nJetzt geht’s ans Layout. Dazu kopierst du dir alles ab dem MUSIC-Teil aus der Inhaltsdatei in die Layoutdatei rüber. Das sieht bei uns dann am Ende so aus:\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\secondVerse }\n        \\addlyrics { \\thirdVerse }\n        \\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nJetzt kannst du schon einmal kompilieren und schauen, wie es aussieht. Der letzte Schritt ist nun der Feinschliff. Du kannst dich nun entscheiden: Möchtest du den Text direkt unter den Noten oder als Strophen mit Akkorden unterm gesamten Notensatz. Alles, was du nicht willst, kommentierst du einfach aus. Wenn du also nur die erste Strophe unter den Noten haben möchtest und den Rest unter dem Satz, sähe das so aus:\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        %\\addlyrics { \\secondVerse }\n        %\\addlyrics { \\thirdVerse }\n        %\\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    %\\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nJetzt kannst du kompilieren und schauen, ob es dir schon gefällt. Wenn du wölltest, könntest du auch noch die verse-breaks nach Belieben anpassen. Wie das geht, weißt du ja schon.\nUnd fertig ist dein erstes Liederbuch-Lied!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedsatz_standards.html",
    "href": "liedsatz_standards.html",
    "title": "Standards beim Liedersetzen",
    "section": "",
    "text": "Hier werden Entscheidungen dokumentiert, die mit dem Liedersetzen in Zusammenhang stehen. Die Sortierung erfolgt innerhalb der Teilbereiche alphabetisch.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#benennung",
    "href": "liedsatz_standards.html#benennung",
    "title": "Standards beim Liedersetzen",
    "section": "Benennung",
    "text": "Benennung\nDie Dateinamen-Benennung folgt dem Prinzip: lied_anfang_(lied_name). Bitte beachte unbedingt die Kleinschreibung!!!\nEin Beispiel aus der Praxis: hast_du_den_staubigen_(der_meilenorden)",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#apostrophe",
    "href": "liedsatz_standards.html#apostrophe",
    "title": "Standards beim Liedersetzen",
    "section": "Apostrophe",
    "text": "Apostrophe\nWir halten uns bei Apostrophen grundsätzlich an den Duden: https://www.duden.de/sprachwissen/rechtschreibregeln/apostroph#D13\nDas bedeutet: Wir setzen Apostrophe nur, wenn es wirklich nötig ist (= die Lesbarkeit fördert). Das stellt die Lesbarkeit in den Mittelpunkt und bedeutet eine einheitliche Linie, an die man sich gut halten kann.\nBeispiele fürs Setzen:\n\n(vgl. D13) Schlaf nun selig und süß, schau im Traum ’s Paradies.\nzusamm’n, richt’ge\nOb der Onkel, der ihn fährt vielleicht ’ne Tante ist, …\n\nBeispiele fürs Nicht-Setzen (jeweils kursiv):\n\nIch wär gern bei den Soldaten, schösse man da mit Tomaten. (vgl. D13 2)\nAls wir endlich groß genug warn, nahmen wir unsre Schuh. (vgl. D13 1;1;3)\nHaben wir den goldnen Daumen längst verlorn? (D13 1;1)\nAuf den Leitplanken stehen die Geschichten drauf. (D14 2)\nDa flog sie, oh Pardon, auf dem Besenstiel davon, gradeaus übers Haus, dreimal rum und hoch hinaus. (D13 1; D14 1;2)\nBis dass die ganze Nachbarschaft Aufhörn schrie. (D13 2)\nWir haben dich schon aus der Ferne gesehn. (D13 2)\nEines Nachts geschiehts im trüben Lampenlicht (D14 4)",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#rechtschreibung",
    "href": "liedsatz_standards.html#rechtschreibung",
    "title": "Standards beim Liedersetzen",
    "section": "Rechtschreibung",
    "text": "Rechtschreibung\nGrundsätzlich setzen wir immer nach neuer deutscher Rechtschreibung. Es gibt aber auch (sehr wenige) Ausnahmen (siehe Büdel S. 327).\nDer Leitspruch lautet: Bei inhaltlichen Aspekten setzen wir möglichst genau (zum Beispiel Zeichensetzung), bei Aspekten, die keine inhaltlichen Auswirkungen haben (Rechtschreibung, Apostrophen), setzen wir nach einheitlichen und aktuellen Standards.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#textveränderungen-zum-original",
    "href": "liedsatz_standards.html#textveränderungen-zum-original",
    "title": "Standards beim Liedersetzen",
    "section": "Textveränderungen zum Original",
    "text": "Textveränderungen zum Original\nJe nach Ausmaß sollen Textveränderungen über Tags optional auswählbar sein (wenn es sich z.B. um einzelne Wörter handelt) bzw. in eine neue Variable geschrieben werden (wenn zum Beispiel ein Großteil oder der gesamte Text verschieden ist).",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#title-case-bei-englischsprachigen-liedern",
    "href": "liedsatz_standards.html#title-case-bei-englischsprachigen-liedern",
    "title": "Standards beim Liedersetzen",
    "section": "Title Case bei englischsprachigen Liedern",
    "text": "Title Case bei englischsprachigen Liedern\nWir nutzen den APA Style. Siehe Wikipedia.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#typografisch-korrekte-zeichen",
    "href": "liedsatz_standards.html#typografisch-korrekte-zeichen",
    "title": "Standards beim Liedersetzen",
    "section": "Typografisch korrekte Zeichen",
    "text": "Typografisch korrekte Zeichen\nUns ist die typografisch korrekte Zeichensetzung wichtig. Ein Apostroph sieht beispielsweise so aus ’ und nicht so '.\nGedankenstriche und „Bis-Striche“ sind Halbgeviertstriche –, keine -.\nAnführungszeichen sehen so „ und so “ aus, nicht so \".",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#balken",
    "href": "liedsatz_standards.html#balken",
    "title": "Standards beim Liedersetzen",
    "section": "Balken",
    "text": "Balken\nBei der Balkensetzung achten wir möglichst darauf, keine manuelle Balkensetzung zu machen, da sonst die Flexibilität verloren geht. Grundsätzlich kann man LilyPond sagen, in welchen Taktarten welche Balken wie zusammengefasst werden oder nicht.\nUnter einem Balken wird beispielsweise zusammengefasst, was auf einen Grundschlag kommt. Das kann, wie gesagt, LilyPond global gesagt bekommen. Deswegen setzen wir im Liederpool nicht so, wie im Beispiel für 4/4-Takt:\n\\relative c' {\n  \\time 4/4\n  e8 [e8] e8 [e8] e16 [e16 e16 e16] e8 [e16 e16]\n}\nAusgabe:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#harmoniestimmen",
    "href": "liedsatz_standards.html#harmoniestimmen",
    "title": "Standards beim Liedersetzen",
    "section": "Harmoniestimmen",
    "text": "Harmoniestimmen\nHarmoniestimmen (2./3./4. Stimmen) schreiben wir grundsätzlich in eigene Variablen (firstVoice, secondVoice etc.), damit Liederbuch-Teams sich entscheiden können, ob sie sie nutzen wollen oder nicht.\nWenn es nur eine Harmoniestimme, also eine zweite Stimme gibt, dann kann dafür im MUSIC-Teil der Befehl \\secondVoiceStyle genutzt werden. Die Standarddarstellung dafür ist, dass die Noten der zweiten Stimme grau werden. Das kann aber liederbuchspezifisch angepasst werden oder der Befehl einfach in der Layout-Datei entfernt werden.\n\nBeispiel Im Burgenland:\nMUSIC = {\n  \\new Staff \n  &lt;&lt;\n    \\new Voice = \"firstVoice\" { \\global \\voiceTwo \\firstVoice }\n    \\addlyrics { \\firstVerse }\n    \\new Voice = \"secondVoice\" { \\global \\voiceOne \\secondVoiceStyle \\secondVoice }\n  &gt;&gt;\n}\n\nAusgabe:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#optionale-akkorde",
    "href": "liedsatz_standards.html#optionale-akkorde",
    "title": "Standards beim Liedersetzen",
    "section": "Optionale Akkorde",
    "text": "Optionale Akkorde\nOptionale Akkorde sollen getaggt werden, damit sie ausgeschaltet werden können.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#ganztaktpausen",
    "href": "liedsatz_standards.html#ganztaktpausen",
    "title": "Standards beim Liedersetzen",
    "section": "Ganztaktpausen",
    "text": "Ganztaktpausen\nWenn ein Takt vollständig pausiert wird, sollten Ganztaktpausen genutzt werden (Lilypond-Befehl: R), die sind genau dafür da. Der Unterschied zu normalen Pausen besteht darin dass sie in der Taktmitte zentriert werde und immer aussehen wie ganze Pausen (außer in bestimmten Takten). Siehe auch https://www.mu-sig.de/Theorie/Notation/Notation07.htm Ausnahme: Wenn erkenntlich gemacht werden muss, wann Akkordwechsel erfolgen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#rhythmusorientierte-taktaufteilung",
    "href": "liedsatz_standards.html#rhythmusorientierte-taktaufteilung",
    "title": "Standards beim Liedersetzen",
    "section": "Rhythmusorientierte Taktaufteilung",
    "text": "Rhythmusorientierte Taktaufteilung\nDie Hauptzählzeiten des Taktes sollten immer erkennbar sein.\n\n4/4-Takt: 1 und 3\n3/4-Takt: 1\n2/2-Takt: 1\n6/8-Takt: 1 und 4\n6/4-Takt: 1 und 4\nzusammengesetzte Taktarten entsprechend der Zusammensetzungen (siehe unten)\n\n\nBeispiel:\n\\relative c' {\n  \\time 6/8\n  a4.~ 8 cis e |\n  a4 a8~ 8 cis4\n\n  % aber:\n  \\time 3/4\n  a2 cis8 e |\n  a4 a cis\n}\n\nAusgabe:\n\nTakte, die zusammengesetzte Rhythmen haben, notieren wir auch so – sie können aber in den einzelnen Liederbüchern über das Überschreiben der global-Variable auch in einfachen Takten wie 4/4-Takten notiert werden. Unter diesem Link finden sich die Infos dazu in der Doku.\n\nBeispiel Nordwind:\n\\relative c' {\n  \\compoundMeter #'((3 3 8) (2 8))\n  \\partial4\n  e8 fis |\n  g4. g g4 |\n  fis4. e fis4 |\n  g2. g4 |\n}\n\nAusgabe:\n\nWeitere Informationen: https://www.theorie-musik.de/grundlagen/taktarten/",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#takte",
    "href": "liedsatz_standards.html#takte",
    "title": "Standards beim Liedersetzen",
    "section": "Takte",
    "text": "Takte\nIn LilyPond gibt es eine Taktüberprüfung mittels der Pipe (|), die genutzt werden kann, aber nicht muss. Darüber hinaus setzen wir Takte immer in eine neue Zeile, das heißt, in jede Zeile kommt immer ein Takt. Das hat den Hintergrund, dass man die Änderungen im Diff in Git besser nachverfolgen kann. Beispiel:\n\\relative c' {\n  \\time 3/4\n  a2 r4\n  a a a\n  \\time 6/8\n  a8 a a r4.\n  r r\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#wiederholungen",
    "href": "liedsatz_standards.html#wiederholungen",
    "title": "Standards beim Liedersetzen",
    "section": "Wiederholungen",
    "text": "Wiederholungen\nWenn möglich und sinnvoll, wählen wir eine einfache Notation, auch wenn die musikalisch nicht immer korrekt ist. Das bedeutet, die Wiederholung findet unter Umständen mitten im Takt statt und die Lyrics der Wiederholung stehen ebenfalls unterm Auftakt (siehe Beispiel). Das soll weniger musikalisch Gebildeten das Lesen erleichtern.\nWichtig ist uns, dass der Takt am Ende voll ist (also letzter Takt + Auftakt ergibt einen ganzen Takt) und dass die Noten nicht mit einem Takt, der nur eine Pause enthält, enden (nach solchen In-Takt-Wiederholungen).\nWenn Zwischenspiele und andere musikalisch anspruchsvollere Dinge hinzukommen und generell immer bei Instrumentalnotation, wollen wir musikalisch möglichst korrekt notieren, um Verwirrungen bei Instrumentalist*innen zu vermeiden..\nVerschiedene Varianten zu supporten, ist leider schwierig und erhöht die Komplexität.\n\nBeispiel Ade zur guten Nacht:\nfirstVerse = \\lyricmode {\n  Ich stünd da am He -- cken -- zaun\n  nur um nach dir aus -- zu -- schaun\n  und um dich zu wer -- ben.\n}\n\nfirstVoice = \\relative c'' {\n  \\partial2\n  r4\n  \\repeat volta 2 {\n    a4\n    fis2 a4 d\n    h h8 (a) g4 g\n    e2 g4 h\n    a a8 (g) fis4 a\n    a g8 fis g4 (a)\n    fis2 r4\n  }\n}\n\nAusgabe:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "liedsatz_standards.html#kanoneinsätze",
    "href": "liedsatz_standards.html#kanoneinsätze",
    "title": "Standards beim Liedersetzen",
    "section": "Kanoneinsätze",
    "text": "Kanoneinsätze\nKanoneinsätze sollen wie hier beschrieben kursiv und mit römischen Ziffern markiert werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Standards beim Liedersetzen"
    ]
  },
  {
    "objectID": "lifehacks.html",
    "href": "lifehacks.html",
    "title": "Nützliche Lifehacks",
    "section": "",
    "text": "Du kannst die Silben eines Textes automatisiert trennen: Text auswählen und unter Werkzeuge/Musical Transformations/Liedtext/Trennungsstriche in Text einführen oder einfach Strg + L. Achtung! Die Funktion funktioniert leider nicht absolut fehlerfrei, deswegen definitiv nochmal Korrektur drüber lesen.\nDu kannst Noten ganz einfach transponieren, was in diesem Falle meint, dass sich der tatsächliche Code verändert: entsprechenden Code auswählen unter Werkzeuge/Musical Transformations/Tonhöhen/Transponieren. Dazu wichtig: Abschnitt auswählen und im Dokument vorher temporär \\language \"deutsch\" aufrufen.\nAuch Notenlängen Halbieren oder Verdoppeln geht sehr einfach: entsprechenden Code auswählen Werkzeuge/Musical Transformations/Rythmus/ und dann auf Notenlänge verdoppeln bzw. Notenlänge halbieren.\nEbenfalls kann eine bestimmte rhythmische Form übernommen werden: Werkzeuge/Musical Transformations/Rhythmus/.\nLange Zeilen können im Editor standardmäßig umgebrochen werden: Unter Bearbeiten/Einstellungen/Editor-Einstellungen/Einstellungen zur Ansicht -&gt; Haken setzen.\nZahlreiche LilyPond-Codeschnipsel gibt es unter Schnipsel. Das wollen wir künftig noch mehr ausbauen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Nützliche Lifehacks"
    ]
  },
  {
    "objectID": "lifehacks.html#frescobaldi-lifehacks",
    "href": "lifehacks.html#frescobaldi-lifehacks",
    "title": "Nützliche Lifehacks",
    "section": "",
    "text": "Du kannst die Silben eines Textes automatisiert trennen: Text auswählen und unter Werkzeuge/Musical Transformations/Liedtext/Trennungsstriche in Text einführen oder einfach Strg + L. Achtung! Die Funktion funktioniert leider nicht absolut fehlerfrei, deswegen definitiv nochmal Korrektur drüber lesen.\nDu kannst Noten ganz einfach transponieren, was in diesem Falle meint, dass sich der tatsächliche Code verändert: entsprechenden Code auswählen unter Werkzeuge/Musical Transformations/Tonhöhen/Transponieren. Dazu wichtig: Abschnitt auswählen und im Dokument vorher temporär \\language \"deutsch\" aufrufen.\nAuch Notenlängen Halbieren oder Verdoppeln geht sehr einfach: entsprechenden Code auswählen Werkzeuge/Musical Transformations/Rythmus/ und dann auf Notenlänge verdoppeln bzw. Notenlänge halbieren.\nEbenfalls kann eine bestimmte rhythmische Form übernommen werden: Werkzeuge/Musical Transformations/Rhythmus/.\nLange Zeilen können im Editor standardmäßig umgebrochen werden: Unter Bearbeiten/Einstellungen/Editor-Einstellungen/Einstellungen zur Ansicht -&gt; Haken setzen.\nZahlreiche LilyPond-Codeschnipsel gibt es unter Schnipsel. Das wollen wir künftig noch mehr ausbauen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Nützliche Lifehacks"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html",
    "href": "musikalischer_inhalt.html",
    "title": "Musikalischer Inhalt",
    "section": "",
    "text": "In diesem Abschnitt der Doku zeigen wir Lösungen für Probleme oder Herausforderungen, die sich aus der Arbeit mit unserem System ergeben. Vieles davon wurde von tux entwickelt und befindet sich in den lilypond-common-includes, bei manchen Themen verweisen wir auch einfach nur auf die LilyPond-Doku. Dieser Teil ist fokussiert auf Fragen bezüglich der Notation und dem Liedtext.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#wiederholungen-in-den-strophen",
    "href": "musikalischer_inhalt.html#wiederholungen-in-den-strophen",
    "title": "Musikalischer Inhalt",
    "section": "Wiederholungen in den Strophen",
    "text": "Wiederholungen in den Strophen\nProblem: Wiederholungszeichen (𝄆 und 𝄇 ) im Text sollen nur in den Strophen, nicht aber unter den Noten stehen. Trotzdem wollen wir denselben Text für beides verwenden.\nLösung: Vor den wiederholten Teil im Text \\repStartWithTag und vor der letzten Silbe (nach den -- !) \\repStophWithTag.\nZur Erklärung: Es handelt sich faktisch um eine Stanza, die aber immer vor Silben gesetzt werden muss (sie kann aber auch rechts von Silben ausgerichtet werden). Diese Stanza wird nur bei einem bestimmten Tag ausgegeben, der repeats heißt. Mehr zu Tags findest du in der Lilypond-Doku. Standardmäßig wird der Tag ausgegeben, soll das nicht der Fall sein (wie zum Beispiel unter den Noten), muss innerhalb des MUSIC-Teils der Befehl \\removeWithTag #'repeats inkludiert werden.\nCodebeispiel (aus: Ade zur guten Nacht):\nthirdVerse = \\lyricmode {\n  %…\n  \\repStartWithTag\n  Wie man -- chen _ Glo -- cken -- schlag,\n  da Herz bei _ Her -- zen lag,\n  das hast du ver -- ges -- \\repStopWithTag sen.\n}\n\n%…\n\nMUSIC = {\n  \\removeWithTag #'repeats\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\secondVerse }\n        \\addlyrics { \\thirdVerse }\n        \\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\n\nIn den Strophen sieht das dann zum Beispiel so aus:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#melismata-mehrere-noten-zu-einer-silbe",
    "href": "musikalischer_inhalt.html#melismata-mehrere-noten-zu-einer-silbe",
    "title": "Musikalischer Inhalt",
    "section": "Melismata (mehrere Noten zu einer Silbe)",
    "text": "Melismata (mehrere Noten zu einer Silbe)\nProblem: In manchen Strophen gibt es an einer Stelle ein Melisma und in der nächsten Strophe an derselben Stelle nicht. Dadurch verschiebt sich der Text.\nLösung: Nutzen von \\set ignoreMelismata = ##t nach Bedarf. Siehe dazu auch in der LilyPond-Doku.\nCodebeispiel:\n%firstVerse mit Melismata:\nfirstVerse = \\lyricmode {\n  #(stanza 1)\n  A -- de zur gu -- ten Nacht!\n  Jetzt wird der Schluss ge -- macht,\n  dass ich muss schei -- den.\n  \\repStartWithTag\n  Im Som -- mer, da wächst der Klee, im Win -- ter da schneit’s den Schnee,\n  da kom -- me ich wie -- \\repStopWithTag der.\n}\n\n%secondVerse ohne Melismata\nsecondVerse = \\lyricmode {\n  #(stanza 2)\n  Es trau -- ern Berg und Tal,\n  wo ich viel tau -- send -- mal\n  bin drü -- ber gan -- gen.\n  \\set ignoreMelismata = ##t %ab hier werden Melismata ignoriert\n  \\repStartWithTag\n  Das hat dei -- ne Schön -- heit ge -- macht,\n  die hat mich zum Lie -- ben ge -- bracht\n  \\unset ignoreMelismata %und hier wieder nicht mehr\n  mit gro -- ßem Ver -- lan -- \\repStopWithTag gen.\n}\n\n\nSo sieht dann der Output der ersten beiden Verse aus:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#mehrere-silben-zu-einer-note",
    "href": "musikalischer_inhalt.html#mehrere-silben-zu-einer-note",
    "title": "Musikalischer Inhalt",
    "section": "Mehrere Silben zu einer Note",
    "text": "Mehrere Silben zu einer Note\nSiehe Lilypond-Doku.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#silbentrennung-bei-volta-klammern",
    "href": "musikalischer_inhalt.html#silbentrennung-bei-volta-klammern",
    "title": "Musikalischer Inhalt",
    "section": "Silbentrennung bei Volta-Klammern",
    "text": "Silbentrennung bei Volta-Klammern\nProblem: Es kommt vor, dass in Liedern die Melodie der Strophe wiederholt wird. Wenn man dabei eine Wiederholung mit Volta-Klammern notiert und ein Wort in die Wiederholung „hineinragt“, dann skipt man die folgenden Notenwerte, was aber dazu führt, dass unter der gesamten Klammer eins Lyric-Hyphens (Bindestriche zwischen den Silben) gesetzt werden.\nLösung: Mit \\once \\hide \\LyricHyphen werden alle Hyphens der nächsten Silbe unterdrückt. Stattdessen wird mit \\rightHyphen bzw. \\leftHyphen ein manueller Hyphen gesetzt (die Funktion ist in den common-includes definiert). Die \\skip4-Befehle werden ggf. über eine dafür gesetzte Variable definiert (im unteren Beispiel voltaSkipsLyrics). Da die Hyphens im Text (also den „Strophen“) nicht zu sehen sein sollen, werden sie mittels eines Tags gesetzt, der volta heißt. Mehr zu Tags in der Lilypond-Doku.\nCodebeispiel:\nvoltaSkipsLyrics = \\lyricmode {\n  \\repeat unfold 10 { \\skip4 }\n}\n\nfirstVerseB = \\lyricmode {\n  Hab es selbst so ge -- wählt, nie die Jah -- re \\tag #'volta { \\once \\hide LyricHyphen \\rightHyphen } ge -- \\tag #'volta { \\voltaSkipsLyrics \\leftHyphen } zählt,\n  nie nach ges -- tern und mor -- gen ge -- fragt.\n}\n\n\n\nAbbildung 1: Links das Problem, rechts die Lösung.\n\n\n\n\n\n\nSo soll das nicht aussehen.\n\n\n\n\n\n\n\nSo sieht das ganze dann „schön“ aus:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#umgang-mit-wiederholungen-bei-gleichbleibendem-text",
    "href": "musikalischer_inhalt.html#umgang-mit-wiederholungen-bei-gleichbleibendem-text",
    "title": "Musikalischer Inhalt",
    "section": "Umgang mit Wiederholungen bei gleichbleibendem Text",
    "text": "Umgang mit Wiederholungen bei gleichbleibendem Text\nProblem: Gibt es Volta-Klammern bei Liedern, in denen der Text des wiederholten Teils gleich ist, zum Beispiel, weil es nach der Klammer anders weitergeht, kommt es vor, dass man in die Lyrics zum Beispiel schreiben müsste: Und je -- der Kerl, der mit uns war, hat für im -- mer sich zu uns ge -- sellt. Und sellt.. Das ist natürlich unpraktisch für die Übernahme in die Strophen, weil man das sellt. Und ja nicht in den Strophen haben möchte.\nLösung: Auch hier kommen wieder Tags zum Einsatz und zwar wie folgt. Es wird ein neuer Tag repeat definiert, der alles in einschließt, was für die Volta-Wiederholungen notwendig ist. Für die Strophen werden dann extra-Variablen definiert, in denen dieser Tag ausgeschaltet wird. Wichtig: Der Tag muss sich natürlich auch in der Melodie und den Akkorden wiederfinden.\nCodebeispiel:\nfirstVerseWithRepeat = \\lyricmode {\n  #(stanza 1)\n  Wir sind ei -- ne klei -- ne ver -- lo -- re -- ne Schar,\n  wir ste -- hen für uns auf der Welt.\n  \\repStartWithTag Und je -- der Kerl, der mit uns war,\n  hat für im -- mer sich zu uns ge -- \\tag #'repeat { sellt. Und } \\repStopWithTag sellt.\n}\n\nfirstVerse = \\lyricmode {\n  \\removeWithTag #'repeat \\firstVerseWithRepeat\n}\n\nfirstVoice = \\relative c' {\n  \\partial4\n  fis4\n  g8 e4 fis8 g e4 g8\n  fis g4 fis8 e4 d4\n  g8 g4 g8 a d4 c8\n  h2. h4\n  \\repeat volta 2 {\n    c4 c c c\n    h8 h4 (a8) g4 g8 a\n    h8 h4 h8 a h4 a8\n  }\n  \\alternative {\n    % Tag bedenken\n    \\tag #'repeat { g2. h4 }\n    { g1 }\n  }\n}\n\nverseChords = \\chordmode {\n  \\partial4\n  s4 e1:m h2:7 e4:m d:7\n  g2 d:7 g1\n  \\repeat volta 2 {\n    c1 g g2 d:7\n  }Bock\n  \\alternative {\n    %Tag bedenken\n    \\tag #'repeat { g1 }\n    { g1 }\n  }\n}\n\n% im MUSIC-Teil wird der Tag dann wieder aktiviert\nMUSIC = {\n  \\keepWithTag #'repeat\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerseWithRepeat }\n        \\addlyrics { \\secondVerseWithRepeat }\n        \\addlyrics { \\thirdVerseWithRepeat }\n      &gt;&gt;\n  &gt;&gt;\n}\n\n% Für die Strophen wollen wir keine Volta-Wiederholung\nverse-chords = \\chords { \\removeWithTag #'repeat \\verseChords }",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#umgang-mit-wiederholungen-bei-neuem-text",
    "href": "musikalischer_inhalt.html#umgang-mit-wiederholungen-bei-neuem-text",
    "title": "Musikalischer Inhalt",
    "section": "Umgang mit Wiederholungen bei „neuem“ Text",
    "text": "Umgang mit Wiederholungen bei „neuem“ Text\nProblem: Volta-Klammern (Wiederholungsklammern), bei denen nicht derselbe Text wiederholt wird, sollten in den Strophen aufgelöst werden, damit der Text hintereinander (und nicht wie in den Noten untereinander) steht.\nLösung: Dafür nutzen wir den Befehl \\unfoldRepeats, der in den verse-chords und verse-voice gesetzt werden muss und dann per \\override auf die Strophen angewendet werden kann (Achtung: \\override gilt immer nur für das folgende Element, zum Beispiel ein Vers oder ein \\group-verses-Ausdruck). Außerdem müssen die Verse aufgeteilt werden in verschiedene Teile.\nCodebeispiel:\nfirstVerseA = \\lyricmode {\n  #(stanza 1)\n  Er -- ste Wie -- der -- ho -- lung,\n}\n\nfirstVerseB = \\lyricmode {\n  zwei -- te Wie -- der -- ho -- lung.\n}\n\nfirstVerseC = \\lyricmode {\n  Wei -- ter geht’s\n}\n\nfirstVerse = { \\firstVerseA \\firstVerseB \\firsVerseC }\n\nverse-chords = \\chords { \\unfoldRepeats \\verseChords }\nverse-voice = { \\unfoldRepeats \\firstVoice }\nverse-breaks = { \n  s4 s2*3 s4 \\break\n  s4 s2*3 s4 \\break\n  s4 s2*3 s4 \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-chords . ,verse-chords)\n  \\override #`(verse-reference-voice . ,verse-voice)\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#strophen-mit-unterschiedlichen-noten--oder-silbenverteilung-oder-rhythmus",
    "href": "musikalischer_inhalt.html#strophen-mit-unterschiedlichen-noten--oder-silbenverteilung-oder-rhythmus",
    "title": "Musikalischer Inhalt",
    "section": "Strophen mit unterschiedlichen Noten- oder Silbenverteilung oder Rhythmus",
    "text": "Strophen mit unterschiedlichen Noten- oder Silbenverteilung oder Rhythmus\nProblem:\n\nGerade bei neueren Liedern kommt es häufig vor, dass sie unterschiedliche Rhythmen (zum Beispiel Auftakte) in den Strophen haben. Da der Text an Noten ausgerichtet wird, kommt es somit zu einem Problem, wenn in der 1. Strophe beispielsweise kein Auftakt vorhanden ist, in der 2. Strophe jedoch schon, kann der Versanfang der 2. Strophe nicht an Noten ausgerichtet werden, da diese in der Melodie (der 1. Strophe) gar nicht vorkommen.\nDas Notenbild / der Notensatz der 1. Strophe soll aber nicht unnötig aufgebläht werden durch Auftaktkonstruktionen (und es gibt natürlich auch noch wesentlich komplexere Konflikte), da dadurch die Lesbarkeit erschwert wird und das Notenbild mehr Verwirrung als Klarheit schaffen würde.\n\nLösung:\n\nNutzung von einer Funktion, die Tags nutzt: \\alt (siehe Codebeispiel). Die Idee ist, dass es eine einfache Notation gibt (üblicherweise die der 1. Strophe) und eine komplexere, an der alle Verse ausgerichtet werden können. Die \\alt-Funktion wird im \\relative-Teil wie folgt angewendet: \\alt { A } { B }. A steht für die einfache Notation, B für die komplexe.\nNun gibt es wiederum das Problem, dass der Text in den unterschiedlichen Notationen an unterschiedlichen Stellen geskipt werden muss. Dafür gibt es die Lösung über die Funktion \\multiVerseSkips X. Das X ist dabei zu ersetzen mit der Anzahl der zu skipenden Noten. X muss mindestens den Wert 1 haben.\nIm MUSIC-Teil muss der Tag nun auch angegeben werden. Zum Codebeispiel: Im music-Teil muss nichts angepasst werden, stattdessen kann man nun im MUSIC-Teil angeben, ob man die multiVerse-Ansicht oder die firstVerse-Ansicht angezeigt werden möchte. Das jeweils andere kann auskommentiert werden.\n\nCodebeispiel:\nfirstVerse = \\lyricmode {\n  #(stanza 1)\n  \\multiVerseSkips 4 Komm zu mir, leg dich ins Laub\n  \\\\multiVerseSkips 1 und \\\\multiVerseSkips 1 hör, was die Wur -- zeln er -- zäh -- len.\n  Je -- \\\\multiVerseSkips 1 des \\\\multiVerseSkips 1 Blatt zer -- fällt ein -- mal zu Staub\n  \\\\multiVerseSkips 2 und je -- der Baum wird auch wie -- der zu Er -- de.\n  Doch je -- des En -- de ist ein An -- fang\n  und vol -- ler Kreis -- läu -- fe sind Zeit und Raum.\n  Al -- les ver -- geht, doch nichts geht ver -- lo -- ren,\n  al -- les ist Wirk -- lich -- keit und al -- les ist Traum.\n}\n\n% Verwendung von alt\nfirstVoice = \\relative c' {\n  \\alt {} { \\partial2 a8 a d8 f8 }\n  a4. a8 a4\n  g4 a g\n  e2.\n  \\alt { r2 d4 } { r4 r8 d d d }\n  e4. e8 e4\n  d4 e d\n  c4 a2\n}\n\n% Einbindung in music/MUSIC\nmusic = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\tag #'multiVerse \\secondVerse }\n        \\addlyrics { \\tag #'multiVerse \\thirdVerse }\n        \\addlyrics { \\tag #'multiVerse \\fourthVerse }\n        \\addlyrics { \\tag #'multiVerse \\fifthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\nMUSIC = {\n  \\keepWithTag #'multiVerse\n  %\\keepWithTag #'firstVerse\n  \\music\n}\n\n\n\nAbbildung 2: Das sind die beiden möglichen resultierenden Ansichten.\n\n\n\n\n\n\nDie \\firstVerse-Ansicht:\n\n\n\n\n\n\n\nDie \\multiVerse-Ansicht:",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#zeilenumbrüche-in-den-strophen",
    "href": "musikalischer_inhalt.html#zeilenumbrüche-in-den-strophen",
    "title": "Musikalischer Inhalt",
    "section": "Zeilenumbrüche in den Strophen",
    "text": "Zeilenumbrüche in den Strophen\nSiehe Layout-Teil der Doku.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#leichte-textvariationen",
    "href": "musikalischer_inhalt.html#leichte-textvariationen",
    "title": "Musikalischer Inhalt",
    "section": "(Leichte) Textvariationen",
    "text": "(Leichte) Textvariationen\nProblem: Es gibt teilweise leichte Textvariationen bei einzelnen Wörtern.\nLösung: Auch da helfen uns wieder die Tags (Lilypond-Doku). Je nach Belieben kann dann entweder die eine Variante aktiviert werden oder die andere.\n\nInnerhalb einer Variante\nBeim Regenbogenlied gibt es beispielsweise eine Unterscheidung im Artikel zwischen dem ersten und zweitem Refrain. Die Lösung dafür ist, einfach beides einzubauen und dann das jeweils nicht benötigte auszuschalten. Das hat den Vorteil, dass wir trotzdem dieselbe Textbasis verwenden können.\nCodebeispiel:\nrefLyrics = \\lyricmode {\n  \\ref\n  \\repStartWithTag Ü -- ber uns \\tag #'first { ein } \\tag #'second { der } Re -- gen -- bo -- gen,\n  zeigt uns den Weg in sei -- nem Licht,\n  die Wol -- ken sind schon fort -- ge -- zo -- gen,\n  ver -- weh -- ren uns die Son -- ne \\repStopWithTag nicht.\n}\n\nrefLyricsFirst = \\lyricmode { \\removeWithTag #'second \\refLyrics }\nrefLyricsSecond = \\lyricmode { \\removeWithTag #'first \\refLyrics }\n\n\nVerschiedene Varianten\nAnders verhält es sich, wenn wir ein Lied haben, bei dem es verschiedene Varianten gibt. Mitunter kann es hilfreich sein, einen kürzeren Befehl zu haben, wenn beide Varianten sich an vielen Stellen unterscheiden. Das kann folgendermaßen gelöst werden:\nvariant =\n#(define-music-function (parser location a b) (ly:music? ly:music?) \n  #{ \\tag #'bock { #a } \\tag #'codex { #b } #})\nWenn mehr als zwei Varianten benötigt werden, kann der Befehl problemlos erweitert werden, indem weitere Elemente hinzugefügt werden:\n#(define-music-function (parser location a b c d) (ly:music? ly:music? ly:music? ly:music?)  #{ \\tag #'bock { #a } \\tag #'codex { #b } \\tag #'buedel { #c } \\tag #'boernel { #d } #}).\nDer Tag-Abruf erfolgt dann zum Beispiel so:\nfirstVerse = \\lyricmode {\n  #(stanza 1)\n  Das ist der ers -- te \\variant { Vers } { Verse } { Teil } { Ab -- schnitt }.\n}\nDabei ist die oben definierte Reihenfolge entscheidend! Der jeweils gewünschte Tag muss dann unbedingt im MUSIC-Teil zugewiesen werden. Dabei sollte im MUSIC-Teil ebenfalls erkennbar sein, wie viele und welche Varianten es überhaupt gibt, zum Beispiel durch auskommentierte Alternativvarianten:\nMUSIC = {\n  \\keepWithTag #'bock\n  %\\keepWithTag #'codex\n  %\\keepWithTag #'buedel\n  %\\keepWithTag #'boernel\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n      &gt;&gt;\n  &gt;&gt;\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#swing-style",
    "href": "musikalischer_inhalt.html#swing-style",
    "title": "Musikalischer Inhalt",
    "section": "Swing-Style",
    "text": "Swing-Style\nDen Swing-Style kann man mittels der Funktion \\swingMusic erwirken. Das setzt den folgenden musikalischen Ausdruck im Swing-Style. \\swingMusic kann beispielsweise in die \\melodyVoice gepackt werden (dann geschweifte Klammern nicht vergessen). Die Midi-Ausgabe erfolgt dann sogleich rhythmisch korrekt.\nDer Swing-Style kann mithilfe der Funktion \\swingOff wieder ausgestellt werden. Das ist im unteren Beispiel zwar für die Midi-Ausgabe gar nicht nötig, allerdings printed \\swingOff auch das entsprechende Zeichen, dass kein Swing-Style mehr gespielt werden soll. Andernfalls wüsste man anhand des Liedblattes nicht, dass der Swing-Style aufhört.\nmelodyVoice = {\n  \\global\n  \\swingMusic { \\firstVoice \\interludeVoice }\n  \\swingOff \\refVoice\n  \\bar \"|.\"\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#sec-kanon",
    "href": "musikalischer_inhalt.html#sec-kanon",
    "title": "Musikalischer Inhalt",
    "section": "Markierungen für beispielsweise Kanoneinsätze",
    "text": "Markierungen für beispielsweise Kanoneinsätze\nMarkierungen wie beispielsweise eine römische Ziffer für den Einsatz einer Kanonstimme sollten auf folgendem Wege eingetragen werden (Beispiel für dreistimmigen Kanon):\neins = { \\tag #'einsaetze { \\tweak self-alignment-X #LEFT \\mark \\markup { \\italic \"I.\" } } }\nzwei = { \\tag #'einsaetze { \\tweak self-alignment-X #LEFT \\mark \\markup { \\italic \"II.\" } } }\ndrei = { \\tag #'einsaetze { \\tweak self-alignment-X #LEFT \\mark \\markup { \\italic \"III.\" } } }\nWas passiert da und wo gibt es ggf. etwas anzupassen? Der Variablenname kommt als erstes. Dahinter folgt ein Tag, der hier einsaetze heißt, damit die Markierungen unten in den Strophen ausgeschaltet werden können. Anschließend folgen einige Platzierungsbefehle und dann ein \\markup-Befehl: \\markup { \\italic \"I.\" }. In der Regel sollten Markierungen wie diese immer kursiv geschrieben sein. Bei Kanoneinsätzen sollen römische Ziffern genutzt werden. Die Markierungen können aber natürlich auch in der Layout-Datei überschrieben werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#optionale-akkorde",
    "href": "musikalischer_inhalt.html#optionale-akkorde",
    "title": "Musikalischer Inhalt",
    "section": "Optionale Akkorde",
    "text": "Optionale Akkorde\nOptionale Akkorde können eingeklammert werden anhand der Funktion \\klamm { d4:7 }.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#benutzerdefinierte-akkordnamen",
    "href": "musikalischer_inhalt.html#benutzerdefinierte-akkordnamen",
    "title": "Musikalischer Inhalt",
    "section": "Benutzerdefinierte Akkordnamen",
    "text": "Benutzerdefinierte Akkordnamen\nAkkordzeichen können unter Umständen deutlich komplizierter sein als beispielsweise a:7. Die in den meisten Fällen verwendete Schreibweise für Akkorde wie a a:m a:7 a:sus4 etc. ist nur eine Kurzschreibform. Grundsätzlich ist jeder denkbare Akkord in LilyPond abbildbar, sofern man weiß, wie man ihn abbilden möchte. Die dafür erforderlichen Informationen finden sich in der LilyPond-Doku.\nIn der Datei lilypond-custom-includes/custom_style_overrides.ly können die Akkorde dann benutzerdefiniert und global angepasst werden, zum Beispiel:\ncustomChordPrintings = {\n  &lt;h dis' fis' e''&gt;-\\markup { \\small \"add11\" }\n  &lt;a cis' gis' h'&gt;-\\markup { \\small \"maj9\" }\n}\nDer obige Code macht aus der Eingabe h:1.3.5.11 ein Hadd11. Hilfreich können gegebenenfalls die Markup-Befehle \\small für eine kleinere Schrift und \\super für Hochstellung sein.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#akkordtabulatur",
    "href": "musikalischer_inhalt.html#akkordtabulatur",
    "title": "Musikalischer Inhalt",
    "section": "Akkordtabulatur",
    "text": "Akkordtabulatur\nFür manche speziellen Akkorde ist es nützlich für Gitarrenspieler*innen, eine Tabulatur des Akkords direkt auf der Seite des Liedes zu haben. Das geht so:\nTEXT = \\markuplist {\n  \\fret-chord #\"x;x;o;2;3;2;\" #\"d\"\n}\nIm ersten String bekommt jede Gitarrensaite eine Zuweisung (x für nicht gespielt, o für leer oder Zahl für den Bund), gefolgt von einem Semikolon. Im zweiten String wird die LilyPond-Akkordbezeichnung gefordert. Bei komplizierteren Akkorden hat man dann vermutlich eher etwas wie h:1.3.5.11 (für Hadd11) stehen als d (für D-Dur).",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#römische-ziffern",
    "href": "musikalischer_inhalt.html#römische-ziffern",
    "title": "Musikalischer Inhalt",
    "section": "Römische Ziffern",
    "text": "Römische Ziffern\nSiehe Layout-Doku.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "musikalischer_inhalt.html#balkensetzung",
    "href": "musikalischer_inhalt.html#balkensetzung",
    "title": "Musikalischer Inhalt",
    "section": "Balkensetzung",
    "text": "Balkensetzung\nBei der Balkensetzung sind unbedingt unsere Standards zu beachten. Wie man in LilyPond die Balkensetzung beeinflusst, steht in der LilyPond-Doku.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Musikalischer Inhalt"
    ]
  },
  {
    "objectID": "git_verstehen.html",
    "href": "git_verstehen.html",
    "title": "Was ist eigentlich Git? 2.0",
    "section": "",
    "text": "Git ist ein Versionierungssystem, welches frei als Open-Source-Software zur Verfügung gestellt wird. Git wird für die Versionskontrolle (stetige Protokollierung von Änderungen) von Dateien eingesetzt.\nVor allem im Programmierbereich dient Git dazu, die eigenen Änderungen zu überwachen, sie rückgängig zu machen. Die wesentliche Nutzung findet in sogenannten „Repositories“ (Repos) statt. Das ist quasi ein Ordner, in dem sich Dateien und andere Ordner befinden, quasi eine Art „Arbeitsordner“ oder „Arbeitsverzeichnis“. Dabei gibt es verschiedene Orte, an dem dieser Arbeitsordner liegt.\nDadurch ergeben sich am Repo für Bearbeiter*innen folgende Möglichkeiten:",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Was ist eigentlich Git? 2.0"
    ]
  },
  {
    "objectID": "git_verstehen.html#spielerisch-git-lernen",
    "href": "git_verstehen.html#spielerisch-git-lernen",
    "title": "Was ist eigentlich Git? 2.0",
    "section": "Spielerisch Git lernen",
    "text": "Spielerisch Git lernen\nHier gibt es eine tolle Spielwiese zum Ausprobieren: https://learngitbranching.js.org/. Sinnvoll für uns ist mindestens die Einführung.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Was ist eigentlich Git? 2.0"
    ]
  },
  {
    "objectID": "git_verstehen.html#git-für-liederbücher-nutzen",
    "href": "git_verstehen.html#git-für-liederbücher-nutzen",
    "title": "Was ist eigentlich Git? 2.0",
    "section": "Git für Liederbücher nutzen",
    "text": "Git für Liederbücher nutzen\nWie das geht haben wir dir im Anfangs-Tutorial zusammengestellt.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Was ist eigentlich Git? 2.0"
    ]
  },
  {
    "objectID": "git_verstehen.html#grundbegriffe-im-git-alltag",
    "href": "git_verstehen.html#grundbegriffe-im-git-alltag",
    "title": "Was ist eigentlich Git? 2.0",
    "section": "Grundbegriffe im Git-Alltag",
    "text": "Grundbegriffe im Git-Alltag\nAnmerkungen: alphabetische Sortierung. Als Befehle wurden jeweils die Original-Kommandozeilenbefehle von Git angegeben, mithilfe derer du herausfinden kannst, wie das dann in deiner GUI funktioniert.\n\nBranches\nBeim Einsatz von Git dienen Branches (engl.: to branch – sich verzweigen) dazu, um einen separaten Arbeitszweig zu erstellen. Dieser kann dann auch als neuer Kontext gesehen werden, in dem gearbeitet wird. So kann z.B. die Programmierung eines Sicherheits-Patches in einem eigenen Branch erfolgen (im Kontext des Patches), der bei Fertigstellung und nach dem Testen zurück in den Master-Zweig eingearbeitet wird. Das Wiedereinführen funktioniert bei uns über einen Pull-Request.\nBefehl: git branch NAME\n\n\nCheckout\nDas Wechseln von einem Branch in einen anderen Branch.\nBefehl: git checkout BRANCH\n\n\nCherry-Picking\nCherry-Picking in Git ist ein Befehl, mit dem du einen bestimmten Commit (eine Änderung) aus einem Branch (Zweig) auswählen und in einen anderen Branch übertragen kannst.\nStell dir vor, du hast zwei Zweige: main und feature. Wenn du eine bestimmte Änderung, die du im feature-Zweig gemacht hast, auch im main-Zweig haben möchtest, kannst du den Cherry-Pick-Befehl verwenden. Das funktioniert so:\n\nDu wechselst zum Ziel-Branch (z. B. main).\nDu führst den Befehl git cherry-pick &lt;commit-hash&gt; aus, wobei &lt;commit-hash&gt; die ID des Commits ist, den du übernehmen möchtest.\nIn einer GUI kannst du vermutlich einfach auf den Commit mit Rechtsklick klicken und solltest dann eine Option Cherry-Pick haben.\n\nGit nimmt dann nur diese spezifische Änderung und fügt sie in den aktuellen Branch ein, ohne die anderen Änderungen im feature-Zweig zu übernehmen.\nDas ist nützlich, wenn du nur bestimmte Features oder Bugfixes übernehmen möchtest, ohne alles andere mit zu übernehmen. Für uns ist Cherry-Picking hilfreich, wenn du ein Liederbuch machst, aber nicht alle Pull-Requests der neuen Lieder schon gereviewed wurden. Dann kannst du einen eigenen Branch fürs Liederbuch erstellen und einfach die Commits, die dir fehlen in deinen Liederbuch-Branch cherry-picken.\n\n\nCommit\nEin Commit in einem Git-Repository speichert eine Abbildung aller Dateien in deinem Projektverzeichnis. Es ist wie ein riesiges Kopieren und Einfügen, nur besser.\nAllerdings will Git die Commits so schlank wie möglich halten, also kopiert es nicht einfach stur das ganze Verzeichnis jedes Mal wenn du committest. Es kann (wenn möglich) Commits als Menge von Änderungen zusammenpacken, von einer Version des Repositorys zur nächsten.\nAußerdem führt Git ein Protokoll darüber, welche Commits wann gemacht wurden, und welcher auf welchen folgt. Dieses Protokoll zu haben ist eine tolle Sache für jeden, der an einem Projekt arbeitet. Commits sind sehr ressourcenschonend, und zwischen ihnen wechseln geht superschnell!\nBefehl: git commit\n\n\nFetch\nDer Befehl git fetch importiert Commits von einem Remote-Repository in das lokale Repo. Dabei werden die Commits des Remote-Repos aber nicht ins lokale Repo überführt (wie bei git pull). Fetching ist die geeignete Methode, um einzusehen, woran andere gearbeitet haben. Da auf diese Weise importierte Inhalte von Remote-Branches repräsentiert werden, haben sie absolut keinen Effekt auf die lokale Entwicklungsarbeit.\nAlternative Erklärung: git fetch holt Änderungen aus dem Remote-Repository, aber wendet diese nicht auf den lokalen Code an.\n\n\nForce-Push\nEin Force-Push in Git ist ein Befehl, der es dir ermöglicht, Änderungen an einem Remote-Branch (einem Branch auf einem Server) zu senden, selbst wenn diese Änderungen nicht mit dem aktuellen Stand des Remote-Branches übereinstimmen.\nNormalerweise überprüft Git, ob dein lokaler Branch (dein Arbeitszweig) und der Remote-Branch synchron sind, bevor du Änderungen hochlädst. Wenn sie nicht übereinstimmen, gibt Git eine Fehlermeldung aus, um zu verhindern, dass du möglicherweise wichtige Änderungen überschreibst.\nMit git push --force (oder git push -f) sagst du Git, dass du die aktuellen Änderungen im Remote-Branch überschreiben möchtest, egal was dort steht.\nDas kann nützlich sein, wenn du zum Beispiel:\n\nFehler in einem Commit korrigiert hast und die Historie neu schreiben möchtest.\nCommits zurückgesetzt oder gelöscht hast und die Änderungen trotzdem hochladen möchtest.\n\nAchtung: Force-Push kann gefährlich sein, weil es die Historie des Remote-Branches verändert und möglicherweise die Arbeit anderer Entwickler überschreibt. Daher sollte man es mit Vorsicht verwenden und sicherstellen, dass man weiß, was man tut.\n\n\n\n\n\n\nWarnung\n\n\n\nForce-Pushing nutzen wir beispielsweise, wenn du Fehler in einem Lied korrigierst, das sich im Review-Stadium befindet. Dafür möchten wir nicht mehrere Commits haben. Mach dir dabei bewusst, dass du die Änderungen überschreibst – es sollte also sicher sein, dass durch deine Änderungen nichts wichtiges verloren geht. Wenn du dir nicht sicher bist, ob deine Änderungen auf Zustimmung stoßen, mach einen extra Commit und frag nach. Die Commits können dann in einem zweiten Schritt zusammengeführt werden.\n\n\nBefehl: git push --force\n\n\nHEAD\nHEAD ist ein Alias für den Commit, der gerade ausgecheckt ist – es ist im Prinzip der Commit, an den du deinen nächsten Commit hängst.\nHEAD zeigt immer auf den neuesten Commit. Die meisten Git-Befehle, die den Baum verändern, fangen damit an, dass sie HEAD verschieben.\nNormalerweise zeigt HEAD auf einen Branch-Namen (z.B. bugFix). Wenn du einen Commit machst, wird bugFix auf diesen Commit geschoben, und HEAD (da es auf bugFix zeigt) automatisch auch.\n\n\nMerge\nDie einfachste Methode, mit der man Branches zusammenführen kann, ist git merge. Das Mergen erzeugt in git einen speziellen Commit, der zwei Vorgänger hat. Ein solcher Commit bedeutet im Prinzip “ich möchte alle Arbeit von dem Vorgänger hier und dem dort und allen ihren jeweiligen Vorgängern miteinander kombinieren”.\nBefehl: git merge\n\n\nPull\nMit dem pull-Befehl kann man Änderungen aus einem Remote-Repository holen und mit dem lokalen Repository, also den Dateien, an denen man derzeit arbeitet, synchronisieren.\n\n\nPush\nMit git push können Commits nun von einem lokalen Repository in ein Remote-Repo transferiert werden. Dieser Befehl ist das Gegenstück zu git fetch. Während beim Fetching Commits in lokale Branches importiert werden, exportiert git push Commits in Remote-Branches. Es besteht die Möglichkeit, Änderungen zu überschreiben; entsprechend sorgfältig sollte der Befehl genutzt werden.\n\n\nRepository\nIn ein Repository bzw. einem Repo befinden sich alle Dateien inklusive derer vorangegangenen Versionen. Dadurch stehen stets alle Änderungen zur Verfügung, die von einer Datei ins Repo gespielt wurden und es kann nachvollzogen werden wer, wann, welche Änderungen durchgeführt hat. Das besondere an Git ist, dass jede lokale Working Directory eines Users (ein „Klon“ - via git clone) wieder ein vollständiges, eigenes, lokales Repo darstellt. Es existieren somit mehrere Kopien der Repos, der, der einen Klon besitzt, kann daran arbeiten – inklusive kompletter History, auch offline und ohne Abhängigkeit von einem zentralen Server. Die Änderungen aus dem eigenen Repo / der Working Copy können dann auf einen Ruck oder Schritt für Schritt, wenn sie als public angesehen werden, wieder in das Remote-Repo „gepusht“ werden (git push).\n\n\nRebase\nDer zweite Weg um Inhalte aus verschiedenen Branches zu kombinieren istgit rebase. Rebasen nimmt im Prinzip eine Menge von Commits, „kopiert“ sie und packt sie auf etwas anderes drauf.\nAuch wenn das erst mal komisch klingt, liegt der Vorteil von Rebase darin, dass man es benutzen kann um hübsch lineare Abfolgen von Commits zu erhalten. Das Commit-Protokoll des Repositorys wird durch Rebase eine ganze Ecke einfacher aussehen, weil Merge Commits vermieden werden.\nBefehl: git rebase\n\n\nSubmodul\nDas lilypond-song-includes-Repo wird in der Regel als Submodul genutzt. Das bedeutet, es ist ein eigenes (Remote-)Repository, das in ein anderes (Remote-)Repository eingebunden wird (zum Beispiel dein Liederbuch-Repo).\n\n\nVersionierung\nSobald an einer Working Copy gearbeitet wird protokolliert Git alle getätigten Änderungen mit. Mittels commit können die Änderungen zu dem Repository hinzugefügt werden, eine neue Version der Datei(n) befinden sich dann im Repo. Anschließend können verschiedene Versionen miteinander verglichen, Änderungen rückgängig oder zu einer früheren Version zurückgekehrt werden. Die Log-Informationen, die von Git mit aufgezeichnet werden können mit git log ausgegeben werden, git status listet die noch nicht ins Repo gespielten Änderungen der Working Copy auf.\n\n\nWorking Directory",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Was ist eigentlich Git? 2.0"
    ]
  },
  {
    "objectID": "git_einrichten.html",
    "href": "git_einrichten.html",
    "title": "Einrichtung von Git",
    "section": "",
    "text": "Hier geht es jetzt nur um eine kurze und möglichst unkomplizierte Einrichtung von Git. Du musst gar nicht alles verstehen, was im Hintergrund passiert. Das kann an späterer Stelle irgendwann auch noch kommen.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#sec-tuxgit-account",
    "href": "git_einrichten.html#sec-tuxgit-account",
    "title": "Einrichtung von Git",
    "section": "Account bei tuxgit erstellen lassen",
    "text": "Account bei tuxgit erstellen lassen\nDu brauchst einen Account für unseren Git-Server. Aufgrund von Spam ist die Registrierung nicht öffentlich möglich, deswegen musst du dafür eine E-Mail an tux schreiben. Die Web-Adresse unseres Git-Servers ist: https://git.zahlenlabyrinth.de/.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#eine-git-gui-aussuchen-und-herunterladen",
    "href": "git_einrichten.html#eine-git-gui-aussuchen-und-herunterladen",
    "title": "Einrichtung von Git",
    "section": "Eine Git-GUI aussuchen und herunterladen",
    "text": "Eine Git-GUI aussuchen und herunterladen\nGit ist per se erstmal ein Kommandozeilen-Programm. Das ist nicht für jede*n was – erst recht nicht, wenn man noch nicht so viel mit Coden zu tun hatte. Das ist aber gar nicht schlimm, denn es gibt zahlreiche verschiedene grafische Oberflächen für Git, die das Arbeiten sehr erleichtern können. Verbreitet bei uns sind gerade diese hier:\n\nSmartGit\n\nLink\nfür Windows, MacOS, Linux\nkostet was, es gibt aber eine non-commercial Lizenz für gemeinnützige Organisationen und Bildungseinrichtungen: Apply for Non-Commercial License\nDafür brauchst du eine gemeinnützige Organisation, mit deren E-Mail-Adresse du dich dort registrieren kannst. Alternativ geht auch eine Uni-Mail-Adresse.\n\n\n\nSourceTree\n\nLink\nfür Windows, MacOS\n\n\n\nTortoiseGit\n\nLink\nfür Windows\n\nOder man nutzt es in der Konsole. Dann braucht man die Git Shell: Link.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#einrichten-eines-liederbuch-repos",
    "href": "git_einrichten.html#einrichten-eines-liederbuch-repos",
    "title": "Einrichtung von Git",
    "section": "Einrichten eines Liederbuch-Repos",
    "text": "Einrichten eines Liederbuch-Repos\nDa du Git vermutlich zum ersten Mal nutzt, brauchst du zuerst einen SSH-Key. Der SSH-Key ist dafür da, dass das Remote-Repo weiß, dass dein lokales Repo auch zu dir gehört. Sonst könnte ja jeder, der den SSH-Link hat (siehe dazu Abbildung 1), Zugriff aufs Repo haben. Er ist also ein Identifikationsmittel für deinen Account. Dafür hinterlegst du den public key in deinem Git-Account und sagst deinem Git-Programm (SmartGit, SourceTree, TortoiseGit), wo deine Schlüssel-Datei liegt. Diese Datei ist auch nochmal extra passwortgeschützt. Sie sollte auf keinen Fall gelöscht oder verschoben werden. Die lange Erklärung kannst du hier nachlesen.\n\n\n\nAbbildung 1: Das ist der SSH-Link.\n\n\n\n\n\n\n\nSSH-Key erstellen\nDu musst dir einen SSH-Key erstellen und das Passwort, public key und private key und Schlüsseldatei speichern/aufbewahren. Eine Anleitung dafür findest du hier.\nAnschließend hinterlegst du den public key in deinem Git-Account (unter Einstellungen -&gt; SSH- / GPG-Schlüssel -&gt; Schlüssel hinzufügen).\nSpäter wirst du beim „Klonen“ eines Liederbuchs irgendwann nach deiner Schlüsseldatei gefragt (für die du dann auch das Passwort brauchst). Es ist also wichtig, dass du beides gut speicherst!\nKlingt alles sehr kompliziert und das ist es auch, aber: Du musst das nur einmal machen und dann funktioniert es einfach. Wenigstens etwas.\n\n\nEin neues Liederbuch-Repo mit dem Vorlagen-Repo erstellen\nDa du ja ganz neu einsteigst, hast du vermutlich noch kein eigenes Liederbuch-Repo. Deswegen erstellen wir erstmal eins. Das tolle ist: Wir haben zu genau diesem Zweck ein Vorlagen-Repo gebaut, mit dem du sofort die meisten wichtigen Sachen eingerichtet hast. Wichtig: Du brauchst vorher einen Account bei tuxgit (siehe Kapitel 1). So geht’s:\n\nDu gehst zu unserem LilyPond-Vorlagen-Repo auf unserem Git-Server.\nDu klickst auf Dieses Template verwenden.\nDu folgst den Schritten (Besitzer*innen, Name, … festlegen) Wichtig: Bei Template muss lilypond-vorlagen ausgewählt sein.\nDann kannst du einfach unten weitermachen.\n\n\n\nEin bestehendes Liederbuch-Repo klonen\nWenn du die obigen Schritte befolgt hast oder schon ein Liederbuch-Repo eingerichtet hast und dass einfach nur klonen willst, dann geht das so:\n\nRemote-Repo klonen\nJe nach GUI funktioniert das unterschiedlich. Irgendwo gibt es die Option Clone und da dann einen Dialog, in dem du unter anderem den SSH-Link des Repos eintragen kannst. Wichtig ist bei dem Prozess: Submodule müssen inkludiert werden. Irgendwo kann man dann den Speicherort des lokalen Repos festlegen. Es empfiehlt sich, einen Ordner zu haben, wo alle Git-Repos drin sind. Dies ist aber nicht notwendig für irgendetwas.\n\nSmartGit: In Smartgit navigierst du zu Repository -&gt; Clone und folgst dem Dialog. Zuerst gibst du deinen SSH-Link ein. Dann achtest du darauf, dass Submodules inkludiert werden und wählst zuletzt den Speicherort des Repos aus.\n\nAls nächstes müssen die Submodule noch richtig eingebunden werden, das geht nämlich leider nicht automatisch. Du brauchst auf jeden Fall unsere Common-Includes als Submodul. Wenn du mit unserem Liederpool arbeitest, brauchst du noch die Song-Includes als Submodul. Für jedes Submodul musst du diesen Prozess einzeln durchführen.\nAuch das funktioniert in jeder GUI anders. So geht es bei SmartGit:\n\nIm Menü Remote anwählen -&gt; Submodule -&gt; Add\nDann brauchst du die SSH-Links der Submodule. Die findest du auf die bekannte Art und Weise (siehe Abbildung 1).\nIm nächsten Schritt wird gefragt, an welcher Stelle das Submodul eingebunden werden soll, da kannst du einfach weiterklicken.\n\nFertig!\n\nUnd jetzt kann’s richtig losgehen!",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "review.html",
    "href": "review.html",
    "title": "Review",
    "section": "",
    "text": "Ziel unseres Review-Prozesses ist hauptsächlich die Sicherstellung der Einhaltung unserer Standards sowie die Erhaltung der Qualität des Liederpools. Es wäre toll, jedes neu hinzugekommene Lied inhaltlich (auf musikalische Korrektheit des Satzes) zu prüfen, allerdings ist das sehr zeitaufwendig und manchmal auch gar nicht möglich (wenn zum Beispiel nur eine Person das Lied kennt).",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#ziel",
    "href": "review.html#ziel",
    "title": "Review",
    "section": "",
    "text": "Ziel unseres Review-Prozesses ist hauptsächlich die Sicherstellung der Einhaltung unserer Standards sowie die Erhaltung der Qualität des Liederpools. Es wäre toll, jedes neu hinzugekommene Lied inhaltlich (auf musikalische Korrektheit des Satzes) zu prüfen, allerdings ist das sehr zeitaufwendig und manchmal auch gar nicht möglich (wenn zum Beispiel nur eine Person das Lied kennt).",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#überblick",
    "href": "review.html#überblick",
    "title": "Review",
    "section": "Überblick",
    "text": "Überblick\nIm Folgenden findest du eine Kurzschrittfolge über den Reviewprozess und eine ausführliche Schrittfolge für Einsteiger*innen.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#kurz-und-knapp-schritte-zum-beitragen-neuer-lieder",
    "href": "review.html#kurz-und-knapp-schritte-zum-beitragen-neuer-lieder",
    "title": "Review",
    "section": "Kurz und knapp: Schritte zum Beitragen neuer Lieder",
    "text": "Kurz und knapp: Schritte zum Beitragen neuer Lieder\n\nNeue Lieder setzen und auf einem neuen Branch in den Liederpool pushen\nReview-Schritte (siehe unten) selbst durchgehen\nPull-Request für den Merge vom neuen Branch auf den main-Branch anlegen\nIn einer Review-Session oder durch einzelne Personen wird der Pull-Request dann geprüft und letztlich in den main-Branch gemerged.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#kurz-und-knapp-review-schritte",
    "href": "review.html#kurz-und-knapp-review-schritte",
    "title": "Review",
    "section": "Kurz und knapp: Review-Schritte",
    "text": "Kurz und knapp: Review-Schritte\n\nZu mergenden Branch auschecken\nLäuft die Kompilierung ohne Fehler durch?\nSind die Standards befolgt worden? Stimmen die Autor*innenangaben?\n\nFalls ja: Pull-Request genehmigen und mergen\nFalls nein: Korrekturen anfragen\n\nAm Ende rebasen, genehmigen und fast-forwarden. Fertsch.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#ausführliche-anleitung-neue-lieder-einfügen",
    "href": "review.html#ausführliche-anleitung-neue-lieder-einfügen",
    "title": "Review",
    "section": "Ausführliche Anleitung: neue Lieder einfügen",
    "text": "Ausführliche Anleitung: neue Lieder einfügen\nDies ist eine Einführung in unser Review-System. Damit das ganze möglichst praxisnah erklärt wird, machen wir ein Beispiel. Nehmen wir an, du hast das Lied „Sturm und Drang“ gesetzt und willst es dem Liederpool hinzufügen. In dieser Anleitung gehen wir jetzt alle Schritte durch, die es braucht, bis das Lied vollständig im Liederpool angekommen ist. Bei Fragen oder Irritationen meld dich gerne bei uns!\nBevor du dich mit Pull Requests beschäftigst, solltest du Lilypond eingerichtet, Git eingerichtet und wichtige Infos zu unseren Standards gelesen haben.\nAnmerkung vorweg: Alle beschriebenen Schritte funktionieren in jeder Git-GUI etwas anders. Das ist nervig, aber leider nicht zu ändern. Deswegen orientiere dich an den zugrundeliegenden Git-Befehlen und suche im Zweifel in der Doku deiner GUI, wie man den Git-Befehl in deinem Programm ausführt. Eine andere Möglichkeit ist, das du aus deinem Programm eine Konsole (oder Git Bash) öffnest und es darüber machst.\n\n1. Schritt: Ein neuer Branch\nDu hast das Lied “Sturm und Drang” gemäß unseren Standards gesetzt. Jetzt soll das Lied in einen neuen Branch gepusht werden.\n\nErstell einen neuen Branch im Submodul lilypond-song-includes. Der Git-Befehl dafür lautet git branch branchname, wobei du branchname mit dem Namen des neuen Branches ersetzen musst. In unserem Falle zum Beispiel sturmunddrang. Der Name ist nicht unglaublich wichtig, aber er sollte der Übersicht halber etwas mit deinen geplanten Änderungen zu tun haben und nicht zu allgemein sein (also nicht: „neues Lied“).\nCheck in diesen Branch aus, das heißt: Wechsle den Branch vom main-Branch in den neu erstellten Branch. Falls du dich nicht im main-Branch befindest, checke unbedingt vorher in den main-Branch aus. Der Git-Befehl dafür lautet git checkout sturmunddrang.\nCommitte deine Änderungen, in unserem Beispiel also das neue Lied. Der Git-Befehl dafür lautet git -m commit \"neues Lied: Sturm und Drang\". Bitte fass in einem Commit immer nur zusammenhängende Änderungen zusammen. Wenn du beispielsweise Korrekturen in den Docs und in den Liedbausteinen vornimmst, mach dafür zwei Commits. Außerdem häng eine Commit-Message (dafür steht das -m) an, in der du kurz beschreibst, was du geändert hast. Jetzt sind deine Änderungen lokal in einen neuen Branch commitet.\nPushe den neuen Branch. Das funktioniert mit dem Git-Befehl git push. Wichtig: Du musst dich dafür in deinem neuen Branch befinden. Jetzt befinden sich deine Änderungen remote in einem neuen Branch namens sturmunddrang.\n\n\n\n2. Schritt: Der Pull-Request\nUnser Liederpool befindet sich im main-Branch. Aus diesem Grund ist dieser Branch geschützt, man kann also nicht einfach auf ihn pushen. Dann wäre ein Review nämlich nicht systematisch möglich. Stattdessen findet nun folgender Prozess statt: Eine Änderung wird in einen eigenen Branch gepusht, der Branch wird überprüft (reviewed) und dann in main integriert. Dafür sind nun folgende Schritte notwendig:\n\nErstelle einen neuen Pull-Request. Dafür musst du auf unserem Git-Server auf die Seite Pull Requests gehen. Dann klickst du auf den prominenten Button Neuer Pull-Request.\nWähle den Branch, von dem gepullt wird. Das Ziel ist dabei immer boernel:main. Bei pullen von solltest du deinen Branch auswählen, in unserem Beispiel also boernel:sturmunddrang.\nJetzt siehst du alle Commits, die sich in deinem Branch befinden. Außerdem siehst du eine Übersicht mit allen exakten getätigten Änderungen. Überprüfe noch einmal, ob alles dabei ist, dann klick im nächsten Schritt auf Neuer Pull-Request.\nJetzt kannst du dem Pull-Request noch Kommentare hinzufügen. Bearbeite, wenn gewünscht, den Titel und setze Haken im Kommentarfeld. Bei der Liste handelt es sich um eine Vorlage, die standardmäßig immer dabei ist. Bitte überprüfe alle Punkte. Im Idealfall sind alle Punkte erfüllt, dann kannst du sie abhaken. Wenn du dir nicht sicher bist, lass sie lieber offen. Einen Haken setzt du, indem du ein x in die Klammern anstatt des Leerzeichens setzt. Für unser Beispiel sähe es beispielsweise so aus:\nSind alle Punkte erfüllt?\n\n- [x] Das Lied läuft mit Lilypond durch und produziert keine Fehler\n- [x] Lied wurde mindestens einmal komplett durchgespielt und durchgesungen\n- [ ] Quellen sind angegeben\n- [x] Standards wurden eingehalten\nWenn du außerdem Hinweise oder Bemerkungen zu deinem Pull-Request hast, kannst du diese hier ebenfalls unterbringen.\nZum Schluss musst du nur noch auf Pull-Request erstellen klicken, dann bist du fertig. Wenn dein PR (=Pull-Request) bereit für den Review ist, dann kannst du im Menü rechts unter dem Punkt Reviewer das Team „Setzer“ auswählen, dann werden alle benachrichtigt, die mit dem Liederpool arbeiten, dass es einen zu reviewenden PR gibt. Außerdem kannst du auch in die Signal-Gruppe schreiben.\n\n\n\n3. Schritt: Der Review\nNun kann es sein, dass es Änderungswünsche an deinem Commit gibt, weil es doch noch zusätzliche Informationen gibt, die darin fehlen, oder weil jemand einen Tippfehler gefunden hat. Das siehst du übrigens im Bereich deines Pull-Requests. Die Änderung funktioniert folgendermaßen:\n\nDu gehst in deiner Git-GUI in den Branch, um den es im PR geht.\nDu möchtest den Commit bearbeiten, in dem eine Änderung gewünscht wurde. Das geht über den Befehl git commit --amend, wenn es der letzte Commit ist. In deiner Git-GUI gibt es vermutlich die Möglichkeit, einen Commit zu bearbeiten („amend“). Folge den Anweisungen.\nDer letzte Schritt ist, die neuen Änderungen zu pushen. Achtung! Du musst force-pushen, weil du die Änderungen auf dem Server ja überschreiben möchtest. Du überschreibst also Dinge auf dem Server, die danach weg sind! Der Git-Befehl lautet git push --force.\nFertig. Sind alle Änderungen genehmigt, kannst du – falls notwendig den Branch durch Rebase aktualisieren (Achtung! Dazu musst du erst die korrekte Methode auswählen. Bitte nutze nicht Mergen zum Aktualisieren). Zuletzt kannst du den Button Rebasen und dann fast-forwarden klicken, wenn dieser blau ist. Der Branch wird dann automatisch in den main-Branch überführt und anschließend gelöscht.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "review.html#ausführliche-anleitung-pull-requests-reviewen",
    "href": "review.html#ausführliche-anleitung-pull-requests-reviewen",
    "title": "Review",
    "section": "Ausführliche Anleitung: Pull-Requests reviewen",
    "text": "Ausführliche Anleitung: Pull-Requests reviewen\n\nSchritt 1: Die Pull-Request-Oberfläche\nUnter https://git.zahlenlabyrinth.de/boernel/lilypond-song-includes/pulls findest du alle aktuellen Pull-Requests (PRs). Wenn du in den PR gehst, den du reviewen willst, siehst du drei Reiter: Diskussion, Commits und Geänderte Dateien.\n\nDiskussion: Hier findest du eine Art “Kommentarspalte” zum PR. Offene Fragen, Kommentare und Diskussionen können hier gestellt/geführt werden. Außerdem werde im Diskussionsfeed Änderungen am PR festgehalten. In der Menüspalte rechts hast du einige Optionen: Du kannst Reviewer anfragen (entweder eine ganze Gruppe oder auch einzelne Personen), Label hinzufügen (das nutzen wir Stand jetzt noch nicht), Zuständigkeiten verteilen und weiteres. Das meiste nutzen wir allerdings nicht – höchstens „Reviewer anfragen“ ist wichtig.\nCommits: Hier hast du einen Überblick über die Commits, die zum Pull-Request gehören.\nGeänderte Dateien: Hier hast du einen Überblick über alle geänderte Dateien des PRs. Wenn du Änderungswünsche hast, kannst du dies in Referenz auf die entsprechende Code-Zeile direkt tun. Das wird im Folgenden noch erklärt.\n\n\n\nSchritt 2: Überprüfen\n\nCheck in den Branch aus, dessen Pull-Request (PR) du reviewen willst, das heißt: Wechsle den Branch von deinem aktuellen Branch in den zu reviewenden Branch. Der Git-Befehl dafür lautet git checkout sturmunddrang.\nTeste die geänderten Dateien. Mit anderen Worten: Kompiliere die Lieder einmal durch und führe eine Sicht- und Hörprüfung (mit der MIDI) durch. Wenn du das Lied kennst, kannst du es auch durchsingen.\nÜberprüfe die Lieder hinsichtlich der Einhaltung der Standards und der Korrektheit der Autor*innenangaben. Achte auch darauf, ob die Zeichensetzung plausibel aussieht.\nWenn du einen Fehler findest, kannst du ihn entweder selbst ändern (siehe dazu vorheriges Kapitel, Abschnitt „Review“) oder eine Änderung anfragen. Wie das geht, erfährst du jetzt:\n\nGehe in den Reiter Geänderte Dateien\nGehe in die Datei, in der du etwas ändern willst.\nSuche die Code-Zeile, in der du etwas ändern willst. Gehe mit der Maus über die Zeile und klicke auf das grüne Plus am Rand.\nBeschreibe deine Änderung so, dass sie für andere verständlich ist.\nWiederhole die obigen Punkte für alle gewünschten Änderungen.\nZuletzt klicke oben rechts auf die Schaltfläche Überprüfen und dann auf Änderung anfragen.\n\nWenn alles geklärt ist, kannst du den PR freigeben. Das machst du im Reiter Geänderte Dateien und dann oben rechts mit der Schaltfläche Überprüfen. Wenn du auf Genehmigen klickst, wurde der PR freigegeben.",
    "crumbs": [
      "Doku",
      "Review-Prozess",
      "Review"
    ]
  },
  {
    "objectID": "liedlayout_doku.html",
    "href": "liedlayout_doku.html",
    "title": "Lied-Layout",
    "section": "",
    "text": "In diesem Abschnitt der Doku zeigen wir Lösungen für Probleme oder Herausforderungen, die sich aus der Arbeit mit unserem System ergeben. Vieles davon wurde von tux entwickelt und befindet sich in den lilypond-common-includes, bei manchen Themen verweisen wir auch einfach nur auf die LilyPond-Doku. Dieser Teil ist fokussiert auf die Layout-Fragen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#transponieren",
    "href": "liedlayout_doku.html#transponieren",
    "title": "Lied-Layout",
    "section": "Transponieren",
    "text": "Transponieren\nViele Lieder sind in verschiedenen Tonarten verbreitet. Im Liederpool sollte sich grundsätzlich an die Originaltonart gehalten werden. Wenn die Tonart in einem Liederbuch angepasst werden soll, funktioniert dies mit dem Befehl \\transposeGlobal x y. Mit x und y wird dabei der Tonsprung bezeichnet. Es bietet sich an, dafür die Tonarten zu nutzen, tatsächlich ist aber lediglich der Abstand entscheidend. Der Befehl kann einfach irgendwo in der Datei aufgerufen werden, am besten nicht innerhalb anderer Teile/Variablen.\nBeispiel: Wir wollen ein Lied statt in Fis-Dur in C-Dur setzen. Dann schreiben wir: \\transposeGlobal fis c,. In diesem Falle müssen wir vermutlich die Tonhöhe anpassen, da der Sprung sehr groß ist. Das funktioniert wie in LilyPond gewohnt mit , bzw. '.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#sec-romanstanza",
    "href": "liedlayout_doku.html#sec-romanstanza",
    "title": "Lied-Layout",
    "section": "Römische Ziffern",
    "text": "Römische Ziffern\nRömische Ziffern (I, II etc.), um zum Beispiel Übersetzungen mit einem anderen System zu nummerieren als den Originaltext, können erreicht werden, in dem vor den Ausdruck #(stanza 1) die Funktion \\romanStanza aufgerufen wird.\nBeispiel:\nTEXT = \\markuplist {\n  \\group-verses {\n    \\chordlyrics { \\romanStanza \\firstVerse }\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#sec-zeilenumbrueche",
    "href": "liedlayout_doku.html#sec-zeilenumbrueche",
    "title": "Lied-Layout",
    "section": "Zeilenumbrüche in den Strophen",
    "text": "Zeilenumbrüche in den Strophen\nProblem: Verschiedene Liederbücher haben verschiedene Formate, weswegen es keinen idealen Zeilenumbruch für alle Liederbücher gibt.\nLösung: Versumbrüche werden in der Variable verse-breaks anhand von (unsichtbaren) Pausen (s)und \\break-Befehlen bewirkt. Diese Variable wird dann mittels \\override-Befehl vor den entsprechenden Versen im TEXT-Part eingebunden. Beispiel: \\override #`(verse-break-voice . ,verse-breaks). verse-break-voice erstellt eine (unsichtbare) Stimme mit den Umbrüchen aus verse-breaks und wird auch für den Fall gesetzt, dass es Strophen und einen Refrain gibt. In dem Falle wird das \\override immer vor den unterschiedlichen Strophen neu gesetzt.\n\n\n\n\n\n\nWarnung\n\n\n\nAchtung: \\override gilt immer nur für das folgende Element, zum Beispiel ein Vers oder ein \\group-verses-Ausdruck.\nFür mehrere Ausdrücke kann stattdessen \\override-lines genutzt werden. Das könnte mit dem unten stehenden Beispiel dann so aussehen:\nTEXT = \\markuplist {\n  \\override-lines #`(verse-break-voice . ,verse-breaks)\n  {\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\override #`(verse-break-voice . ,ref-breaks)\n    \\chordlyrics \\refLyrics\n  }\n  \\group-verses {\n    \\chordlyrics \\thirdVerse\n  }\n  }\n}\nDas zu Beginn gesetzte Override gilt nun auch für die unteren Group-Verses.\n\n\nCodebeispiel, bei dem Refrain und Strophe auf eine Seite (und damit in ein \\group-verses) gedruckt werden:\nverse-breaks = {\n  s2.*4 \\break %s2.*4 bedeutet, dass s2. 4 mal wiederholt wird\n  s2.*4 \\break\n  s2.*4 \\break\n}\n\nref-breaks = {\n  s2.*2 \\break\n  s2.*2 \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\override #`(verse-break-voice . ,ref-breaks)\n    \\chordlyrics \\refLyrics\n    \\chordlyrics \\thirdVerse\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#strophentext-kleiner-machen",
    "href": "liedlayout_doku.html#strophentext-kleiner-machen",
    "title": "Lied-Layout",
    "section": "Strophentext kleiner machen",
    "text": "Strophentext kleiner machen\nDer Strophentext im alten (!) System kann mit dem Befehl \\fontsize #-1 verkleinert werden. Der Befehl kommt an den Anfang des Markup-Blocks.\nIm neuen System verändert sich die Textgröße analog zur Score-Größe (siehe Kapitel 4.1).\nTEXT = \\markuplist {\n  \\fontsize #-1\n  \\group-verses {\n    %…\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#abstand-zwischen-strophen",
    "href": "liedlayout_doku.html#abstand-zwischen-strophen",
    "title": "Lied-Layout",
    "section": "Abstand zwischen Strophen",
    "text": "Abstand zwischen Strophen\nZwischen Strophen oder auch gruppierten Strophen und ganz generell in Markup kann ein Abstand zwischen zwei Objekten mittels des Befehls \\vspace #0 erzeugt werden, wobei die Zahl beliebig groß oder klein (auch negativ) gesetzt werden kann.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#abstand-zwischen-strophen-innerhalb-der-group-verse-umgebung",
    "href": "liedlayout_doku.html#abstand-zwischen-strophen-innerhalb-der-group-verse-umgebung",
    "title": "Lied-Layout",
    "section": "Abstand zwischen Strophen innerhalb der Group-Verse-Umgebung",
    "text": "Abstand zwischen Strophen innerhalb der Group-Verse-Umgebung\nInnerhalb eines \\group-verses kann der Abstand zwischen den Strophen einheitlich mit dem Befehl \\override #'(verse-vspace . 0.8) modifiziert werden. Der Standardwert beträgt 1. Werte können auch negativ sein. Der Override-Befehl wird vor die Group-Verses-Umgebung geschrieben.\nTEXT = \\markuplist {\n  \\override #'(verse-vspace . 0.8)\n  \\group-verses {\n    %…\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#zeilenabstand-abstand-innerhalb-der-strophen",
    "href": "liedlayout_doku.html#zeilenabstand-abstand-innerhalb-der-strophen",
    "title": "Lied-Layout",
    "section": "Zeilenabstand (Abstand innerhalb der Strophen)",
    "text": "Zeilenabstand (Abstand innerhalb der Strophen)\nDer Zeilenabstand, also der Abstand der Verse innerhalb der Strophen zueinander, kann mit dem Befehl \\override #'(intraverse-vspace . 0.3) beeinflusst werden. Der Standardwert beträgt 0. Werte können auch negativ sein. Der Befehl muss vor die Group-Verses-Umgebung geschrieben werden.\nTEXT = \\markuplist {\n  \\override #'(intraverse-vspace . 0.3)\n  \\group-verses {\n    %…\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#spalten",
    "href": "liedlayout_doku.html#spalten",
    "title": "Lied-Layout",
    "section": "Spalten",
    "text": "Spalten\nDie Strophen können auch in Spalten gruppiert werden. Das funktioniert mit dem Befehl \\override #'(verse-cols . 2). Die Zahl gibt die Anzahl der Spalten an. Die Anordnung erfolgt von oben nach unten und dann in der nächsten Spalte wieder von oben nach unten. Mit dem Befehl \\override #'(verse-ordering-horizontal . #t) kann dieses Verhalten beeinflusst werden. Der Befehl \\override #'(verse-hspace . -5) ermöglicht die Veränderung des Abstands zwischen den Spalten.\nTEXT = \\markuplist {\n  \\override #'(verse-cols . 3) % 3 Spalten\n  \\override #'(verse-ordering-horizontal . #t) % Verse horizontal fortlaufend anordnen\n  \\override #'(verse-hspace . -5) % Abstand zwischen Spalten geringer machen\n  \\group-verses {\n    %…\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#abstand-der-notenzeilen",
    "href": "liedlayout_doku.html#abstand-der-notenzeilen",
    "title": "Lied-Layout",
    "section": "Abstand der Notenzeilen",
    "text": "Abstand der Notenzeilen\nDer Abstand der Notenzeilen von Inline-Scores kann angepasst werden mit dem Befehl \\override #'(baseline-skip . 1).\nTEXT = \\markuplist {\n  \\group-verses {\n    \\override #'(baseline-skip . 1)\n    \\score {\n      \\inline-score\n      \\BRIDGE\n      \\layout { \\generalLayout}\n    }\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#sec-size",
    "href": "liedlayout_doku.html#sec-size",
    "title": "Lied-Layout",
    "section": "Ausgabe-Größe",
    "text": "Ausgabe-Größe\nUm Platz zu sparen, kann es hilfreich sein, die Größe des Staffs (wozu effektiv fast alle Ausgabe-Elemente gehören: Noten, Lyrics, Akkorde und somit auch die Strophen) abweichend von den globalen Liederbucheinstellungen anzupassen. Das erfolgt mit der Ergänzung des LAYOUT-Blocks:\nLAYOUT = \\layout {\n  \\LAYOUT\n  size = 15 %hier die gewünschte Größe anpassen\n}\nDas ergänzt den in den Skripten bereits existierenden LAYOUT-Block um die Staff-Size, die effektiv mit dem Scheme-Befehl #(layout-set-staff-size 13.8) überschrieben wird. Aus technischen Gründen funktioniert der nicht immer zuverlässig, weshalb es den oben genannten Befehl für diesen Zweck gibt.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#der-paper-block",
    "href": "liedlayout_doku.html#der-paper-block",
    "title": "Lied-Layout",
    "section": "Der \\paper-Block",
    "text": "Der \\paper-Block\nIm \\paper-Block können etliche Schrauben am Layout gedreht werden. Dabei nutzen wir ausschließlich schon vorhandene LilyPond-Funktionen und verweisen an dieser Stelle jeweils auf die offizielle LilyPond-Doku.\nDer \\paper-Block ist Teil des HEADER’s und wird an die folgende Stelle in der Layout-Datei eingefügt:\nHEADER = \\bookpart {\n  \\paper {\n    %hier kommt alles rein, was in den Paper-Block gehört\n  }\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n  }\n}\n\nSeitenanzahl eines Liedes bestimmen\nWenn ein Lied auf eine Seite gequetscht werden soll, geht das mit dem Befehl page-count = #1, wobei die Nummer hinter dem #-Zeichen jeweils für die Anzahl der Seiten steht. Mehr dazu in der LilyPond-Doku.\n\n\nAbstand zwischen Titel und Noten\nDer Abstand zwischen Titel und Noten wird mit markup-system-spacing.padding = 4 definiert. Mehr dazu in der LilyPond-Doku.\n\n\nAbstand zwischen Seitenrand und oberstem Notensystem\nDas kann hilfreich sein, um zum Beispiel Noten auf der zweiten Seite weiter unten anfangen zu lassen. Wenn etwas anderes dort steht (z.B. Titel oder Text), greift das nicht. Der Befehl lautet: top-system-spacing.padding = 6. Mehr dazu in der LilyPond-Doku.\n\n\nAbstand zwischen den Systemen\nDer Abstand zwischen den Notensystemen kann mittels system-system-spacing.padding = 1 angepasst werden. Mehr dazu in der LilyPond-Doku.\n\n\nKeine Seitennummer\nWenn die Seitennummer nicht geprintet werden soll, kann der Befehl print-page-number = ##f verwendet werden. Mehr dazu in der LilyPond-Doku.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#größe-des-bildtitels",
    "href": "liedlayout_doku.html#größe-des-bildtitels",
    "title": "Lied-Layout",
    "section": "Größe des Bildtitels",
    "text": "Größe des Bildtitels\nWenn ein Lied anstatt eines Schrifttitels ein Bildtitel hat (also eine eps-Datei, die im Layout-Ordner liegt), dann kann die Größe dieser eps-Datei mittels der Variable titlesize = 11 angepasst werden, die in den Header eingefügt werden muss, also:\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    titlesize = 11 %hier die Zahl anpassen\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#abstand-des-titels-zum-oberen-seitenrand",
    "href": "liedlayout_doku.html#abstand-des-titels-zum-oberen-seitenrand",
    "title": "Lied-Layout",
    "section": "Abstand des Titels zum oberen Seitenrand",
    "text": "Abstand des Titels zum oberen Seitenrand\nDer Abstand des Titels (egal ob Bild oder Schrift) zum oberen Seitenrand kann mittels der Variable titletopspace = 2 eingestellt werden, die ebenfalls in den Header muss:\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    titletopspace = 2 %hier die Zahl anpassen\n  }\n}",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liedlayout_doku.html#verschieben-von-objekten",
    "href": "liedlayout_doku.html#verschieben-von-objekten",
    "title": "Lied-Layout",
    "section": "Verschieben von Objekten",
    "text": "Verschieben von Objekten\nDie Funktion \\translate #'(x . y) verschiebt das nächste, was geprinted wird, nicht an die eigentliche Stelle, sondern verschiebt es um die Koordinaten x und y (jeweils numerische Werte). Ausprobieren hilft.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Lied-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html",
    "href": "liederbuch_layout.html",
    "title": "Liederbuch-Layout",
    "section": "",
    "text": "In diesem Teil der Doku geht es um die Layout-Konfigurationen, die in aller Regel für ein gesamtes Liederbuch gelten sollen, also zum Beispiel die Schriftart der Akkorde, der Lyrics, der Überschriften, Seitenränder, Kategorien und vieles mehr. Generell sind diese Konfigurationen im Ordner lilypond-custom-includes zu machen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html#einstellungen-überschreiben",
    "href": "liederbuch_layout.html#einstellungen-überschreiben",
    "title": "Liederbuch-Layout",
    "section": "Einstellungen überschreiben",
    "text": "Einstellungen überschreiben\nIn der Datei lilypond-custom-includes/base_config.ly können unter anderem LilyPond-Einstellungen, die in den lilypond-common-includes definiert wurden, überschrieben werden, zum Beispiel die Einstellungen zu Versetzungszeichen oder Balkensetzungen.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html#generelle-layout-einstellungen",
    "href": "liederbuch_layout.html#generelle-layout-einstellungen",
    "title": "Liederbuch-Layout",
    "section": "Generelle Layout-Einstellungen",
    "text": "Generelle Layout-Einstellungen\nDie allermeisten liederbuchspezifischen Einstellungen, die man vermutlich verändern will, finden sich in der Datei lilypond-common-includes/default_style.ly. Die dortigen Einstellungen können angepasst werden, indem die entsprechenden Parameter in die Datei lilypond-custom-includes/custom_style_overrides.ly kopiert werden und die Werte entsprechend verändert werden. Sofern nicht anders angegeben, müssen numerische Werte übergeben werden. Folgende Parameter gibt es:\n\nsongFormatAndSize definiert das Format, zum Beispiel a5 oder b6.\nsongMargin definiert den Seitenabstand.\nsongInfoFontSize definiert die Schriftgröße der Songinfo.\nsongInfoLineWidthFraction definiert die Breite der Songinfo.\nsongTitleSize definiert die Schriftgröße des Titels.\nsongTitleFont definiert die Schriftart des Titels. Der Name der Schriftart wird als String, also in Anführungszeichen übergeben.\nsongChordFont definiert die Schriftart der Akkorde. Der Name der Schriftart wird als String, also in Anführungszeichen übergeben.\nsongLyricFont definiert die Schriftart der Lyrics (Strophen). Der Name der Schriftart wird als String, also in Anführungszeichen übergeben.\nsongChordFontSeries. Hier kann eingestellt werden, ob die Akkorde normal (#'normal) oder fett (#'bold) dargestellt werden sollen.\nsongTextChordAlignment ist nur für das „alte“ System notwendig, wenn also keine Noten im Spiel sind. Mit #'left werden die Akkorde dann über den Silben links ausgerichtet, mit #'center werden sie über der jeweiligen Silbe zentriert.\nsongScoreChordFontSize definiert die Größe der Akkordzeichen in den Noten.\nsongTextChordFontSize definiert die Größe der Akkordzeichen in den Strophen. Es empfiehlt sich, beide Variablen gleichzusetzen.\nsongTextChordDistance definiert den Abstand zwischen den Akkordzeichen in den Strophen zu den zugehörigen Lyrics (nur neues System).\nsongTextLineHeigth definiert den Abstand zwischen den Lyric-Zeilen. Da die Akkorde sich jeweils an den Lyrics orientieren, werden die bei Anpassung des Werts mit verschoben.\nsongTocColumns definiert die Anzahl der Spalten, die im Inhaltsverzeichnis genutzt werden sollen.\nglobalSize definiert die Größe des Notensatzes.\nlyricSize definiert die Größe der Lyrics.\nstanzaFormat definiert das Format für die Nummerierung der Strophen. Standardformat ist \"~a.\". ~a ist hierbei ein Platzhalter für die Strophennummer. Hier kann also definiert werden, ob als Ausgabe beispielsweise 1., 1.: oder 1) gewünscht ist.\nromanStanzaFormat definiert das Format für die römische Nummerierung der Strophen, also der Alternativnummerierung, die zum Beispiel für fremdsprachige Strophen genutzt werden kann. Das Prinzip ist dasselbe wie beim stanzaFormat.\nrefString definiert, welche Stanza beim \\ref-Befehl übergeben werden soll.\nrefStringWithNumbers definiert das Format von nummerierten Refrains nach demselben Schema wie beim stanzaFormat.\nrepStart definiert den Befehl \\repStart für das alte System, um typographisch korrekte Wiederholungszeichen zu setzen.\nrepStop siehe repStart.\n\n\n\n\n\n\n\nHinweis\n\n\n\nEs empfiehlt sich, dass die Schriftart ebenfalls im Repo gespeichert wird, da nicht auf jedem Computer dieselben Schriftarten installiert sind.\n\n\nDer Default-Style sieht so aus:\nsongFormatAndSize = \"a5\"\nsongMargin = 5\nsongInfoFontSize = 0\nsongInfoLineWidthFraction = 0.9\nsongTitleSize = 6\nsongTitleFont = \"Liberation Sans\"\nsongChordFont = \"Liberation Sans\"\nsongLyricFont = \"Liberation Sans\"\nsongChordFontSeries = #'bold\nsongTextChordAlignment = #'left\nsongScoreChordFontSize = 2\nsongTextChordFontSize = \\songScoreChordFontSize\nsongTextChordDistance = 2.8\nsongTextLineHeigth = 5.8\nsongTocColumns = 3\nglobalSize = 15\nlyricSize = 1.6\nstanzaFormat = \"~a.\"\nromanStanzaFormat = \"~@r.\"\nrefString = \"Ref.:\"\nrefStringWithNumbers = \"Ref. ~a:\"\n% hübsche Wiederholungszeichen für den Liedtext\nrepStart = \"𝄆\"\nrepStop = \"𝄇\"",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html#anpassung-der-akkordsymbole",
    "href": "liederbuch_layout.html#anpassung-der-akkordsymbole",
    "title": "Liederbuch-Layout",
    "section": "Anpassung der Akkordsymbole",
    "text": "Anpassung der Akkordsymbole\nAuch die bestimmte Darstellung, spezieller Akkordsymbole kann in den custom_style_overrides.ly angepasst werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html#kategorien",
    "href": "liederbuch_layout.html#kategorien",
    "title": "Liederbuch-Layout",
    "section": "Kategorien",
    "text": "Kategorien\nMithilfe unserer Skripte ist es möglich, Lieder Kategorien zuzuordnen und sie optional mit Kategoriebildchen zu versehen. Auch ein Kategorienverzeichnist ist möglich (siehe Einführung). So funktioniert es:\n\nKategorien erstellen\nAls erstes solltest du Kategorien in der Datei lilypond-custom-includes/categories.ly definieren. Die Datei sieht so aus:\n#(define category-names '(\n  (see \"See und\\nPiraten\")\n  ;(categoriekey \"Titel der Kategorie\")\n  ))\n\n%% Path to Category images\n#(define-public (category-image-path category)\n   (string-append \"../../liederbuecher/beispiel_liederbuch/categories/\"\n         category \".eps\"))\nDas gehen wir jetzt Zeile für Zeile durch. In der ersten Zeile wird die Scheme1-Funktion definiert, das ist erstmal uninteressant. Ab der zweiten Zeile werden dann alle Kategorien und ihre Titel definiert. Das Schema wird im auskommentierten Teil beschrieben2: Erst kommt die ID der Kategorie und danach in Anführungszeichen der Titel. Auf die ID wird in der Lied-Layout-Datei referenziert. Der Titel ist der, der dann im Kategorienverzeichnis benutzt wird. Im obigen Beispiel ist also see die ID und \"See und/nPiraten\" der Titel. Das /n bewirkt übrigens einen Zeilenumbruch.\nIm zweiten Teil wird der Pfad zu den Kategoriebildchen definiert. Der sollte auf jeden Fall angepasst werden und auf einen Ordner in deinem Liederbuch-Ordner verweisen. Die Dateinamen müssen dabei der ID entsprechen und das EPS-Format haben.\n\n\nLiedern Kategorien zuweisen\nIn der Layout-Datei der Lieder können im zweiten Schritt dann Kategorien den Liedern zugewiesen werden, in dem in der categories-Variable alle betreffenden IDs durch Leerzeichen getrennt aufgeschrieben werden. Das könnte dann so aussehen:\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"see abend andacht\"\n  }\n}\nDas Lied würde also den Kategorien mit den IDs see, abend und andacht zugewiesen werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "liederbuch_layout.html#footnotes",
    "href": "liederbuch_layout.html#footnotes",
    "title": "Liederbuch-Layout",
    "section": "Fußnoten",
    "text": "Fußnoten\n\n\nScheme ist die Programmiersprache, in der LilyPond geschrieben ist.↩︎\nBei Scheme wird mit dem Semikolon (;) auskommentiert.↩︎",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Liederbuch-Layout"
    ]
  },
  {
    "objectID": "doku.html",
    "href": "doku.html",
    "title": "Doku",
    "section": "",
    "text": "Das ist unsere Doku für die Liederpool-spezifischen Befehle und Standards. Hier dokumentieren wir unsere Standards beim Setzen, Lösungen für „Probleme“ in der Anwendung unseres Systems und eigene definierte Befehle, die nicht Teil des Standard-LilyPond sind.\nGrundsätzlich hilft dir bei allen LilyPond-spezifischen Fragen oder Problemen natürlich die LilyPond-Doku.",
    "crumbs": [
      "Doku"
    ]
  },
  {
    "objectID": "liedersetzen.html",
    "href": "liedersetzen.html",
    "title": "Liedersetzen",
    "section": "",
    "text": "Jetzt kann es losgehen mit dem Lieder setzen. Damit du möglichst einfach reinkommst, erklären wir dir gleich anhand eines Beispiels, dass du bei dir nachvollziehen kannst, wie unser System funktioniert.\nVorneweg gibt es aber noch ein paar wichtige Links und Helfer:\n\nHier gibt es eine LilyPond-Einführung von den LilyPond-Entwickler*innen. Du kannst die auch nochmal machen, aber viele grundlegenden Sachen lernst du in diesem Tutorial schon kennen.\nHier findest du die LilyPond-Dokumentation. Das ist im Grunde der wichtigste und erste Ort, um herauszufinden, wie du musikalische Notation in LilyPond umsetzen kannst. Auch die meisten aufkommenden Probleme lassen sich schon allein mit der Doku beheben. Zusätzlich kannst du auch gerne unsere Setzer*innen-Gruppe auf Signal dafür nutzen.\n\nSo, jetzt geht’s los!",
    "crumbs": [
      "Einführung",
      "Lieder setzen"
    ]
  },
  {
    "objectID": "metadaten.html",
    "href": "metadaten.html",
    "title": "Metadaten",
    "section": "",
    "text": "Metadaten werden grundsätzlich in der Variable basicSongInfo gespeichert. Alle untenstehenden Ausführungen beziehen sich auf den Inhalt dieser Variable.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#titel",
    "href": "metadaten.html#titel",
    "title": "Metadaten",
    "section": "Titel",
    "text": "Titel\nDer Titel wird in der Liederpool-Datei mit der Variable title = \"\" angegeben, wobei innerhalb der Anführungszeichen der Titel steht. Als Titel sollte immer der „Originaltitel“ genutzt werden. Dieser kann in der Layout-Datei, sofern gewünscht, einfach überschrieben werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#liedanfang",
    "href": "metadaten.html#liedanfang",
    "title": "Metadaten",
    "section": "Liedanfang",
    "text": "Liedanfang\nDer Liedanfang wird mit starttext = \"\" angegeben, wobei innerhalb der Anführungszeichen der Anfang des Liedes steht. Ist der Liedanfang gleich dem Titel, muss er nicht nochmal neu angegeben werden.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#alternative-titel",
    "href": "metadaten.html#alternative-titel",
    "title": "Metadaten",
    "section": "Alternative Titel",
    "text": "Alternative Titel\nAlternative Titel können mittels der Variable alttitle = #'(\"\") angegeben werden, wobei innerhalb der Anführungszeichen der Alternativtitel benannt wird. Wenn es mehrere Alternativtitel gibt einfach in Anführungszeichen daneben, zum Beispiel: alttitle = #'(\"Alttitle A\" \"Alttitle B\" \"Alttitle C\").",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#autorinnenangaben",
    "href": "metadaten.html#autorinnenangaben",
    "title": "Metadaten",
    "section": "Autor*innenangaben",
    "text": "Autor*innenangaben\nAutor*inneninformationen werden im neuen System aus einer YAML-Datei gezogen. Das bedeutet, in der Lilyponddatei wird lediglich auf eine ID einer Autorin verwiesen, deren Informationen in der YAML-Datei unter dieser ID zu finden sind.\n\nAbruf in der Lilyponddatei\nDie ID der beiden Autor*innen heißt in diesem Fall Autor1 beziehungsweise Autor2.\nbasicSongInfo = \\header {\n  title = \"Liedtitel\"\n  alttitle = \"Liedanfang\"\n  authors = #'(\n    (\"Autor1\" text)\n    (\"Autor2\" melody))\n  year_text = \"2024\"\n  year_melody = \"2024\"\n  infotext = \"Infotext\"\n}\n\n\nAufbau der YAML-Datei\nDie YAML ist wie folgt aufgebaut und alphabetisch sortiert. Die ID für eine*n Autor*in sollte, wenn vorhanden und eindeutig, dem Fahrtennamen entsprechen. Wenn nicht vorhanden oder uneindeutig dem bürgerlichen Namen nach dem Schema VornameNachname. Das hat keine technischen Gründe, sondern soll nur die Arbeit erleichtern. Wenn es einheitlich ist, muss man vielleicht nicht jedes Mal in der YAML-Datei nachschauen, wie nochmal die ID von Autor*in XYZ war.\nAutor1:\n  name: Vorname Nachname\n  trail_name: Autor1\n  birth_year: \"1950\"\n  organization: Bund der Autoren\nAutor2:\n  name: Name Surname\n  trail_name: Autor2\n  death_year: \"2050\"\n  organization: Autorenbund\n\n\nMögliche Optionen beim Abruf\nDa es zahlreiche Wünsche etc. bei der Autor*innenschaft von Liedern gibt, ist das System möglichst umfassend gestaltet. Der grundsätzliche Aufbau ist, dass in Klammern immer die ID benannt wird sowie die Eigenschaften, die diese ID hat (zum Beispiel die Worte geschrieben, die zweite Stimme usw.). Folgende Möglichkeiten gibt es:\n\ntext: Die Person hat am Text mitgeschrieben.\nmelody: Die Person hat an der Melodie mitgeschrieben.\ncomposition: Die Person hat am Satz mitgeschrieben.\n(verse 1): Die Person hat an der ersten Strophe mitgeschrieben.\n\n(verse 1) (verse 2): Die Person hat an der ersten und zweiten Strophe mitgeschrieben.\n\n(voice 2): Die Person hat an der zweiten Stimme mitgeschrieben.\n\n(voice 2) (voice 3): Die Person hat an der zweiten und dritten Stimme mitgeschrieben.\n\ninterlude: Die Person hat am Zwischenspiel mitgeschrieben.\nbridge: Die Person hat an der Bridge mitgeschrieben.\ntranslation: Die Person hat an der Übersetzung mitgeschrieben.\n(meloverse 1): Die Person hat an der ersten Melodiestrophe mitgeschrieben (damit ist die Melodie der ersten Strophe gemeint).\n\n(meloverse 1) (meloverse 2): Die Person hat an der ersten und zweiten Melodiestrophe mitgeschrieben (damit ist die Melodie der ersten Strophe gemeint).\n\n\nDas sind alle möglichen Beispiele, die durchaus schon größtenteils einmal benötigt wurden. Allerdings ist offensichtlich, dass diese Möglichkeitsvielfalt keinesfalls immer sinnvoll ist.\nFür alle diese Möglichkeiten finden sich Anwendungsbeispiele im Repository lilypond-vorlagen, dort im Ordner Lieder (Datei authors-sandbox.ly) (Link). Da kann man sich gut austoben. So sieht das dann aus:\ndude:\n  birth_year: '1950'\n  name: Krasser Dude\n  organization: Bund der krassen Dudes\n  trail_name: dud\nkumpel:\n  death_year: '2050'\n  name: Krasser Kumpel\n  organization: Bund der krassen Kumpels\n  trail_name: dudekumpel\nkumpelerbe:\n  inherits: kumpel\n  organization: Bund der crazy Kumpels\nnocheiner:\n  death_year: '2050'\n  name: Jemand anderes\n  \n\n\nOutput:\n\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nWenn der*die Verfasser*in unbekannt ist, wird dies folgendermaßen kenntlich gemacht: (\"\" melody text). In diesem Falle kann kein Eintrag in der YAML gefunden werden, deswegen wird für die Optionen Melodie und Text „unbekannt“ ausgegeben.\n\n\n\n\nSonderfall „Inherits“\nEs kann vorkommen, dass Autor*innen ihre Bundzugehörigkeit ändern oder bestimmte Lieder für eine Band geschrieben haben, allerdings andere nicht. Dann wäre es unpraktisch, dass als Organisation beispielsweise trotzdem „Schlagsaite“ dort steht, obwohl das Lied mit Schlagsaite nichts zu tun hat (außer, dass der Autor bei Schlagsaite spielt). Die Lösung für dieses Problem lautet Inherits. Das Prinzip ist, dass eine neue ID erstellt wird, die die Eigenschaften einer bestimmten ID erbt. Diese Eigenschaften können dann aber überschrieben werden. Im Lied muss man dann auf diese neue ID verweisen. Das sieht zum Beispiel so aus:\nkumpel:\n  name: Krasser Kumpel\n  trail_name: kumpel\n  death_year: \"2050\"\n  organization: Bund der krassen Kumpels\nkumpelerbe:\n  inherits: kumpel\n  organization: Bund der crazy Kumpels\nZur Erklärung: kumpelerbe übernimmt die Eigenschaften von kumpel, danach wird die Organisation überschrieben auf einen anderen Bund.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#textjahr",
    "href": "metadaten.html#textjahr",
    "title": "Metadaten",
    "section": "Textjahr",
    "text": "Textjahr\nÜber die Variable year_text = \"YYYY\" erfassen wir, wann der Text geschrieben bzw. veröffentlicht wurde. Dabei sollte in die Anführungszeichen nur das Jahr geschrieben werden, wenn genauere Daten vorhanden sind, gerne dahinter auskommentiert. Also zum Beispiel: year_text = \"2004\" % 01.01.2004.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#melodiejahr",
    "href": "metadaten.html#melodiejahr",
    "title": "Metadaten",
    "section": "Melodiejahr",
    "text": "Melodiejahr\nÜber die Variable year_melody = \"YYYY\" erfassen wir, wann die Melodie geschrieben bzw. veröffentlicht wurde. Dabei sollte in die Anführungszeichen nur das Jahr geschrieben werden, wenn genauere Daten vorhanden sind, gerne dahinter auskommentiert. Also zum Beispiel: year_melody = \"2004\" % 01.01.2004.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#infotext",
    "href": "metadaten.html#infotext",
    "title": "Metadaten",
    "section": "Infotext",
    "text": "Infotext\nIn die Variable infotext = \"\" können Informationen zur Entstehungsgeschichte, von oder über den*die Autor*in etc. notiert werden (gerne mit Quellen!). Das darf gerne so ausführlich wie möglich geschehen, damit jedes Liederbuch-Team das ggf. auf dieser Grundlage für sich anpassen kann.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#übersetzung",
    "href": "metadaten.html#übersetzung",
    "title": "Metadaten",
    "section": "Übersetzung",
    "text": "Übersetzung\nÜbersetzungen von nicht-deutschsprachigen Texten, können über die Variable translation = \"\" erfasst werden. In der Ausgabe erzeugt dies im Infoteil (wo auch Autor*innen und die Songinfo landen) eine Zeile, die mit „Übersetzung: “ beginnt.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#aussprache",
    "href": "metadaten.html#aussprache",
    "title": "Metadaten",
    "section": "Aussprache",
    "text": "Aussprache",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "metadaten.html#quellen",
    "href": "metadaten.html#quellen",
    "title": "Metadaten",
    "section": "Quellen",
    "text": "Quellen\nFür uns ist es sehr wichtig zu wissen, wo unsere Notationen herkommen und auf welche Quellen wir uns stützen. Deswegen ist es obligatorisch, diese beim Setzen eines Liedes immer anzugeben. Beim Verweis auf Internetlinks, sollte die Seite in der Regel über das Internet Archive archiviert werden. Wie das geht, steht hier. Beim Verweis auf Liederbücher sollte die YAML-Datei sources.yml im data-Ordner des Liederpool-Repos genutzt werden, um auf die jeweilige ID zu verweisen. Damit sollen Liederbücher gut identifizierbar sein. Seitenangaben sind auch gerne gesehen. Wenn du selbst den Satz notiert hast, schreib deinen Namen dazu, zum Beispiel: „Satz von žuk“. Auch die Information, ob der Satz mit den Autor*innen abgestimmt wurde, ist relevant und somit anzugeben.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Metadaten"
    ]
  },
  {
    "objectID": "repostruktur.html",
    "href": "repostruktur.html",
    "title": "Struktur des Repositories",
    "section": "",
    "text": "Nun ein paar Worte zu der Struktur deines Repositories.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lieder-ordner",
    "href": "repostruktur.html#der-lieder-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lieder-Ordner",
    "text": "Der lieder-Ordner\nIm Ordner lieder befinden sich die Layout-Dateien deines Liederbuchs. Diese Dateien sind jeweils in einem Ordner, der denselben Namen hat wie die Dateien. Die identische Benennung ist sehr wichtig! Es empfiehlt sich, die Benennung von der Liederpool-Datei zu übernehmen.\nIm Ordner lieder befinden sich also Ordner, in denen die Layout-Dateien liegen. Im Ordner ueber_meiner_heimat_fruehling liegt also eine Datei namens ueber_meiner_heimat_fruehling.ly.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-liederbuecher-ordner",
    "href": "repostruktur.html#der-liederbuecher-ordner",
    "title": "Struktur des Repositories",
    "section": "Der liederbuecher-Ordner",
    "text": "Der liederbuecher-Ordner\nDer Ordner liederbuecher ist für deine Liederbücher da, die du anhand dieses Repos erstellst. Für jedes Liederbuch gibt es einen Ordner, in dem eine LilyPond-Datei liegt, mit der das Liederbuch erstellt wird.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-common-includes-ordner",
    "href": "repostruktur.html#der-lilypond-common-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-common-includes-Ordner",
    "text": "Der lilypond-common-includes-Ordner\nIn diesem Ordner liegen die LilyPond-Skripte, mit denen unser System arbeitet. Technisch gesehen handelt es sich dabei um ein Git-Submodul, also um ein eigenes Repository, das in dein Repository eingebunden ist.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-custom-includes-ordner",
    "href": "repostruktur.html#der-lilypond-custom-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-custom-includes-Ordner",
    "text": "Der lilypond-custom-includes-Ordner\nIn diesem Ordner kannst du, wie der Name schon andeutet, persönliche Änderungen am Layout vornehmen.\nIn der base_config.ly kannst du Änderungen, die den LAYOUT-Blog betreffen (das sind, grob gesagt, Layoutanpassungen bezüglich des Notensatzes), vornehmen. In der categories.ly kannst du die Kategorien deines Liederbuchs konfigurieren. Und in der custom_style_overrides.ly kannst du das Layout des Liederbuchs formatieren, also zum Beispiel die Schriftgröße, Schriftart und vieles mehr.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-song-includes-ordner",
    "href": "repostruktur.html#der-lilypond-song-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-song-includes-Ordner",
    "text": "Der lilypond-song-includes-Ordner\nIn diesem Ordner findest du die Liederpool-Dateien im Ordner liedbausteine. Außerdem findest du unsere Autor*innendatei unter data. Technisch gesehen handelt es sich auch hier um ein Git-Submodul.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#die-.gitignore-datei",
    "href": "repostruktur.html#die-.gitignore-datei",
    "title": "Struktur des Repositories",
    "section": "Die .gitignore-Datei",
    "text": "Die .gitignore-Datei\nDiese Datei verhindert, dass dir bestimmte Dateien, Dateiarten, Ordner, … im Git-Workingtree als bearbeitet angezeigt werden. Das verhindert, dass PDF-Dateien ständig neu ins Remote-Repo hochgeladen werden, weil sie sich ja bei jedem Kompilieren verändern. Deswegen kann man Git in dieser Datei sagen, welche Dateien man grundsätzlich nicht hochladen möchte.\nDeine .gitignore-Datei könnte zum Beispiel so aussehen:\n# ---&gt; Lilypond\n*.pdf\n*.ps\n*.midi\n*.mid\n*.log\n*.csv\n*~\nWenn du genauer wissen willst, was das bedeutet, dann wird das hier genauer erklärt.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "quellenlinks.html",
    "href": "quellenlinks.html",
    "title": "Einbinden von Links als Quelle",
    "section": "",
    "text": "In vielen Fällen ist es sinnvoll, z.B. in den Quellenangaben eines Liedes einen Link zu einer Webseite zu hinterlegen. Leider sind Webseiten nicht für die Ewigkeit und können jederzeit aus dem Netz verschwinden. Daher verlinken wir Webseiten nicht direkt, sondern über die „WayBackMachine“ des Internet Archive web.archive.org.\nDazu öffnet man das Archivierungstool des Internet Archive, fügt unter Save Page Now seinen Link ein und klickt auf Save Page. Der momentane Zustand der Webseite unter diesem Link wird nun durch das Internet Archive archiviert. Nach Abschluss des Vorgangs spuckt das Archivierungstool einen Link im Format „https://web.archive.org/web/XXXXXXXXXXXXXX/ursprüngliche URL“ aus. Diesen Link kopiert man und fügt ihn in die Quelldatei ein.\nDas muss nicht für Wikipedia-Links gemacht werden, da davon auszugehen ist, dass Wikipedia ähnlich lange überleben wird wie das Internet Archive.",
    "crumbs": [
      "Doku",
      "Liedersetzen-Prozess",
      "Einbinden von Links als Quelle"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html",
    "href": "branch_und_pullrequest.html",
    "title": "Branch und Pull-Request",
    "section": "",
    "text": "Du hast dein erstes Lied für den Liederpool gesetzt, wie toll! Klar, das war nur ein Beispiel, und das Lied befindet sich schon im Liederpool, aber trotzdem denken wir den Prozess mal ganz zu Ende. Dann ist deine nächste Station, einen Branch im Git zu erstellen. Was Branches genau sind, erfährst du detaillierter in unsrer Doku, hier fassen wir uns möglichst kurz.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html#in-einen-branch-pushen",
    "href": "branch_und_pullrequest.html#in-einen-branch-pushen",
    "title": "Branch und Pull-Request",
    "section": "In einen Branch pushen",
    "text": "In einen Branch pushen\n\n\n1: Das ist dein Workingtree. 2: Da siehst du dein Liederbuch-Repository mit den beiden Submodulen lilypond-common-includes und lilypond-song-includes. 3: Das ist die Branch-Übersicht, da siehst du, dass du dich gerade im main-Branch befindest. 4: Hier hast du eine Übersicht aller geänderter Dateien. Wenn du diese Committen willst, wählst du einfach alle auf und klickst dann Rechtsklick und wählst Commit.\n\n\n\n\nBranch erstellen\nDu gehst in deine Git-GUI und wählst dich ins Submodul lilypond-song-includes. Im Moment solltest du dich im main-Branch befinden. Eine Übersicht über die Branches wird dir vermutlich in irgendeiner Ecke der Benutzeroberfläche dargestellt. In SmartGit beispielsweise befindet sich diese Übersicht unten links.\nJetzt musst du einen neuen lokalen Branch erstellen. Das funktioniert in jeder Git-GUI anders, deswegen lass dir gerne von einer Google-Suche oder ChatGPT oder uns helfen. In SmartGit klickst du mit einem Rechtsklick auf „Local Branches“ und wählst dann „Add Branch“. Im Dialogfenster kannst du dem Branch einen Namen geben. Benenne ihn nach dem Lied. Bitte verwende keine Leer- oder Sonderzeichen. Klicke dann auf „Add Branch“.\n\n\nDen neuen Branch auschecken\nJetzt musst du den neuen Branch, den du gerade erstellt hast, auschecken. In SmartGit klickst du dafür einfach doppelt auf den Namen deines Branches, der nun unter „Local Branches“ aufgelistet sein sollte.\n\n\nLied committen\nIn deinem „Working Tree“ siehst du, dass du Änderungen getätigt hast – das ist das neue Lied, was du gerade gesetzt hast. Diese Änderungen musst du nun „committen“. Wie das geht, fragst du am besten Google, ChatGPT oder holst dir bei uns Hilfe. In SmartGit werden dir die Änderungen in einem Kasten auf der rechten Seite angezeigt. Klicke mit einem Rechtsklick auf die entsprechende Datei und wähle „Commit“ (alternativer Shortcut: Strg + K). Als Commit-Message, die nun im Dialogfenster gefordert wird, bietet sich der Name des Liedes an. Falls das Lied schon im Liederpool war, könntest du noch dahinter schreiben, was du an dem Lied verändert hast. Klicke auf „Commit“.\n\n\nBranch pushen\nJetzt hast du einen Branch erstellt, hast ihn ausgecheckt und das Lied in den Branch committed. Zuletzt musst du den Branch auf das Remote-Repo pushen. Dazu gibt es einen Knopf, der vermutlich oben in einer Menüleiste zu finden ist. In SmartGit befindet er sich oben links.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html#pull-request-erstellen",
    "href": "branch_und_pullrequest.html#pull-request-erstellen",
    "title": "Branch und Pull-Request",
    "section": "Pull-Request erstellen",
    "text": "Pull-Request erstellen\nNun gehst du in das Song-Includes-Repository auf unserem Git-Server. Dort kannst du nun einen Pull-Request erstellen.\n\n\n\n\n\n\nHinweis\n\n\n\nEin Pull-Request ist die Anfrage, ob ein Branch mit dem main-Branch zusammengeführt wird. Das ist Teil unseres Review-Systems, das dafür sorgen soll, dass die Qualität des Bestandes nicht gefährdet wird, wenn viele Menschen auf den Liederpool zugreifen – die Gefahr des Verschlimmbesserns wäre sehr hoch. Deshalb kannst du nicht einfach auf den main-Branch pushen, sondern es muss ein neuer Branch (also eine Abzweigung) erstellt werden, auf die du dann pushst.\nDann kannst du eine Anfrage stellen, ob deine Änderungen ok sind. Die wird dann bearbeitet, in dem mindestens eine andere Person nochmal über deine Änderungen drüberschaut. Zuletzt erfolgt dann die Zusammenführung mit dem main-Branch.\nDieses Vier-Augen-Prinzip führt auch dazu, dass Fehler von Anfang an verhindert werden können.\n\n\nKlicke im Song-Includes-Repository auf Pull-Requests und dort dann auf Neuer Pull-Request. Jetzt wirst du nach einem Branch gefragt. Klicke auf das rechte Dropdown-Menü. Dort sind die alle verfügbaren Branches aufgelistet, sortiert nach dem letzten Push-Zeitpunkt. Dein Branch ist also vermutlich ganz oben. Wähle deinen Branch aus und klicke: Neuer Pull-Request.\nNun solltest du dem Pull-Request einen Namen geben. Der Name des Liedes bietet sich dafür an. Außerdem solltest du die Checkliste in der Beschreibung ausfüllen. Das machst du, indem du das Leerzeichen mit einem x ersetzt: aus [ ] mach [x]. Bitte fülle die Kästchen nur aus, wenn sie auch wirklich zutreffen. Zuletzt klicke auf Pull-Request erstellen. Fertig!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html",
    "href": "beispiel_liedersetzen.html",
    "title": "Beispiel Liedersetzen",
    "section": "",
    "text": "Damit du möglichst einfach unser System lernst, haben wir dir ein Lied rausgesucht, das wir nun zusammen setzen. Dabei gehen wir davon aus, dass du das Lied erstmal für unseren Liederpool setzt (auch wenn das Beispiel da natürlich schon drin ist). Alles weitere an späterer Stelle.\nDie Vorlagendatei für den Liederpool sieht so aus:\nDurch die werden wir uns jetzt Stück für Stück durcharbeiten.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#abspeichern-der-lieddatei",
    "href": "beispiel_liedersetzen.html#abspeichern-der-lieddatei",
    "title": "Beispiel Liedersetzen",
    "section": "Abspeichern der Lieddatei",
    "text": "Abspeichern der Lieddatei\nAls erstes speicherst du dir die Vorlagendatei neu ab. Dazu drückst du Strg + Umschalt + S oder wählst im Menü Datei -&gt; Save -&gt; Speichern unter. Dort bleibst du im selben Ordner, also im Ordner liedbausteine und speicherst die Datei im Schema lied_anfang_(lied_titel).ly ab. In unserem Falle wäre das also ueber_meiner_heimat_fruehling.ly. Wie du siehst, vermeiden wir Umlaute. Für ein anderes Lied, bei dem Titel und Liedanfang nicht identisch sind, sähe das dann zum Beispiel so aus: im_kreis_ihrer_enkel_(drei_rote_pfiffe).ly.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#die-metadaten-zum-lied",
    "href": "beispiel_liedersetzen.html#die-metadaten-zum-lied",
    "title": "Beispiel Liedersetzen",
    "section": "Die Metadaten zum Lied",
    "text": "Die Metadaten zum Lied\nNun wenden wir uns dem Inhalt zu. Im ersten Teil findest die Metadaten zum Lied.\n%midiQuarterNoteSpeed =\n\nbasicSongInfo = \\header {\n  title = \"Titel\"\n  starttext = \"Liedanfang\"\n  alttitle = \"Alternativtitle\"\n  authors = #'(\n    (\"\"))\n  year_text = \"\"\n  year_melody = \"\"\n  infotext = \"\"\n  source = \"\"\n}\n\nGeschwindigkeit\nDie erste Zeile ist die Geschwindigkeit in Beats per Minute (bpm) auf Viertel gerechnet. Das beeinflusst zum Beispiel die MIDI-Ausgabe. Da wir nicht wissen, wie schnell „Über meiner Heimat Frühling“ gespielt gehört (weil alle das unterschiedlich singen und wir keinen Zugriff auf ein Original haben), lassen wir das einfach auskommentiert.\n\n\n\n\n\n\nTipp\n\n\n\nAuskommentieren bedeutet, dass der Code, der auskommentiert wurde, nicht ausgeführt wird, also zu keinem Output führt. Man könnte auch sagen, er ist in dem Moment irrelevant.\nAuskommentieren in LilyPond funktioniert mit dem Prozentzeichen %. Das gilt dann immer für alles, was danach kommt in der jeweiligen Zeile. Beispiel:\nnicht auskommentiert % auskommentiert\nnicht auskommentiert\nMan kann auch über mehrere Zeilen hinweg auskommentieren. Das sähe dann so aus:\nnicht auskommentiert %{ auskommentiert\nauskommentiert\nauskommentiert %} nicht auskommentiert\n\n\n\n\nTitel\nAls title geben wir den Titel des Liedes an, also title = \"Über meiner Heimat Frühling\". Mit starttext erfassen wir den Liedanfang, sofern er sich vom Titel unterscheidet. Das ist wichtig für das Inhaltsverzeichnis des zukünftigen Liederbuchs. Mit alttitle erfassen wir mögliche alternative Titel. Manche kennen das Lied beispielsweise auch unter „Tusks Lied“ und würden es unter diesem Namen im Inhaltsverzeichnis suchen. Deswegen schreiben wir alttitle = \"Tusks Lied\". Es gibt sechs verschiedene mögliche Alternativtitel. Für weitere einfach ein alt vorne dranhängen, z.B. altalttitle, altaltalttitle und so weiter.\n\n\nAutor*innen\nUnter authors werden die Autor*innen des Liedes erfasst. Dazu gibt es einiges zu sagen. Wir erfassen die Autor*innen in einem separaten Dokument, das unter dem Pfad lilypond-song-includes/data/authors.yml in deinem Repo zu finden ist. Ausführlich ist das in unserer Doku erklärt. Kurz gesagt, nutzen wir in der LilyPond-Datei eine Autor*innen-ID, die jede*n Autor*in eindeutig identifiziert und speichern die Informationen in einer YAML-Datei. Das hat den Vorteil, dass Fehler nur an einer Stelle korrigiert werden müssen und es mehr Einheitlichkeit gibt. Was in der LilyPond-Datei alles angezeigt wird, ist natürlich veränderbar. Die IDs sind in der Regel der Fahrtennahme, zum Beispiel tusk, oder der Name nach dem Schema VornameNachname zum Beispiel JohannWolfgangvonGoethe. Dabei verwenden wir keine Umlaute. In unserer YAML-Datei gibt es den Eintrag tusk schon, das heißt, wir müssen nur eintragen:\nauthors = #'(\n  (\"tusk\" text))\nTusk hat den Text zu diesem Lied gemacht, deswegen schreiben wir text, die Melodie basiert auf einem Kossakenlied. Diese Information schreiben wir in den infotext. Normalerweise, bei eindeutigen Autor*innen wird die natürlich auch wie oben erfasst.\n\n\nSchaffensjahr\nDer Text entstand 1933, wir schreiben also year_text = \"1933\", das Jahr der Melodie ist unbekannt, deswegen lassen wir das frei year_melody = \"\".\n\n\nInformationen zum Lied\nHier können Informationen zum Lied erfasst werden, zum Beispiel wie in unserem Fall: infotext = \"Die Melodie basiert auf dem russischen Kuban-Kossakenlied Bielolitsa, Krugralitsa.\".\n\n\nQuelle\nÄußerst wichtig, um auch in zehn Jahren noch ungefähr nachvollziehen zu können, woher Notensatz und Co. herkamen, ist die Quellenangabe. In diesem Falle beziehen wir uns auf den Codex Patomomomensis. Deswegen schreiben wir: source = \"Codex\".",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#global-variable",
    "href": "beispiel_liedersetzen.html#global-variable",
    "title": "Beispiel Liedersetzen",
    "section": "global-Variable",
    "text": "global-Variable\nglobal = {\n  %Takt\n  \\time 4/4\n  %Tonart\n  \\key c \\major\n}\nIn dieser Variable erfassen wir generelle musikalische Informationen zum Lied. Das sind:\n\nTaktart\n…die wir mit \\time 4/4 angeben. Und…\n\n\n\n\n\n\nHinweis\n\n\n\nWie du dir vielleicht schon gedacht hast, würde ein 6/8-Takt dann so aussehen: \\time 6/8. Probier es doch mal aus!\n\n\n\n\nTonart\n…die wir mit \\key d \\minor angeben.\n\n\n\n\n\n\nHinweis\n\n\n\nAuch hier ist die Funktion recht gut erschließbar. Auf \\key folgt der Grundton (Achtung, immer Kleinbuchstaben) und dann die Option Dur (\\major) und Moll (\\minor).",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#firstverse-variable",
    "href": "beispiel_liedersetzen.html#firstverse-variable",
    "title": "Beispiel Liedersetzen",
    "section": "firstVerse-Variable",
    "text": "firstVerse-Variable\nfirstVerse = \\lyricmode {\n  #(stanza 1)\n  Ly -- rics\n}\n\nLyrics / Liedtext\nDa kannst du jetzt an die Stelle, wo gerade der Platzhalter Ly -- rics steht, den Liedtext des Liedes reintippen oder -kopieren. Als nächstes müssen die (gesungenen) Silben mit zwei Minus-Zeichen getrennt werden. Aus „Über“ wird dann Ü -- ber und aus „Heimat“ Hei -- mat und immer so weiter. Zum Glück gibt es ein hilfreiches Tool in Frescobaldi, wenn du im Menü auf Werkzeuge -&gt; Musical Transformations -&gt; Liedtext -&gt; Trennungsstriche in Text einfügen klickst – oder kurz Strg + L (vorher musst du den zu trennenden Text auswählen). Im Dialogfenster wählst du die Sprache aus und Frescobaldi macht das dann für dich. Wichtig ist, dass du nochmal drüber schaust, denn ganz fehlerfrei funktioniert die automatische Silbentrennung leider nicht.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#reflyrics-variable",
    "href": "beispiel_liedersetzen.html#reflyrics-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refLyrics-Variable",
    "text": "refLyrics-Variable\nDiese Variable ist für den Text des Refrains vorgesehen – aber den gibt es bei diesem Lied gar nicht. Deswegen kann die gelöscht werden.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#weitere-verse-variablen",
    "href": "beispiel_liedersetzen.html#weitere-verse-variablen",
    "title": "Beispiel Liedersetzen",
    "section": "Weitere Verse-Variablen",
    "text": "Weitere Verse-Variablen\nDa wir ja noch vier weitere Strophen haben, müssen wir uns noch ein paar weitere Variablen erstellen, in die deren Text reinkommt. Das passiert nach dem gleichen Schema wie für den firstVerse, nur dass wir die Zahlen jeweils anpassen, also:\nsecondVerse = \\lyricmode {\n  #(stanza 2)\n  Ly -- rics\n}\n\nthirdVerse = \\lyricmode {\n  #(stanza 3)\n  Ly -- rics\n}\n\nfourthVerse = \\lyricmode {\n  #(stanza 4)\n  Ly -- rics\n}\nDa, wo jetzt noch Ly -- rics steht, muss natürlich der Liedtext hin.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#firstvoice-variable",
    "href": "beispiel_liedersetzen.html#firstvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "firstVoice-Variable",
    "text": "firstVoice-Variable\nJetzt geht’s ans Eingemachte, nämlich die Noten! Da, wo jetzt noch das c steht, schreibst du die Noten des Liedes rein – für jeden Takt eine Zeile. Das sieht für den ersten Takt so aus:\nfirstVoice = \\relative c' {\n  f4 a c a\n}\n\nNotenbezeichnungen und Notenwerte\nDie Kleinbuchstaben sind jeweils die deutschen Notenbezeichnungen. Die darauffolgende Zahl ist die Notenlänge. f4 bedeutet also, dass das f eine Viertelnote ist. Bei einer Halben Noten würde man f2 schreiben, bei einer Ganzen f1, bei einer Achtel f8 und so weiter. Hat die darauffolgende Note denselben Notenwert, muss der nicht nochmal dazugeschrieben werden. f4 a bedeutet also eine Viertelnote f und eine Viertelnote a.\n\n\nLegato-Bogen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n}\nSchauen wir uns den zweiten Takt an, stellen wir fest, dass da auch Klammern drin zu finden sind. Auf diese Weise werden Legato-Bögen markiert. Im obigen Beispiel heißt g8 (a), dass vom g zum a gebunden wird. Bei mehr Tönen könnte das dann so aussehen: g8 (a g). Der Legato-Bogen geht hier vom g zum g.\n\n\nParallele Töne und Tonhöhen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n  f a c a\n  g a8 (b) a4 g\n  d f a f\n  e8 (f) e (d) e4 &lt;e a,&gt;\n}\nWenn zwei Töne gleichzeitig erklingen sollen (und es sich nicht um eine ganze Stimme handelt), werden beide Töne von Krokodilsklammern gerahmt: &lt;e a,&gt; bedeutet, dass das e und das a gleichzeitig (also übereinander) notiert werden.\nTonhöhen anzugeben, ist meist gar nicht notwendig, da LilyPond von den naheliegensten Tönen ausgeht. Bei e f geht LilyPond also davon aus, dass der Tonsprung nach oben stattfindet, weil der „Weg“ kürzer ist als nach unten (zum tiefen f). Bei größeren Tonsprüngen helfen die Zeichen ' (englisches Apostroph) für eine Oktave nach oben und , (Komma) für eine Oktave nach unten. Bei zwei Oktaven natürlich dann zweimal und so weiter.\n\n\nPausen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n  f a c a\n  g a8 (b) a4 g\n  d f a f\n  e8 (f) e (d) e4 &lt;e a,&gt;\n  d8 (e) f (g) a4 a8 (f)\n  d2 d4 r\n}\nZuletzt benötigen wir noch eine Pause zum Abschluss. Pausen werden mit r (engl. rest = Pause) bezeichnet. Die Angabe des Pausenwertes erfolgt analog zu den Notenwerten.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#refvoice-variable",
    "href": "beispiel_liedersetzen.html#refvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refVoice-Variable",
    "text": "refVoice-Variable\nDie brauchen wir nicht, denn wir haben keinen Refrain. Sie kann einfach gelöscht werden.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#melodyvoice-variable",
    "href": "beispiel_liedersetzen.html#melodyvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "melodyVoice-Variable",
    "text": "melodyVoice-Variable\nmelodyVoice = \\relative c' {\n  \\global\n  \\firstVoice\n  \\refVoice\n  \\bar \"|.\"\n}\nIn dieser Variable bauen wir die Melodiestimme zusammen. Dazu müssen wir die Zeile mit \\refVoice löschen, da wir keinen Refrain haben. Wie du siehst, fügen wir da also die oben definierten Variablen ein (\\global und \\firstVoice) und ergänzen noch einen Schlussstrich (\\bar \"|.\", bar = engl. für Taktstrich).",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#versechords-variable",
    "href": "beispiel_liedersetzen.html#versechords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "verseChords-Variable",
    "text": "verseChords-Variable\nverseChords = \\chordmode {\n  c\n}\n\nAkkorde\nIn diese Variable fügen wir anstatt des Platzhalters c unsere Akkorde ein. Akkorde funktionieren sehr ähnlich wie Noten. Für dieses Lied brauchen wir Dur- und Moll-Akkorde. Dur-Akkorde sind sehr einfach (f), Mollakkorde eigentlich auch (f:m). Die Länge funktioniert wie bei den Noten und Pausen auch.\nverseChords = \\chordmode {\n  f1 c f c d:m a d2:m a d1:m\n}\nIn unserem Lied wird also ein F-Dur einen Takt lang gesetzt, danach folgt einen Takt C-Dur, dann wieder F-Dur, C-Dur, dann D-Moll, dann A-Dur. Danach folgt zwei Schläge D-Moll, A-Dur und wieder vier Schläge D-Moll.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#refchords-variable",
    "href": "beispiel_liedersetzen.html#refchords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refChords-Variable",
    "text": "refChords-Variable\nDa wir keinen Refrain haben, kannst du diese Variable einfach löschen.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#songchords-variable",
    "href": "beispiel_liedersetzen.html#songchords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "songChords-Variable",
    "text": "songChords-Variable\nsongChords = \\chords {\n  \\verseChords \\refChords\n}\nDie \\refChords musst du rauslöschen, da wir die ja nicht haben. Ansonsten werden hier einfach nur die Akkorde zusammengesetzt.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#der-music-teil",
    "href": "beispiel_liedersetzen.html#der-music-teil",
    "title": "Beispiel Liedersetzen",
    "section": "Der MUSIC-Teil",
    "text": "Der MUSIC-Teil\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse \\refLyrics }\n      &gt;&gt;\n  &gt;&gt;\n}\nHier wird unser Lied „zusammengebaut“. Wie du siehst, werden die Akkorde eingebunden (songChords), die Melodiestimme (melodyVoice) und der Liedtext (firstVerse). Bei dem musst du noch die \\refLyrics löschen, da die in unserem Falle nicht vorkommen.\nFür unser System ist es nun notwendig, dass der Text für alle Strophen an der korrekten Stelle unter den Noten steht. Deswegen musst du nun für jede der Text-Variablen (secondVerse, thirdVerse, fourthVerse) eine addlyrics-Zeile einfügen, das sieht dann so aus:\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\secondVerse }\n        \\addlyrics { \\thirdVerse }\n        \\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\nJetzt kannst du auf jeden Fall schonmal kompilieren, also auf die Seerose klicken oder Strg + M drücken und schauen, was passiert. Wenn alles klappt, müsstest du jetzt das Liedblatt fast fertig vor dir sehen.\nÜberprüfe einmal, ob der Text sich immer an der richtigen Stelle unter den Noten befindet.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#der-text-teil",
    "href": "beispiel_liedersetzen.html#der-text-teil",
    "title": "Beispiel Liedersetzen",
    "section": "Der TEXT-Teil",
    "text": "Der TEXT-Teil\nverse-breaks = {\n  s1 \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n  }\n}\nDen auskommentierten Teil kannst du löschen, wir brauchen ihn für dieses Lied nicht. Hast du das gemacht, haben wir oben zu sehenden Code. Was da im Hintergrund passiert, ist, dass eine unsichtbare Stimme und Akkorde erzeugt werden (firstVoice und songChords), zu der die Text-Variablen zugeordnet werden. Die Umbrüche erfolgen dann mit der Variable verse-breaks (oben im Code). Was du jetzt machen musst: Die Takte zählen, bei denen du umbrechen möchtest. Dabei ist es sinnvoll, sich an der Versstruktur zu orientieren. Wir wollen also immer nach zwei Takten umbrechen. Dafür schreiben wir:\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\nDas s steht quasi für „aussetzen“. Wenn du jetzt kompilierst, solltest du schon ein gutes Resultat sehen.\nZuletzt ergänzen wir noch die anderen Strophen nach demselben Schema, das bedeutet:\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\nUnd fertig ist dein erstes Liederpool-Lied!\nDas muss noch gar nicht schön aussehen, denn das kommt an anderer Stelle…",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "vorbereitung.html",
    "href": "vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "Zuerst richten wir alle Programme ein, die du brauchst. Du benötigst als erstes LilyPond und Frescobaldi. Dann Git und dann einen Account bei dem Git-Server von tux.\nWir erklären dir jetzt Schritt für Schritt, was du dafür tun musst.",
    "crumbs": [
      "Einführung",
      "Vorbereitung"
    ]
  }
]