[
  {
    "objectID": "frescobaldi_einrichten.html",
    "href": "frescobaldi_einrichten.html",
    "title": "Einrichtung von Frescobaldi",
    "section": "",
    "text": "Frescobaldi ist eine sogenannte „Integrierte Entwicklungsumgebung“ (IDE). Das bedeutet, sie schafft ein angenehmes Arbeitsumfeld, wenn du mit LilyPond arbeitest. LilyPond selbst ist nämlich quasi nur die „Sprache“ in der du Noten setzt und das Programm, womit du sie auswertest („setzt“). Frescobaldi vereint dann unter anderem einen PDF-Viewer, einen MIDI-Player und noch ein paar andere nützliche Werkzeuge.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "frescobaldi_einrichten.html#frescobaldi-installieren",
    "href": "frescobaldi_einrichten.html#frescobaldi-installieren",
    "title": "Einrichtung von Frescobaldi",
    "section": "Frescobaldi installieren",
    "text": "Frescobaldi installieren\n\nGehe auf https://frescobaldi.org/ und wähle unter Download die neueste Version für dein Betriebssystem. In eigentlich allen Linux-Distributionen sollte Frescobaldi zudem in der Paketverwaltung zu finden sein.\nDu wirst auf eine Github-Seite weitergeleitet, wo du unter Assets die richtige Version auswählen kannst. Für Windows wähle *.exe, für Linux *.tar.gz und für MacOS .dmg.\nLade die Datei herunter und führe sie aus.\nFolge dem Installationsprozess.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "frescobaldi_einrichten.html#beim-ersten-ausführen",
    "href": "frescobaldi_einrichten.html#beim-ersten-ausführen",
    "title": "Einrichtung von Frescobaldi",
    "section": "Beim ersten Ausführen",
    "text": "Beim ersten Ausführen\n\nGehe in die Einstellungen.\nUnter Lilypond-Einstellungen musst du die korrekte Lilypond-Version einstellen. Gehe dazu auf Hinzufügen und wähle dann im Explorerfenster die *.exe-Datei aus. Dazu musst du in den Ordner gehen, in dem du den LilyPond-Ordner eben abgelegt hast (siehe oben), und die Datei bin/lilypond.exe auswählen.\nAußerdem ist die Einstellung Dokument speichern, wenn möglich unter Lilypond-Einstellungen und dort Lilypond starten sinnvoll, damit man gleich kompilieren kann, ohne dauernd speichern zu müssen.\nEine weitere sinnvolle Einstellung ist unter Allgemeine Einstellungen im Reiter Saving die Einstellung Leerzeichen am Zeilenende entfernen. Es macht Sinn, dort einen Haken zu setzen.\nFalls du Linux nutzt, ist es wichtig, dass du jeweils vorm Starten von Frescobaldi einen MIDI-Player startest. Was du dafür tun musst, ist in diesem GitHub-Issue erklärt.\nDas war’s schon. Fertig!",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Frescobaldi"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html",
    "href": "beispiel_liedersetzen.html",
    "title": "Beispiel Liedersetzen",
    "section": "",
    "text": "Damit du möglichst einfach unser System lernst, haben wir dir ein Lied rausgesucht, das wir nun zusammen setzen. Dabei gehen wir davon aus, dass du das Lied erstmal für unseren Liederpool setzt (auch wenn das Beispiel da natürlich schon drin ist). Alles weitere an späterer Stelle.\nDie Vorlagendatei für den Liederpool sieht so aus:\nDurch die werden wir uns jetzt Stück für Stück durcharbeiten.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#abspeichern-der-lieddatei",
    "href": "beispiel_liedersetzen.html#abspeichern-der-lieddatei",
    "title": "Beispiel Liedersetzen",
    "section": "Abspeichern der Lieddatei",
    "text": "Abspeichern der Lieddatei\nAls erstes speicherst du dir die Vorlagendatei neu ab. Dazu drückst du Strg + Umschalt + S oder wählst im Menü Datei -&gt; Save -&gt; Speichern unter. Dort bleibst du im selben Ordner, also im Ordner liedbausteine und speicherst die Datei im Schema lied_anfang_(lied_titel).ly ab. In unserem Falle wäre das also ueber_meiner_heimat_fruehling.ly. Wie du siehst, vermeiden wir Umlaute. Für ein anderes Lied, bei dem Titel und Liedanfang nicht identisch sind, sähe das dann zum Beispiel so aus: im_kreis_ihrer_enkel_(drei_rote_pfiffe).ly.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#die-metadaten-zum-lied",
    "href": "beispiel_liedersetzen.html#die-metadaten-zum-lied",
    "title": "Beispiel Liedersetzen",
    "section": "Die Metadaten zum Lied",
    "text": "Die Metadaten zum Lied\nNun wenden wir uns dem Inhalt zu. Im ersten Teil findest die Metadaten zum Lied.\n%midiQuarterNoteSpeed =\n\nbasicSongInfo = \\header {\n  title = \"Titel\"\n  starttext = \"Liedanfang\"\n  alttitle = \"Alternativtitle\"\n  authors = #'(\n    (\"\"))\n  year_text = \"\"\n  year_melody = \"\"\n  infotext = \"\"\n  source = \"\"\n}\n\nGeschwindigkeit\nDie erste Zeile ist die Geschwindigkeit in Beats per Minute (bpm) auf Viertel gerechnet. Das beeinflusst zum Beispiel die MIDI-Ausgabe. Da wir nicht wissen, wie schnell „Über meiner Heimat Frühling“ gespielt gehört (weil alle das unterschiedlich singen und wir keinen Zugriff auf ein Original haben), lassen wir das einfach auskommentiert.\n\n\n\n\n\n\nTip\n\n\n\nAuskommentieren bedeutet, dass der Code, der auskommentiert wurde, nicht ausgeführt wird, also zu keinem Output führt. Man könnte auch sagen, er ist in dem Moment irrelevant.\nAuskommentieren in LilyPond funktioniert mit dem Prozentzeichen %. Das gilt dann immer für alles, was danach kommt in der jeweiligen Zeile. Beispiel:\nnicht auskommentiert % auskommentiert\nnicht auskommentiert\nMan kann auch über mehrere Zeilen hinweg auskommentieren. Das sähe dann so aus:\nnicht auskommentiert %{ auskommentiert\nauskommentiert\nauskommentiert %} nicht auskommentiert\n\n\n\n\nTitel\nAls title geben wir den Titel des Liedes an, also title = \"Über meiner Heimat Frühling\". Mit starttext erfassen wir den Liedanfang, sofern er sich vom Titel unterscheidet. Das ist wichtig für das Inhaltsverzeichnis des zukünftigen Liederbuchs. Mit alttitle erfassen wir mögliche alternative Titel. Manche kennen das Lied beispielsweise auch unter „Tusks Lied“ und würden es unter diesem Namen im Inhaltsverzeichnis suchen. Deswegen schreiben wir alttitle = \"Tusks Lied\". Es gibt sechs verschiedene mögliche Alternativtitel. Für weitere einfach ein alt vorne dranhängen, z.B. altalttitle, altaltalttitle und so weiter.\n\n\nAutor*innen\nUnter authors werden die Autor*innen des Liedes erfasst. Dazu gibt es einiges zu sagen. Wir erfassen die Autor*innen in einem separaten Dokument, das unter dem Pfad lilypond-song-includes/data/authors.yml in deinem Repo zu finden ist. Ausführlich ist das in unserer Doku erklärt. Kurz gesagt, nutzen wir in der LilyPond-Datei eine Autor*innen-ID, die jede*n Autor*in eindeutig identifiziert und speichern die Informationen in einer YAML-Datei. Das hat den Vorteil, dass Fehler nur an einer Stelle korrigiert werden müssen und es mehr Einheitlichkeit gibt. Was in der LilyPond-Datei alles angezeigt wird, ist natürlich veränderbar. Die IDs sind in der Regel der Fahrtennahme, zum Beispiel tusk, oder der Name nach dem Schema VornameNachname zum Beispiel JohannWolfgangvonGoethe. Dabei verwenden wir keine Umlaute. In unserer YAML-Datei gibt es den Eintrag tusk schon, das heißt, wir müssen nur eintragen:\nauthors = #'(\n  (\"tusk\" text))\nTusk hat den Text zu diesem Lied gemacht, deswegen schreiben wir text, die Melodie basiert auf einem Kossakenlied. Diese Information schreiben wir in den infotext. Normalerweise, bei eindeutigen Autor*innen wird die natürlich auch wie oben erfasst.\n\n\nSchaffensjahr\nDer Text entstand 1933, wir schreiben also year_text = \"1933\", das Jahr der Melodie ist unbekannt, deswegen lassen wir das frei year_melody = \"\".\n\n\nInformationen zum Lied\nHier können Informationen zum Lied erfasst werden, zum Beispiel wie in unserem Fall: infotext = \"Die Melodie basiert auf dem russischen Kuban-Kossakenlied Bielolitsa, Krugralitsa.\".\n\n\nQuelle\nÄußerst wichtig, um auch in zehn Jahren noch ungefähr nachvollziehen zu können, woher Notensatz und Co. herkamen, ist die Quellenangabe. In diesem Falle beziehen wir uns auf den Codex Patomomomensis. Deswegen schreiben wir: source = \"Codex\".",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#global-variable",
    "href": "beispiel_liedersetzen.html#global-variable",
    "title": "Beispiel Liedersetzen",
    "section": "global-Variable",
    "text": "global-Variable\nglobal = {\n  %Takt\n  \\time 4/4\n  %Tonart\n  \\key c \\major\n}\nIn dieser Variable erfassen wir generelle musikalische Informationen zum Lied. Das sind:\n\nTaktart\n…die wir mit \\time 4/4 angeben. Und…\n\n\n\n\n\n\nNote\n\n\n\nWie du dir vielleicht schon gedacht hast, würde ein 6/8-Takt dann so aussehen: \\time 6/8. Probier es doch mal aus!\n\n\n\n\nTonart\n…die wir mit \\key d \\minor angeben.\n\n\n\n\n\n\nNote\n\n\n\nAuch hier ist die Funktion recht gut erschließbar. Auf \\key folgt der Grundton (Achtung, immer Kleinbuchstaben) und dann die Option Dur (\\major) und Moll (\\minor).",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#firstverse-variable",
    "href": "beispiel_liedersetzen.html#firstverse-variable",
    "title": "Beispiel Liedersetzen",
    "section": "firstVerse-Variable",
    "text": "firstVerse-Variable\nfirstVerse = \\lyricmode {\n  #(stanza 1)\n  Ly -- rics\n}\n\nLyrics / Liedtext\nDa kannst du jetzt an die Stelle, wo gerade der Platzhalter Ly -- rics steht, den Liedtext des Liedes reintippen oder -kopieren. Als nächstes müssen die (gesungenen) Silben mit zwei Minus-Zeichen getrennt werden. Aus „Über“ wird dann Ü -- ber und aus „Heimat“ Hei -- mat und immer so weiter. Zum Glück gibt es ein hilfreiches Tool in Frescobaldi, wenn du im Menü auf Werkzeuge -&gt; Musical Transformations -&gt; Liedtext -&gt; Trennungsstriche in Text einfügen klickst – oder kurz Strg + L (vorher musst du den zu trennenden Text auswählen). Im Dialogfenster wählst du die Sprache aus und Frescobaldi macht das dann für dich. Wichtig ist, dass du nochmal drüber schaust, denn ganz fehlerfrei funktioniert die automatische Silbentrennung leider nicht.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#reflyrics-variable",
    "href": "beispiel_liedersetzen.html#reflyrics-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refLyrics-Variable",
    "text": "refLyrics-Variable\nDiese Variable ist für den Text des Refrains vorgesehen – aber den gibt es bei diesem Lied gar nicht. Deswegen kann die gelöscht werden.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#weitere-verse-variablen",
    "href": "beispiel_liedersetzen.html#weitere-verse-variablen",
    "title": "Beispiel Liedersetzen",
    "section": "Weitere Verse-Variablen",
    "text": "Weitere Verse-Variablen\nDa wir ja noch vier weitere Strophen haben, müssen wir uns noch ein paar weitere Variablen erstellen, in die deren Text reinkommt. Das passiert nach dem gleichen Schema wie für den firstVerse, nur dass wir die Zahlen jeweils anpassen, also:\nsecondVerse = \\lyricmode {\n  #(stanza 2)\n  Ly -- rics\n}\n\nthirdVerse = \\lyricmode {\n  #(stanza 3)\n  Ly -- rics\n}\n\nfourthVerse = \\lyricmode {\n  #(stanza 4)\n  Ly -- rics\n}\nDa, wo jetzt noch Ly -- rics steht, muss natürlich der Liedtext hin.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#firstvoice-variable",
    "href": "beispiel_liedersetzen.html#firstvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "firstVoice-Variable",
    "text": "firstVoice-Variable\nJetzt geht’s ans Eingemachte, nämlich die Noten! Da, wo jetzt noch das c steht, schreibst du die Noten des Liedes rein – für jeden Takt eine Zeile. Das sieht für den ersten Takt so aus:\nfirstVoice = \\relative c' {\n  f4 a c a\n}\n\nNotenbezeichnungen und Notenwerte\nDie Kleinbuchstaben sind jeweils die deutschen Notenbezeichnungen. Die darauffolgende Zahl ist die Notenlänge. f4 bedeutet also, dass das f eine Viertelnote ist. Bei einer Halben Noten würde man f2 schreiben, bei einer Ganzen f1, bei einer Achtel f8 und so weiter. Hat die darauffolgende Note denselben Notenwert, muss der nicht nochmal dazugeschrieben werden. f4 a bedeutet also eine Viertelnote f und eine Viertelnote a.\n\n\nLegato-Bogen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n}\nSchauen wir uns den zweiten Takt an, stellen wir fest, dass da auch Klammern drin zu finden sind. Auf diese Weise werden Legato-Bögen markiert. Im obigen Beispiel heißt g8 (a), dass vom g zum a gebunden wird. Bei mehr Tönen könnte das dann so aussehen: g8 (a g). Der Legato-Bogen geht hier vom g zum g.\n\n\nParallele Töne und Tonhöhen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n  f a c a\n  g a8 (b) a4 g\n  d f a f\n  e8 (f) e (d) e4 &lt;e a,&gt;\n}\nWenn zwei Töne gleichzeitig erklingen sollen (und es sich nicht um eine ganze Stimme handelt), werden beide Töne von Krokodilsklammern gerahmt: &lt;e a,&gt; bedeutet, dass das e und das a gleichzeitig (also übereinander) notiert werden.\nTonhöhen anzugeben, ist meist gar nicht notwendig, da LilyPond von den naheliegensten Tönen ausgeht. Bei e f geht LilyPond also davon aus, dass der Tonsprung nach oben stattfindet, weil der „Weg“ kürzer ist als nach unten (zum tiefen f). Bei größeren Tonsprüngen helfen die Zeichen ' (englisches Apostroph) für eine Oktave nach oben und , (Komma) für eine Oktave nach unten. Bei zwei Oktaven natürlich dann zweimal und so weiter.\n\n\nPausen\nfirstVoice = \\relative c' {\n  f4 a c a\n  g8 (a) g (f) e4 c\n  f a c a\n  g a8 (b) a4 g\n  d f a f\n  e8 (f) e (d) e4 &lt;e a,&gt;\n  d8 (e) f (g) a4 a8 (f)\n  d2 d4 r\n}\nZuletzt benötigen wir noch eine Pause zum Abschluss. Pausen werden mit r (engl. rest = Pause) bezeichnet. Die Angabe des Pausenwertes erfolgt analog zu den Notenwerten.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#refvoice-variable",
    "href": "beispiel_liedersetzen.html#refvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refVoice-Variable",
    "text": "refVoice-Variable\nDie brauchen wir nicht, denn wir haben keinen Refrain. Sie kann einfach gelöscht werden.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#melodyvoice-variable",
    "href": "beispiel_liedersetzen.html#melodyvoice-variable",
    "title": "Beispiel Liedersetzen",
    "section": "melodyVoice-Variable",
    "text": "melodyVoice-Variable\nmelodyVoice = \\relative c' {\n  \\global\n  \\firstVoice\n  \\refVoice\n  \\bar \"|.\"\n}\nIn dieser Variable bauen wir die Melodiestimme zusammen. Dazu müssen wir die Zeile mit \\refVoice löschen, da wir keinen Refrain haben. Wie du siehst, fügen wir da also die oben definierten Variablen ein (\\global und \\firstVoice) und ergänzen noch einen Schlussstrich (\\bar \"|.\", bar = engl. für Taktstrich).",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#versechords-variable",
    "href": "beispiel_liedersetzen.html#versechords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "verseChords-Variable",
    "text": "verseChords-Variable\nverseChords = \\chordmode {\n  c\n}\n\nAkkorde\nIn diese Variable fügen wir anstatt des Platzhalters c unsere Akkorde ein. Akkorde funktionieren sehr ähnlich wie Noten. Für dieses Lied brauchen wir Dur- und Moll-Akkorde. Dur-Akkorde sind sehr einfach (f), Mollakkorde eigentlich auch (f:m). Die Länge funktioniert wie bei den Noten und Pausen auch.\nverseChords = \\chordmode {\n  f1 c f c d:m a d2:m a d1:m\n}\nIn unserem Lied wird also ein F-Dur einen Takt lang gesetzt, danach folgt einen Takt C-Dur, dann wieder F-Dur, C-Dur, dann D-Moll, dann A-Dur. Danach folgt zwei Schläge D-Moll, A-Dur und wieder vier Schläge D-Moll.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#refchords-variable",
    "href": "beispiel_liedersetzen.html#refchords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "refChords-Variable",
    "text": "refChords-Variable\nDa wir keinen Refrain haben, kannst du diese Variable einfach löschen.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#songchords-variable",
    "href": "beispiel_liedersetzen.html#songchords-variable",
    "title": "Beispiel Liedersetzen",
    "section": "songChords-Variable",
    "text": "songChords-Variable\nsongChords = \\chords {\n  \\verseChords \\refChords\n}\nDie \\refChords musst du rauslöschen, da wir die ja nicht haben. Ansonsten werden hier einfach nur die Akkorde zusammengesetzt.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#der-music-teil",
    "href": "beispiel_liedersetzen.html#der-music-teil",
    "title": "Beispiel Liedersetzen",
    "section": "Der MUSIC-Teil",
    "text": "Der MUSIC-Teil\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;\n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse \\refLyrics }\n      &gt;&gt;\n  &gt;&gt;\n}\nHier wird unser Lied „zusammengebaut“. Wie du siehst, werden die Akkorde eingebunden (songChords), die Melodiestimme (melodyVoice) und der Liedtext (firstVerse). Bei dem musst du noch die \\refLyrics löschen, da die in unserem Falle nicht vorkommen.\nFür unser System ist es nun notwendig, dass der Text für alle Strophen an der korrekten Stelle unter den Noten steht. Deswegen musst du nun für jede der Text-Variablen (secondVerse, thirdVerse, fourthVerse) eine addlyrics-Zeile einfügen, das sieht dann so aus:\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\secondVerse }\n        \\addlyrics { \\thirdVerse }\n        \\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\nJetzt kannst du auf jeden Fall schonmal kompilieren, also auf die Seerose klicken oder Strg + M drücken und schauen, was passiert. Wenn alles klappt, müsstest du jetzt das Liedblatt fast fertig vor dir sehen.\nÜberprüfe einmal, ob der Text sich immer an der richtigen Stelle unter den Noten befindet.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "beispiel_liedersetzen.html#der-text-teil",
    "href": "beispiel_liedersetzen.html#der-text-teil",
    "title": "Beispiel Liedersetzen",
    "section": "Der TEXT-Teil",
    "text": "Der TEXT-Teil\nverse-breaks = {\n  s1 \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n  }\n}\nDen auskommentierten Teil kannst du löschen, wir brauchen ihn für dieses Lied nicht. Hast du das gemacht, haben wir oben zu sehenden Code. Was da im Hintergrund passiert, ist, dass eine unsichtbare Stimme und Akkorde erzeugt werden (firstVoice und songChords), zu der die Text-Variablen zugeordnet werden. Die Umbrüche erfolgen dann mit der Variable verse-breaks (oben im Code). Was du jetzt machen musst: Die Takte zählen, bei denen du umbrechen möchtest. Dabei ist es sinnvoll, sich an der Versstruktur zu orientieren. Wir wollen also immer nach zwei Takten umbrechen. Dafür schreiben wir:\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\nDas s steht quasi für „aussetzen“. Wenn du jetzt kompilierst, solltest du schon ein gutes Resultat sehen.\nZuletzt ergänzen wir noch die anderen Strophen nach demselben Schema, das bedeutet:\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\nUnd fertig ist dein erstes Liederpool-Lied!\nDas muss noch gar nicht schön aussehen, denn das kommt an anderer Stelle…",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Beispiel Liedersetzen"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html",
    "href": "branch_und_pullrequest.html",
    "title": "Branch und Pull-Request",
    "section": "",
    "text": "Du hast dein erstes Lied für den Liederpool gesetzt, wie toll! Klar, das war nur ein Beispiel, und das Lied befindet sich schon im Liederpool, aber trotzdem denken wir den Prozess mal ganz zu Ende. Dann ist deine nächste Station, einen Branch im Git zu erstellen. Was Branches genau sind, erfährst du detaillierter in unsrer Doku, hier fassen wir uns möglichst kurz.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html#in-einen-branch-pushen",
    "href": "branch_und_pullrequest.html#in-einen-branch-pushen",
    "title": "Branch und Pull-Request",
    "section": "In einen Branch pushen",
    "text": "In einen Branch pushen\n\n\n\n1: Das ist dein Workingtree. 2: Da siehst du dein Liederbuch-Repository mit den beiden Submodulen lilypond-common-includes und lilypond-song-includes. 3: Das ist die Branch-Übersicht, da siehst du, dass du dich gerade im main-Branch befindest. 4: Hier hast du eine Übersicht aller geänderter Dateien. Wenn du diese Committen willst, wählst du einfach alle auf und klickst dann Rechtsklick und wählst Commit.\n\n\n\nBranch erstellen\nDu gehst in deine Git-GUI und wählst dich ins Submodul lilypond-song-includes. Im Moment solltest du dich im main-Branch befinden. Eine Übersicht über die Branches wird dir vermutlich in irgendeiner Ecke der Benutzeroberfläche dargestellt. In SmartGit beispielsweise befindet sich diese Übersicht unten links.\nJetzt musst du einen neuen lokalen Branch erstellen. Das funktioniert in jeder Git-GUI anders, deswegen lass dir gerne von einer Google-Suche oder ChatGPT oder uns helfen. In SmartGit klickst du mit einem Rechtsklick auf „Local Branches“ und wählst dann „Add Branch“. Im Dialogfenster kannst du dem Branch einen Namen geben. Benenne ihn nach dem Lied. Bitte verwende keine Leer- oder Sonderzeichen. Klicke dann auf „Add Branch“.\n\n\nDen neuen Branch auschecken\nJetzt musst du den neuen Branch, den du gerade erstellt hast, auschecken. In SmartGit klickst du dafür einfach doppelt auf den Namen deines Branches, der nun unter „Local Branches“ aufgelistet sein sollte.\n\n\nLied committen\nIn deinem „Working Tree“ siehst du, dass du Änderungen getätigt hast – das ist das neue Lied, was du gerade gesetzt hast. Diese Änderungen musst du nun „committen“. Wie das geht, fragst du am besten Google, ChatGPT oder holst dir bei uns Hilfe. In SmartGit werden dir die Änderungen in einem Kasten auf der rechten Seite angezeigt. Klicke mit einem Rechtsklick auf die entsprechende Datei und wähle „Commit“ (alternativer Shortcut: Strg + K). Als Commit-Message, die nun im Dialogfenster gefordert wird, bietet sich der Name des Liedes an. Falls das Lied schon im Liederpool war, könntest du noch dahinter schreiben, was du an dem Lied verändert hast. Klicke auf „Commit“.\n\n\nBranch pushen\nJetzt hast du einen Branch erstellt, hast ihn ausgecheckt und das Lied in den Branch committed. Zuletzt musst du den Branch auf das Remote-Repo pushen. Dazu gibt es einen Knopf, der vermutlich oben in einer Menüleiste zu finden ist. In SmartGit befindet er sich oben links.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "branch_und_pullrequest.html#pull-request-erstellen",
    "href": "branch_und_pullrequest.html#pull-request-erstellen",
    "title": "Branch und Pull-Request",
    "section": "Pull-Request erstellen",
    "text": "Pull-Request erstellen\nNun gehst du in das Song-Includes-Repository auf unserem Git-Server. Dort kannst du nun einen Pull-Request erstellen.\n\n\n\n\n\n\nNote\n\n\n\nEin Pull-Request ist die Anfrage, ob ein Branch mit dem main-Branch zusammengeführt wird. Das ist Teil unseres Review-Systems, das dafür sorgen soll, dass die Qualität des Bestandes nicht gefährdet wird, wenn viele Menschen auf den Liederpool zugreifen – die Gefahr des Verschlimmbesserns wäre sehr hoch. Deshalb kannst du nicht einfach auf den main-Branch pushen, sondern es muss ein neuer Branch (also eine Abzweigung) erstellt werden, auf die du dann pushst.\nDann kannst du eine Anfrage stellen, ob deine Änderungen ok sind. Die wird dann bearbeitet, in dem mindestens eine andere Person nochmal über deine Änderungen drüberschaut. Zuletzt erfolgt dann die Zusammenführung mit dem main-Branch.\nDieses Vier-Augen-Prinzip führt auch dazu, dass Fehler von Anfang an verhindert werden können.\n\n\nKlicke im Song-Includes-Repository auf Pull-Requests und dort dann auf Neuer Pull-Request. Jetzt wirst du nach einem Branch gefragt. Klicke auf das rechte Dropdown-Menü. Dort sind die alle verfügbaren Branches aufgelistet, sortiert nach dem letzten Push-Zeitpunkt. Dein Branch ist also vermutlich ganz oben. Wähle deinen Branch aus und klicke: Neuer Pull-Request.\nNun solltest du dem Pull-Request einen Namen geben. Der Name des Liedes bietet sich dafür an. Außerdem solltest du die Checkliste in der Beschreibung ausfüllen. Das machst du, indem du das Leerzeichen mit einem x ersetzt: aus [ ] mach [x]. Bitte fülle die Kästchen nur aus, wenn sie auch wirklich zutreffen. Zuletzt klicke auf Pull-Request erstellen. Fertig!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Branch und Pull-Request"
    ]
  },
  {
    "objectID": "lilypond_einrichten.html",
    "href": "lilypond_einrichten.html",
    "title": "Einrichtung von LilyPond",
    "section": "",
    "text": "LilyPond ist die Software, die wir zum Noten setzen benutzen. Als erstes müssen wir LilyPond bei dir installieren.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von LilyPond"
    ]
  },
  {
    "objectID": "lilypond_einrichten.html#lilypond-installieren",
    "href": "lilypond_einrichten.html#lilypond-installieren",
    "title": "Einrichtung von LilyPond",
    "section": "LilyPond installieren",
    "text": "LilyPond installieren\n\nGehe auf https://lilypond.org/ und wähle unter Downloads die neueste LilyPond-Version. Grundsätzlich ist immer die stabile Version zu bevorzugen (alle geraden Zahlen, z.B. 2.24). Unser System funktioniert aber (unter Windows) erst ab der Version 2.25.24, das ist eine Entwicklerversion (zu erkennen an der ungeraden 25).\nNun sollte der Download starten. Gehe in den Ordner und entpacke den Download. Herauskommen sollte ein Ordner namens lilypond-*, wobei * die Versionsnummer darstellt.\nFertig. Allerdings solltest du den Ordner an einen Ort legen, an dem er nicht verschoben wird. Zu empfehlen ist\n\nunter Windows: Ins Verzeichnis C und dann in den Ordner Programme (x86). Dort sind auch andere Programmordner, deswegen ergibt das dort Sinn.\nunter Linux: Zum Beispiel ins Verzeichnis home.\n\n\nJetzt hast du LilyPond installiert. Damit es jetzt auch Spaß macht, mit LilyPond zu arbeiten, benötigst du noch Frescobaldi.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von LilyPond"
    ]
  },
  {
    "objectID": "liedlayout.html",
    "href": "liedlayout.html",
    "title": "Liedlayout",
    "section": "",
    "text": "Jetzt hast du das Lied gesetzt und in den Liederpool eingebracht. Wie toll! Das ist der wichtigste Schritt, weil er der grundlegendste ist. Alle, die Zugriff auf den Liederpool haben, können das Lied jetzt auch verwenden.\nDer nächste Schritt ist, das Lied für dein spezifisches Liederbuch zu layouten. Ich kann dich schonmal beruhigen: Das geht viel leichter als das Setzen in den Liederpool, sogar richtig schnell. Und das ist auch der große Vorteil von unserem System. Die Lieder, die schon im Pool sind, machen deutlich weniger Arbeit – du profitierst also sehr von der Arbeit anderer. Aber genug der langen Vorrede. Los geht’s!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#layout-datei-erstellen",
    "href": "liedlayout.html#layout-datei-erstellen",
    "title": "Liedlayout",
    "section": "Layout-Datei erstellen",
    "text": "Layout-Datei erstellen\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nWenn du ein Repository mithilfe unseres Vorlagenrepos erstellt hast, findest du im Ordner lieder einen Ordner 00_vorlage_light. In diesem Ordner öffnest du die Datei vorlage_light.ly. Als erstes solltest du die Datei neu abspeichern. Dazu drücke einfach Strg + Umschalt + S oder alternativ im Menü Datei -&gt; Save -&gt; Speichern unter. Gehe dann in den Ordner lieder deines Repositories und lege einen neuen Ordner an. Benenne ihn am besten nach demselben Schema wie im Liederpool, in unserem Falle also ueber_meiner_heimat_fruehling. Gehe in den Ordner und speichere die Datei unter demselben Namen dort ab. Fertig.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#auf-die-inhaltsdatei-referenzieren",
    "href": "liedlayout.html#auf-die-inhaltsdatei-referenzieren",
    "title": "Liedlayout",
    "section": "Auf die Inhaltsdatei referenzieren",
    "text": "Auf die Inhaltsdatei referenzieren\nNun ist der erste Schritt, auf die Inhaltsdatei zu referenzieren, die wir eben im Liederpool erstellt haben. Dazu vervollständigst du den Pfad: \\include \"../../lilypond-song-includes/liedbausteine/\". Tippe dazu einfach nur den Beginn des Dateinamen (also des Liedtitels nach dem bekannten Schema) ein. Unter den dann erscheinenden Optionen kannst du dir bereits das passende Lied auswählen.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "liedlayout.html#layouten",
    "href": "liedlayout.html#layouten",
    "title": "Liedlayout",
    "section": "Layouten",
    "text": "Layouten\nJetzt geht’s ans Layout. Dazu kopierst du dir alles ab dem MUSIC-Teil aus der Inhaltsdatei in die Layoutdatei rüber. Das sieht bei uns dann am Ende so aus:\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        \\addlyrics { \\secondVerse }\n        \\addlyrics { \\thirdVerse }\n        \\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    \\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nJetzt kannst du schon einmal kompilieren und schauen, wie es aussieht. Der letzte Schritt ist nun der Feinschliff. Du kannst dich nun entscheiden: Möchtest du den Text direkt unter den Noten oder als Strophen mit Akkorden unterm gesamten Notensatz. Alles, was du nicht willst, kommentierst du einfach aus. Wenn du also nur die erste Strophe unter den Noten haben möchtest und den Rest unter dem Satz, sähe das so aus:\n\\version \"2.25.8\"\n\n\\include \"../../lilypond-custom-includes/base_config.ly\"\n\\include \"../../lilypond-song-includes/liedbausteine/\"\n\nHEADER = \\bookpart {\n  \\header {\n    \\basicSongInfo\n    %infotext = \"\"\n    categories = \"\"\n  }\n}\n\nMUSIC = {\n  &lt;&lt;\n      \\songChords\n      \\new ChoirStaff = \"firstStaff\"\n      &lt;&lt;        \n        \\new Voice = \"firstVoice\" { \\melodyVoice }\n        \\addlyrics { \\firstVerse }\n        %\\addlyrics { \\secondVerse }\n        %\\addlyrics { \\thirdVerse }\n        %\\addlyrics { \\fourthVerse }\n      &gt;&gt;\n  &gt;&gt;\n}\n\nverse-breaks = {\n  s1 s \\break\n  s s \\break\n  s s \\break\n  s s \\break\n}\n\nTEXT = \\markuplist {\n  \\override #`(verse-break-voice . ,verse-breaks)\n  \\group-verses {\n    %\\chordlyrics \\firstVerse\n    \\chordlyrics \\secondVerse\n    \\chordlyrics \\thirdVerse\n    \\chordlyrics \\fourthVerse\n  }\n}\n\n\\include \"../../lilypond-common-includes/standalone_output.ly\"\nJetzt kannst du kompilieren und schauen, ob es dir schon gefällt. Wenn du wölltest, könntest du auch noch die verse-breaks nach Belieben anpassen. Wie das geht, weißt du ja schon.\nUnd fertig ist dein erstes Liederbuch-Lied!",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liedlayout"
    ]
  },
  {
    "objectID": "lifehacks.html",
    "href": "lifehacks.html",
    "title": "Nützliche Lifehacks",
    "section": "",
    "text": "Du kannst die Silben eines Textes automatisiert trennen: Text auswählen und unter Werkzeuge/Musical Transformations/Liedtext/Trennungsstriche in Text einführen oder einfach Strg + L. Achtung! Die Funktion funktioniert leider nicht absolut fehlerfrei, deswegen definitiv nochmal Korrektur drüber lesen.\nDu kannst Noten ganz einfach transponieren, was in diesem Falle meint, dass sich der tatsächliche Code verändert: entsprechenden Code auswählen unter Werkzeuge/Musical Transformations/Tonhöhen/Transponieren. Dazu wichtig: Abschnitt auswählen und im Dokument vorher temporär \\language \"deutsch\" aufrufen.\nAuch Notenlängen Halbieren oder Verdoppeln geht sehr einfach: entsprechenden Code auswählen Werkzeuge/Musical Transformations/Rythmus/ und dann auf Notenlänge verdoppeln bzw. Notenlänge halbieren.\nEbenfalls kann eine bestimmte rhythmische Form übernommen werden: Werkzeuge/Musical Transformations/Rhythmus/.\nLange Zeilen können im Editor standardmäßig umgebrochen werden: Unter Bearbeiten/Einstellungen/Editor-Einstellungen/Einstellungen zur Ansicht -&gt; Haken setzen.\nZahlreiche LilyPond-Codeschnipsel gibt es unter Schnipsel. Das wollen wir künftig noch mehr ausbauen.",
    "crumbs": [
      "Doku",
      "Nützliche Lifehacks"
    ]
  },
  {
    "objectID": "lifehacks.html#frescobaldi-lifehacks",
    "href": "lifehacks.html#frescobaldi-lifehacks",
    "title": "Nützliche Lifehacks",
    "section": "",
    "text": "Du kannst die Silben eines Textes automatisiert trennen: Text auswählen und unter Werkzeuge/Musical Transformations/Liedtext/Trennungsstriche in Text einführen oder einfach Strg + L. Achtung! Die Funktion funktioniert leider nicht absolut fehlerfrei, deswegen definitiv nochmal Korrektur drüber lesen.\nDu kannst Noten ganz einfach transponieren, was in diesem Falle meint, dass sich der tatsächliche Code verändert: entsprechenden Code auswählen unter Werkzeuge/Musical Transformations/Tonhöhen/Transponieren. Dazu wichtig: Abschnitt auswählen und im Dokument vorher temporär \\language \"deutsch\" aufrufen.\nAuch Notenlängen Halbieren oder Verdoppeln geht sehr einfach: entsprechenden Code auswählen Werkzeuge/Musical Transformations/Rythmus/ und dann auf Notenlänge verdoppeln bzw. Notenlänge halbieren.\nEbenfalls kann eine bestimmte rhythmische Form übernommen werden: Werkzeuge/Musical Transformations/Rhythmus/.\nLange Zeilen können im Editor standardmäßig umgebrochen werden: Unter Bearbeiten/Einstellungen/Editor-Einstellungen/Einstellungen zur Ansicht -&gt; Haken setzen.\nZahlreiche LilyPond-Codeschnipsel gibt es unter Schnipsel. Das wollen wir künftig noch mehr ausbauen.",
    "crumbs": [
      "Doku",
      "Nützliche Lifehacks"
    ]
  },
  {
    "objectID": "git_verstehen.html",
    "href": "git_verstehen.html",
    "title": "Was ist eigentlich Git?",
    "section": "",
    "text": "Git ist ein Versionierungssystem, welches frei als Open-Source-Software zur Verfügung gestellt wird. Git wird für die Versionskontrolle (stetige Protokollierung von Änderungen) von Dateien eingesetzt.\nVor allem im Programmierbereich dient Git dazu, die eigenen Änderungen zu überwachen, sie rückgängig zu machen. Die wesentliche Nutzung findet in sogenannten „Repositories“ (Repos) statt. Das ist quasi ein Ordner, in dem sich Dateien und andere Ordner befinden, quasi eine Art „Arbeitsordner“ oder „Arbeitsverzeichnis“. Dabei gibt es verschiedene Orte, an dem dieser Arbeitsordner liegt.\nDadurch ergeben sich am Repo für Bearbeiter*innen folgende Möglichkeiten:",
    "crumbs": [
      "Doku",
      "Was ist eigentlich Git?"
    ]
  },
  {
    "objectID": "git_verstehen.html#spielerisch-git-lernen",
    "href": "git_verstehen.html#spielerisch-git-lernen",
    "title": "Was ist eigentlich Git?",
    "section": "Spielerisch Git lernen",
    "text": "Spielerisch Git lernen\nHier gibt es eine tolle Spielwiese zum Ausprobieren: https://learngitbranching.js.org/. Sinnvoll für uns ist mindestens die Einführung.",
    "crumbs": [
      "Doku",
      "Was ist eigentlich Git?"
    ]
  },
  {
    "objectID": "git_verstehen.html#einrichten-des-repos",
    "href": "git_verstehen.html#einrichten-des-repos",
    "title": "Was ist eigentlich Git?",
    "section": "Einrichten des Repos",
    "text": "Einrichten des Repos\n\nNutzt du Git zum ersten Mal?\nWenn ja, dann solltest du dir erst einen SSH-Key besorgen.\n\nWas ist das?\nKurze Erklärung: Der SSH-Key ist dafür da, dass das Remote-Repo weiß, dass dein lokales Repo auch zu dir gehört. Sonst könnte ja jeder, der den SSH-Link hat, Zugriff aufs Repo haben. Er ist also ein Identifikationsmittel für deinen Account. Dafür hinterlegst du den public key in deinem Git-Account und sagst deinem Git-Programm (SmartGit, SourceTree, TortoiseGit), wo deine Schlüssel-Datei liegt. Diese Datei ist auch nochmal extra passwortgeschützt. Sie sollte auf keinen Fall gelöscht oder verschoben werden. Die lange Erklärung kannst du hier nachlesen.\n\n\nWas musst du machen?\nDu musst dir einen SSH-Key erstellen und das Passwort, public key und private key und Schlüsseldatei speichern/aufbewahren. Eine Anleitung findest du hier.\nAnschließend hinterlegst du den public key in deinem Git-Account (unter Einstellungen -&gt; SSH- / GPG-Schlüssel -&gt; Schlüssel hinzufügen).\nBeim Klonen eines Liederbuchs wirst du dann irgendwann nach deiner Schlüsseldatei gefragt (für die du dann auch das Passwort brauchst).\nKlingt alles sehr kompliziert - ist es auch, aber: Du musst das nur einmal machen und dann funktioniert es einfach.\n\n\n\nEin bestehendes Liederbuch-Repo klonen\n\nRemote-Repo klonen Das sieht je nach GUI verschieden aus. Irgendwo gibt es die Option Clone und da kann dann der Link zum Remote-Repo eingeben werden.  Wichtig ist bei dem Prozess: Submodule müssen inkludiert werden. Irgendwo kann man dann den Speicherort des lokalen Repos festlegen. Es empfiehlt sich, einen Ordner zu haben, wo alle Git-Repos drin sind. Dies ist aber nicht notwendig für irgendetwas.\nFertig!\n\n\n\nEin neues Liederbuch-Repo mit dem Vorlagen-Repo erstellen\n\nDu gehst auf: boernel/lilypond-vorlagen: Vorlagen zur Erstellung eines Liederbuches mit den Lilypondscripten. - lilypond-vorlagen - Tuxgit\nDu klickst auf Dieses Template verwenden\nDu folgst den Schritten (Besitzer*innen, Name, … festlegen) Wichtig: Bei Template muss lilypond-vorlagen ausgewählt sein\nDann kannst du einfach weitermachen wie bei “Ein bestehendes Liederbuch-Repo klonen”",
    "crumbs": [
      "Doku",
      "Was ist eigentlich Git?"
    ]
  },
  {
    "objectID": "git_verstehen.html#grundbegriffe-im-git-alltag",
    "href": "git_verstehen.html#grundbegriffe-im-git-alltag",
    "title": "Was ist eigentlich Git?",
    "section": "Grundbegriffe im Git-Alltag",
    "text": "Grundbegriffe im Git-Alltag\nalphabetisch sortiert\n\nBranches\nBeim Einsatz von Git dienen Branches (engl.: to branch - sich verzweigen) dazu, um einen separaten Arbeitszweig zu erstellen. Dieser kann dann auch als neuer Kontext gesehen werden, in dem gearbeitet wird. So kann z.B. die Programmierung eines Sicherheits-Patches in einem eigenen Branch erfolgen (im Kontext des Patches), der bei Fertigstellung und nach dem Testen zurück in den Master-Zweig eingearbeitet wird. Das Wiedereinführen funktioniert bei uns über einen Pull Request.\nBefehl: git branch NAME\n\n\nCheckout\nDas Wechseln von einem Branch in einen anderen Branch.\nBefehl: git checkout BRANCH\n\n\nCommit\nEin Commit in einem Git-Repository speichert eine Abbildung aller Dateien in deinem Projektverzeichnis. Es ist wie ein riesiges Kopieren und Einfügen, nur besser.\nAllerdings will Git die Commits so schlank wie möglich halten, also kopiert es nicht einfach stur das ganze Verzeichnis jedes Mal wenn du committest. Es kann (wenn möglich) Commits als Menge von Änderungen zusammenpacken, von einer Version des Repositorys zur nächsten.\nAußerdem führt Git ein Protokoll darüber, welche Commits wann gemacht wurden, und welcher auf welchen folgt. Dieses Protokoll zu haben ist eine tolle Sache für jeden, der an einem Projekt arbeitet. Commits sind sehr ressourcenschonend, und zwischen ihnen wechseln geht superschnell!\nBefehl: git commit\n\n\nFetch\nDer Befehl git fetch importiert Commits von einem Remote-Repository in das lokale Repo. Dabei werden die Commits des Remote-Repos aber nicht ins lokale Repo überführt (wie bei git pull). Fetching ist die geeignete Methode, um einzusehen, woran andere gearbeitet haben. Da auf diese Weise importierte Inhalte von Remote-Branches repräsentiert werden, haben sie absolut keinen Effekt auf die lokale Entwicklungsarbeit.\nAlternative Erklärung: git fetch holt Änderungen aus dem Remote-Repository, aber wendet diese nicht auf den lokalen Code an.\n\n\nHEAD\nHEAD ist ein Alias für den Commit, der gerade ausgecheckt ist – es ist im Prinzip der Commit, an den du deinen nächsten Commit hängst.\nHEAD zeigt immer auf den neuesten Commit. Die meisten Git-Befehle, die den Baum verändern, fangen damit an, dass sie HEAD verschieben.\nNormalerweise zeigt HEAD auf einen Branch-Namen (z.B. bugFix). Wenn du einen Commit machst, wird bugFix auf diesen Commit geschoben, und HEAD (da es auf bugFix zeigt) automatisch auch.\n\n\nMerge\nDie einfachste Methode, mit der man Branches zusammenführen kann, ist git merge. Das Mergen erzeugt in git einen speziellen Commit, der zwei Vorgänger hat. Ein solcher Commit bedeutet im Prinzip “ich möchte alle Arbeit von dem Vorgänger hier und dem dort und allen ihren jeweiligen Vorgängern miteinander kombinieren”.\nBefehl: git merge\n\n\nPull\nMit dem pull-Befehl kann man Änderungen aus einem Remote-Repository holen und mit dem lokalen Repository, also den Dateien, an denen man derzeit arbeitet, synchronisieren.\n\n\nPush\nMit git push können Commits nun von einem lokalen Repository in ein Remote-Repo transferiert werden. Dieser Befehl ist das Gegenstück zu git fetch. Während beim Fetching Commits in lokale Branches importiert werden, exportiert git push Commits in Remote-Branches. Es besteht die Möglichkeit, Änderungen zu überschreiben; entsprechend sorgfältig sollte der Befehl genutzt werden.\n\n\nRepository\nIn ein Repository bzw. einem Repo befinden sich alle Dateien inklusive derer vorangegangenen Versionen. Dadurch stehen stets alle Änderungen zur Verfügung, die von einer Datei ins Repo gespielt wurden und es kann nachvollzogen werden Wer, Wann, welche Änderungen durchgeführt hat. Das besondere an Git ist, dass jede lokale Working Directory eines Users (ein “Klon” - via “git clone”) wieder ein vollständiges, eigenes, lokales Repo darstellt. Es existieren somit mehrere Kopien der Repos, der, der einen Klon besitzt, kann daran arbeiten - inklusive kompletter History, auch offline und ohne Abhängigkeit von einem zentralen Server. Die Änderungen aus dem eigenen Repo/der Working Copy können dann auf einen Ruck oder Schritt für Schritt, wenn sie als public angesehen werden, wieder in das Remote-Repo “gepusht” werden (git push).\n\n\nRebase\nDer zweite Weg um Inhalte aus verschiedenen Branches zu kombinieren istgit rebase. Rebasen nimmt im Prinzip eine Menge von Commits, “kopiert” sie und packt sie auf etwas anderes drauf.\nAuch wenn das erst mal komisch klingt, liegt der Vorteil von Rebase darin, dass man es benutzen kann um hübsch lineare Abfolgen von Commits zu erhalten. Das Commit-Protokoll des Repositorys wird durch Rebase eine ganze Ecke einfacher aussehen, weil Merge Commits vermieden werden.\nBefehl: git rebase\n\n\nSubmodul\nDas lilypond-song-includes-Repo wird in der Regel als Submodul genutzt. Das bedeutet, es ist ein eigenes (Remote-)Repository, das in ein anderes (Remote-)Repository eingebunden wird (zum Beispiel dein Liederbuch-Repo).\n\n\nVersionierung\nSobald an einer Working Copy gearbeitet wird protokolliert Git alle getätigten Änderungen mit. Mittels commit können die Änderungen zu dem Repository hinzugefügt werden, eine neue Version der Datei(n) befinden sich dann im Repo. Anschließend können verschiedene Versionen miteinander verglichen, Änderungen rückgängig oder zu einer früheren Version zurückgekehrt werden. Die Log-Informationen, die von Git mit aufgezeichnet werden können mit “git log” ausgegeben werden, “git status” listet die noch nicht ins Repo gespielten Änderungen der Working Copy auf.\n\n\nWorking Directory",
    "crumbs": [
      "Doku",
      "Was ist eigentlich Git?"
    ]
  },
  {
    "objectID": "git_verstehen.html#how-to-pull-request",
    "href": "git_verstehen.html#how-to-pull-request",
    "title": "Was ist eigentlich Git?",
    "section": "How to Pull-Request",
    "text": "How to Pull-Request",
    "crumbs": [
      "Doku",
      "Was ist eigentlich Git?"
    ]
  },
  {
    "objectID": "git_einrichten.html",
    "href": "git_einrichten.html",
    "title": "Einrichtung von Git",
    "section": "",
    "text": "Hier geht es jetzt nur um eine kurze und möglichst unkomplizierte Einrichtung von Git. Du musst gar nicht alles verstehen, was im Hintergrund passiert. Das kann an späterer Stelle irgendwann auch noch kommen.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#sec-tuxgit-account",
    "href": "git_einrichten.html#sec-tuxgit-account",
    "title": "Einrichtung von Git",
    "section": "Account bei tuxgit erstellen lassen",
    "text": "Account bei tuxgit erstellen lassen\nDu brauchst einen Account für unseren Git-Server. Aufgrund von Spam ist die Registrierung nicht öffentlich möglich, deswegen musst du dafür eine E-Mail an tux schreiben. Die Web-Adresse unseres Git-Servers ist: https://git.zahlenlabyrinth.de/.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#eine-git-gui-aussuchen-und-herunterladen",
    "href": "git_einrichten.html#eine-git-gui-aussuchen-und-herunterladen",
    "title": "Einrichtung von Git",
    "section": "Eine Git-GUI aussuchen und herunterladen",
    "text": "Eine Git-GUI aussuchen und herunterladen\nGit ist per se erstmal ein Kommandozeilen-Programm. Das ist nicht für jede*n was – erst recht nicht, wenn man noch nicht so viel mit Coden zu tun hatte. Das ist aber gar nicht schlimm, denn es gibt zahlreiche verschiedene grafische Oberflächen für Git, die das Arbeiten sehr erleichtern können. Verbreitet bei uns sind gerade diese hier:\n\nSmartGit\n\nLink\nfür Windows, MacOS, Linux\nkostet was, es gibt aber eine non-commercial Lizenz für gemeinnützige Organisationen und Bildungseinrichtungen: Apply for Non-Commercial License\nDafür brauchst du eine gemeinnützige Organisation, mit deren E-Mail-Adresse du dich dort registrieren kannst. Alternativ geht auch eine Uni-Mail-Adresse.\n\n\n\nSourceTree\n\nLink\nfür Windows, MacOS\n\n\n\nTortoiseGit\n\nLink\nfür Windows\n\nOder man nutzt es in der Konsole. Dann braucht man die Git Shell: Link.",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "git_einrichten.html#einrichten-eines-liederbuch-repos",
    "href": "git_einrichten.html#einrichten-eines-liederbuch-repos",
    "title": "Einrichtung von Git",
    "section": "Einrichten eines Liederbuch-Repos",
    "text": "Einrichten eines Liederbuch-Repos\nDa du Git vermutlich zum ersten Mal nutzt, brauchst du zuerst einen SSH-Key. Der SSH-Key ist dafür da, dass das Remote-Repo weiß, dass dein lokales Repo auch zu dir gehört. Sonst könnte ja jeder, der den SSH-Link hat (siehe dazu Figure 1), Zugriff aufs Repo haben. Er ist also ein Identifikationsmittel für deinen Account. Dafür hinterlegst du den public key in deinem Git-Account und sagst deinem Git-Programm (SmartGit, SourceTree, TortoiseGit), wo deine Schlüssel-Datei liegt. Diese Datei ist auch nochmal extra passwortgeschützt. Sie sollte auf keinen Fall gelöscht oder verschoben werden. Die lange Erklärung kannst du hier nachlesen.\n\n\n\n\n\n\nFigure 1: Das ist der SSH-Link.\n\n\n\n\nSSH-Key erstellen\nDu musst dir einen SSH-Key erstellen und das Passwort, public key und private key und Schlüsseldatei speichern/aufbewahren. Eine Anleitung dafür findest du hier.\nAnschließend hinterlegst du den public key in deinem Git-Account (unter Einstellungen -&gt; SSH- / GPG-Schlüssel -&gt; Schlüssel hinzufügen).\nSpäter wirst du beim „Klonen“ eines Liederbuchs irgendwann nach deiner Schlüsseldatei gefragt (für die du dann auch das Passwort brauchst). Es ist also wichtig, dass du beides gut speicherst!\nKlingt alles sehr kompliziert und das ist es auch, aber: Du musst das nur einmal machen und dann funktioniert es einfach. Wenigstens etwas.\n\n\nEin neues Liederbuch-Repo mit dem Vorlagen-Repo erstellen\nDa du ja ganz neu einsteigst, hast du vermutlich noch kein eigenes Liederbuch-Repo. Deswegen erstellen wir erstmal eins. Das tolle ist: Wir haben zu genau diesem Zweck ein Vorlagen-Repo gebaut, mit dem du sofort die meisten wichtigen Sachen eingerichtet hast. Wichtig: Du brauchst vorher einen Account bei tuxgit (siehe Section 1). So geht’s:\n\nDu gehst zu unserem LilyPond-Vorlagen-Repo auf unserem Git-Server.\nDu klickst auf Dieses Template verwenden.\nDu folgst den Schritten (Besitzer*innen, Name, … festlegen) Wichtig: Bei Template muss lilypond-vorlagen ausgewählt sein.\nDann kannst du einfach unten weitermachen.\n\n\n\nEin bestehendes Liederbuch-Repo klonen\nWenn du die obigen Schritte befolgt hast oder schon ein Liederbuch-Repo eingerichtet hast und dass einfach nur klonen willst, dann geht das so:\n\nRemote-Repo klonen\nJe nach GUI funktioniert das unterschiedlich. Irgendwo gibt es die Option Clone und da dann einen Dialog, in dem du unter anderem den SSH-Link des Repos eintragen kannst. Wichtig ist bei dem Prozess: Submodule müssen inkludiert werden. Irgendwo kann man dann den Speicherort des lokalen Repos festlegen. Es empfiehlt sich, einen Ordner zu haben, wo alle Git-Repos drin sind. Dies ist aber nicht notwendig für irgendetwas.\n\nSmartGit: In Smartgit navigierst du zu Repository -&gt; Clone und folgst dem Dialog. Zuerst gibst du deinen SSH-Link ein. Dann achtest du darauf, dass Submodules inkludiert werden und wählst zuletzt den Speicherort des Repos aus.\n\nAls nächstes müssen die Submodule noch richtig eingebunden werden, das geht nämlich leider nicht automatisch. Du brauchst auf jeden Fall unsere Common-Includes als Submodul. Wenn du mit unserem Liederpool arbeitest, brauchst du noch die Song-Includes als Submodul. Für jedes Submodul musst du diesen Prozess einzeln durchführen.\nAuch das funktioniert in jeder GUI anders. So geht es bei SmartGit:\n\nIm Menü Remote anwählen -&gt; Submodule -&gt; Add\nDann brauchst du die SSH-Links der Submodule. Die findest du auf die bekannte Art und Weise (siehe Figure 1).\nIm nächsten Schritt wird gefragt, an welcher Stelle das Submodul eingebunden werden soll, da kannst du einfach weiterklicken.\n\nFertig!\n\nUnd jetzt kann’s richtig losgehen!",
    "crumbs": [
      "Einführung",
      "Vorbereitung",
      "Einrichtung von Git"
    ]
  },
  {
    "objectID": "doku.html",
    "href": "doku.html",
    "title": "Doku",
    "section": "",
    "text": "Das ist unsre Doku",
    "crumbs": [
      "Doku"
    ]
  },
  {
    "objectID": "liedersetzen.html",
    "href": "liedersetzen.html",
    "title": "Liedersetzen",
    "section": "",
    "text": "Jetzt kann es losgehen mit dem Lieder setzen. Damit du möglichst einfach reinkommst, erklären wir dir gleich anhand eines Beispiels, dass du bei dir nachvollziehen kannst, wie unser System funktioniert.\nVorneweg gibt es aber noch ein paar wichtige Links und Helfer:\n\nHier gibt es eine LilyPond-Einführung von den LilyPond-Entwickler*innen. Du kannst die auch nochmal machen, aber viele grundlegenden Sachen lernst du in diesem Tutorial schon kennen.\nHier findest du die LilyPond-Dokumentation. Das ist im Grunde der wichtigste und erste Ort, um herauszufinden, wie du musikalische Notation in LilyPond umsetzen kannst. Auch die meisten aufkommenden Probleme lassen sich schon allein mit der Doku beheben. Zusätzlich kannst du auch gerne unsere Setzer*innen-Gruppe auf Signal dafür nutzen.\n\nSo, jetzt geht’s los!",
    "crumbs": [
      "Einführung",
      "Lieder setzen"
    ]
  },
  {
    "objectID": "repostruktur.html",
    "href": "repostruktur.html",
    "title": "Struktur des Repositories",
    "section": "",
    "text": "Nun ein paar Worte zu der Struktur deines Repositories.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lieder-ordner",
    "href": "repostruktur.html#der-lieder-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lieder-Ordner",
    "text": "Der lieder-Ordner\nIm Ordner lieder befinden sich die Layout-Dateien deines Liederbuchs. Diese Dateien sind jeweils in einem Ordner, der denselben Namen hat wie die Dateien. Die identische Benennung ist sehr wichtig! Es empfiehlt sich, die Benennung von der Liederpool-Datei zu übernehmen.\nIm Ordner lieder befinden sich also Ordner, in denen die Layout-Dateien liegen. Im Ordner ueber_meiner_heimat_fruehling liegt also eine Datei namens ueber_meiner_heimat_fruehling.ly.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-liederbuecher-ordner",
    "href": "repostruktur.html#der-liederbuecher-ordner",
    "title": "Struktur des Repositories",
    "section": "Der liederbuecher-Ordner",
    "text": "Der liederbuecher-Ordner\nDer Ordner liederbuecher ist für deine Liederbücher da, die du anhand dieses Repos erstellst. Für jedes Liederbuch gibt es einen Ordner, in dem eine LilyPond-Datei liegt, mit der das Liederbuch erstellt wird.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-common-includes-ordner",
    "href": "repostruktur.html#der-lilypond-common-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-common-includes-Ordner",
    "text": "Der lilypond-common-includes-Ordner\nIn diesem Ordner liegen die LilyPond-Skripte, mit denen unser System arbeitet. Technisch gesehen handelt es sich dabei um ein Git-Submodul, also um ein eigenes Repository, das in dein Repository eingebunden ist.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-custom-includes-ordner",
    "href": "repostruktur.html#der-lilypond-custom-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-custom-includes-Ordner",
    "text": "Der lilypond-custom-includes-Ordner\nIn diesem Ordner kannst du, wie der Name schon andeutet, persönliche Änderungen am Layout vornehmen.\nIn der base_config.ly kannst du Änderungen, die den LAYOUT-Blog betreffen (das sind, grob gesagt, Layoutanpassungen bezüglich des Notensatzes), vornehmen. In der categories.ly kannst du die Kategorien deines Liederbuchs konfigurieren. Und in der custom_style_overrides.ly kannst du das Layout des Liederbuchs formatieren, also zum Beispiel die Schriftgröße, Schriftart und vieles mehr.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#der-lilypond-song-includes-ordner",
    "href": "repostruktur.html#der-lilypond-song-includes-ordner",
    "title": "Struktur des Repositories",
    "section": "Der lilypond-song-includes-Ordner",
    "text": "Der lilypond-song-includes-Ordner\nIn diesem Ordner findest du die Liederpool-Dateien im Ordner liedbausteine. Außerdem findest du unsere Autor*innendatei unter data. Technisch gesehen handelt es sich auch hier um ein Git-Submodul.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "repostruktur.html#die-.gitignore-datei",
    "href": "repostruktur.html#die-.gitignore-datei",
    "title": "Struktur des Repositories",
    "section": "Die .gitignore-Datei",
    "text": "Die .gitignore-Datei\nDiese Datei verhindert, dass dir bestimmte Dateien, Dateiarten, Ordner, … im Git-Workingtree als bearbeitet angezeigt werden. Das verhindert, dass PDF-Dateien ständig neu ins Remote-Repo hochgeladen werden, weil sie sich ja bei jedem Kompilieren verändern. Deswegen kann man Git in dieser Datei sagen, welche Dateien man grundsätzlich nicht hochladen möchte.\nDeine .gitignore-Datei könnte zum Beispiel so aussehen:\n# ---&gt; Lilypond\n*.pdf\n*.ps\n*.midi\n*.mid\n*.log\n*.csv\n*~\nWenn du genauer wissen willst, was das bedeutet, dann wird das hier genauer erklärt.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Struktur des Repositories"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html",
    "href": "liederbuecher_machen.html",
    "title": "Liederbücher erstellen",
    "section": "",
    "text": "Jetzt erstellen wir dir ein Liederbuch, wo das eine schon gesetzte und gelayoutete Lied reinkommen soll.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#ordner-vorbereiten",
    "href": "liederbuecher_machen.html#ordner-vorbereiten",
    "title": "Liederbücher erstellen",
    "section": "Ordner vorbereiten",
    "text": "Ordner vorbereiten\nBenenne den Ordner beispiel_liederbuch im Ordner liederbuecher um in den Namen deines Liederbuchs. Gehe dann in den Ordner und benenne auch die LilyPond-Datei entsprechend um.\nIm Folgenden gehen wir zusammen die Beispiel-Liederbuch-Datei durch und gehen kurz auf die wichtigsten Dinge ein.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#bild--und-liedpfade",
    "href": "liederbuecher_machen.html#bild--und-liedpfade",
    "title": "Liederbücher erstellen",
    "section": "Bild- und Liedpfade",
    "text": "Bild- und Liedpfade\nimagePagePath = \"categories\"\nsongPath = \"../../lieder\"\nGleich ganz am Anfang werden die Orte definiert, in denen nach Bildern, die du im Liederbuch verwendest, und nach den Liedern gesucht wird. Es macht Sinn, den songPath auf jeden Fall so zu lassen. Wenn du Kategorien nutzt, kannst du darüber nachdenken, einen eigenen Bilderordner zu nutzen. Der Ausgangspunkt des relativen Pfades ist der Ordner, in dem sich diese LilyPond-Datei befindet.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#lieder-bilder-und-leerseiten-einbinden",
    "href": "liederbuecher_machen.html#lieder-bilder-und-leerseiten-einbinden",
    "title": "Liederbücher erstellen",
    "section": "Lieder, Bilder und Leerseiten einbinden",
    "text": "Lieder, Bilder und Leerseiten einbinden\nDann folgt der Teil, in dem du Lieder einbinden kannst. Die Lieder werden in der Reihenfolge inkludiert, in der sie in der Datei auftreten. Es gibt folgende Möglichkeiten:\n\n\\includeSong \"ordnername\" inkludiert ein Lied. In unserem Falle wäre das also \\includeSong \"ueber_meiner_heimat_fruehling\".\n\\imagepage #125 \"see.eps\" fügt eine Seite ein, die nur aus einem Bild besteht. Auf der Seite wird dann auch keine Seitenzahl angezeigt. Mit der Zahl hinter dem Rautezeichen wird die Größe des Bildes definiert. Das Bild muss sich im oben festgelegten Ordner befinden.\n\\blankpage fügt eine Leerseite ein.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "liederbuecher_machen.html#book-part",
    "href": "liederbuecher_machen.html#book-part",
    "title": "Liederbücher erstellen",
    "section": "Book-Part",
    "text": "Book-Part\n\nDateiname\nAls erstes kannst du den Dateinamen der Liederbuch-PDF festlegen, zum Beispiel \\bookOutputName \"tusks_lied\" würde beim Kompilieren dann eine PDF mit dem Titel tusks_lied.pdf erzeugen.\n\n\nHeader / PDF-Metadaten\nIm Header kannst du einige PDF-Metadaten festlegen: Autor*innen, Titel, Thema, Schlüsselwörter.\n\\header {\n    pdfcomposer = \"Ich\"\n    pdftitle = \"tusks Lied ♫\" % Unicode is geil!\n    pdfsubject = \"Ein anspruchsvolles Liederbuch mit Noten und etwas Hintergrundinformationen zu den Liedern.\"\n    pdfkeywords = \"Liederbuch, Pfadfinder, bündisch\"\n  }\n\n\nCover-Seite\nEine Coverseite kann man auf diese Weise erstellen:\n\\bookpart {\n  %\\markup { \\epsfile #X #120 #\"images/front.eps\" }\n  %\\markup \\fill-line { \\center-column { \\vspace #1 \\pad-x #9 \\customEps #95 #\"Dateiname.dt\" \\vspace #1 } }\n  \\paper {\n    print-page-number = ##f\n    inner-margin = 0\n    outer-margin = 0\n    binding-offset = 0\n    top-margin = 0\n    bottom-margin = 0\n    last-bottom-spacing = #'((basic-distance . 0) (minimum-distance . 0) (padding . 0))\n    page-count = 1\n  }\n}\nDie beiden auskommentierten \\markup-Befehle sind zwei verschiedene Methoden, ein Titelbild einzubinden, das unter einem anzugebenden Dateipfad zu finden ist. Probier einfach aus, was da für dich besser passt.\nDie Eigenschaften im \\paper-Block setzen jeweils alle Abstände auf null und verhindern, dass eine Seitennummer ausgedrückt wird.\nWichtig: Wenn in einem \\bookpart kein \\markup oder eine \\markuplist aktiv ist, führt das auch nicht zu einer Seite im Liederbuch.\n\n\nVorwort-Seite\n% Seite\n\\bookpart {\n  \\paper { print-page-number = ##f }\n  \\markup { \\vspace #2 \\fill-line { \\null\n    \\override #'(font-name . \"Old Standard TT\") \\fontsize #0.5 \\override #'(line-width . 115) \\left-column { \\justify-string #\"\n    Hier steht lustiger Text\"\n    \" \"\n    \\fill-line { \"blublub\" }\n    }\n    \\null }\n  }\n  % muss drinbleiben, damit die Kategoriebildchen alle reingeladen und referenziert werden können:\n  \\markuplist { \\embed-category-images }\n}\nWenn du ein Vorwort erzeugen möchtest, kannst du das zum Beispiel mit diesem Bookpart machen. Passe einfach alles nach deinen Wünschen an. Mit \\override #'(font-name . \"Schriftname\") änderst du die Schriftart, mit \\fontsize die Schriftgröße. Wichtig ist, dass du irgendwo in deinem Liederbuch (in einem Bookpart) den Befehl \\markuplist { \\embed-category-images } übergibst, denn der stellt sicher, dass die Kategoriebildchen auch reingeladen werden.\n\n\nDie Lied-Ausgabe\nMit dem nächsten Befehl wird die Lied-Ausgabe bewirkt: \\songs.\n\n\nKategorienverzeichnis\n\\bookpart {\n  \\markuplist {\n    \\index-in-columns-with-title #'categories \\column {\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Inhaltsverzeichnis nach Kategorien\" \\null }\n      \\vspace #1\n    }\n  }\n}\nMit diesem Code kannst du ein Kategorienverzeichnis erzeugen. Die Überschrift kannst du anpassen (\"Inhaltsverzeichnis nach Kategorien\"), ebenso deren Textgröße (\\fontsize #5), Schriftfamilie (\\sans) und Formatierungen wie zum Beispiel fett (\\bold).\n\n\nAutor*innenverzeichnis\n\\bookpart {\n  \\markuplist {\n    \\index-in-columns-with-title #'authors \\column {\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Autorenverzeichnis\" \\null }\n      \\vspace #1\n    }\n  }\n}\nMit diesem Code erstellst du ein Autor*innenverzeichnis aller Autor*innen der in deinem Liederbuch referenzierten Autor*innen. Zu den Anpassungen der Überschrift siehe Section 4.6.\n\n\nInhaltsverzeichnis\n\\bookpart {\n   \\indexSection #\"A\" \\markup { \"A\" }\n   \\indexSection #\"B\" \\markup { \"B\" }\n   \\indexSection #\"C\" \\markup { \"C\" }\n   \\indexSection #\"D\" \\markup { \"D\" }\n   \\indexSection #\"E\" \\markup { \"E\" }\n   \\indexSection #\"F\" \\markup { \"F\" }\n   \\indexSection #\"G\" \\markup { \"G\" }\n   \\indexSection #\"H\" \\markup { \"H\" }\n   \\indexSection #\"I\" \\markup { \"I\" }\n   \\indexSection #\"J\" \\markup { \"J\" }\n   \\indexSection #\"K\" \\markup { \"K\" }\n   \\indexSection #\"L\" \\markup { \"L\" }\n   \\indexSection #\"M\" \\markup { \"M\" }\n   \\indexSection #\"N\" \\markup { \"N\" }\n   \\indexSection #\"O\" \\markup { \"O\" }\n   \\indexSection #\"P\" \\markup { \"P\" }\n   \\indexSection #\"Q\" \\markup { \"Q\" }\n   \\indexSection #\"R\" \\markup { \"R\" }\n   \\indexSection #\"S\" \\markup { \"S\" }\n   \\indexSection #\"T\" \\markup { \"T\" }\n   \\indexSection #\"U\" \\markup { \"U\" }\n   \\indexSection #\"V\" \\markup { \"V\" }\n   \\indexSection #\"W\" \\markup { \"W\" }\n   \\indexSection #\"X\" \\markup { \"X\" }\n   \\indexSection #\"Y\" \\markup { \"Y\" }\n   \\indexSection #\"Z\" \\markup { \"Z\" }\n   \\markuplist {\n    \\index-in-columns-with-title #'alphabetical \\column {\n      \\fontsize #5 \\sans \\bold \\fill-line { \\null \"Inhaltsverzeichnis\" \\null }\n      \\vspace #.5\n      \\justify {\n        Da die allermeisten Lieder unter verschiedenen Namen bekannt sind,\n        wollen wir euch ein Inhaltsverzeichnis an die Hand geben, mit dem ihr hoffentlich auf verschiedene Arten fündig werdet.\n        Die Liedtitel, die auch die Überschriften sind, findet ihr normal gedruckt.\n        Alle weiteren Alternativtitel oder Liedanfänge sind zur Unterscheidung kursiv gedruckt.\n      }\n      \\vspace #1\n    }\n    \\write-toc-csv\n  }\n}\nMit diesem Code kannst du ein Inhaltsverzeichnis erstellen. Der erste Teil (mit dem Alphabet) erstellt jeweils „Index-Sections“, also ein Abschnitt für jeden Buchstaben. Wenn ein Buchstabe in deinem Liederbuch nicht vorkommt, kannst du ihn auskommentieren, damit er nicht ausgedrückt wird. Anschließend kannst du, wie schon in Section 4.6 erwähnt, die Überschrift anpassen. Auch der ausgedrückte Text darunter ist natürlich anpassbar.",
    "crumbs": [
      "Einführung",
      "Lieder setzen",
      "Liederbücher erstellen"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Moin.",
    "section": "",
    "text": "Schön, dass du hergefunden hast! In diesem Leitfaden zeigen wir dir, wie du mit LilyPond und Git Liederbücher anhand unserer Vorlagen und Skripte erstellen kannst. Wir versuchen dich dabei bestmöglich an die Hand zu nehmen, um die Hürden, die es dabei gibt, möglichst niedrig zu halten. Zu diesem Zwecke gibt es diesen Leitfaden, aber auch eine Gruppe auf Signal, in der sich alle Personen befinden, die mit unserem System Liederbücher machen.\n\n\nEine kleine Übersicht über Vorteile, die unser System mit sich bringt. Wenn dir davon nicht alles was sagt, ist das gar nicht schlimm.\n\nDu kannst Liederbücher mit Noten und ohne Noten erstellen. Du kannst außerdem entscheiden, ob du Akkorde über den Strophen haben möchtest oder nicht.\nDu benötigst dafür keine kostenpflichtigen Programme. Alle Programme, die wir nutzen, sind Free and Open Source Software.\nDu kannst davon profitieren, dass wir in unserem Liederpool schon etliche Lieder gesetzt haben.\nDurch unsere Struktur profitierst du von Fehlerkorrekturen anderer Liederbuchprojekte.\nLilyPond ist ein codebasiertes Notensatzprogramm, das bedeutet, man kann sehr gut ein Versionierungs- und Nachverfolgungssystem mit Git nutzen.\n\n\n\n\nWir sind ein Zusammenschluss an verschiedenen Liederbuchprojekten, die alle LilyPond nutzen. Irgendwann kamen wir an den Punkt, dass es cool wäre, wenn man mehr Synergien untereinander hätte. Daraufhin haben wir das Konzept unseres Liederpools entwickelt, in dem sich nur der musikalische Inhalt eines Liedes befindet, den man dann in seinem Liederbuchprojekt spezifisch layouten kann. Das hat zwei riesige Vorteile: Einerseits kann man von dem profitieren, was andere schon gesetzt haben, und andererseits kann man von den Fehlerkorrekturen anderer profitieren.\nSo, jetzt genug der langen Vorrede. Los geht’s!"
  },
  {
    "objectID": "index.html#was-können-wir-dir-bieten",
    "href": "index.html#was-können-wir-dir-bieten",
    "title": "Moin.",
    "section": "",
    "text": "Eine kleine Übersicht über Vorteile, die unser System mit sich bringt. Wenn dir davon nicht alles was sagt, ist das gar nicht schlimm.\n\nDu kannst Liederbücher mit Noten und ohne Noten erstellen. Du kannst außerdem entscheiden, ob du Akkorde über den Strophen haben möchtest oder nicht.\nDu benötigst dafür keine kostenpflichtigen Programme. Alle Programme, die wir nutzen, sind Free and Open Source Software.\nDu kannst davon profitieren, dass wir in unserem Liederpool schon etliche Lieder gesetzt haben.\nDurch unsere Struktur profitierst du von Fehlerkorrekturen anderer Liederbuchprojekte.\nLilyPond ist ein codebasiertes Notensatzprogramm, das bedeutet, man kann sehr gut ein Versionierungs- und Nachverfolgungssystem mit Git nutzen."
  },
  {
    "objectID": "index.html#wer-wir-sind",
    "href": "index.html#wer-wir-sind",
    "title": "Moin.",
    "section": "",
    "text": "Wir sind ein Zusammenschluss an verschiedenen Liederbuchprojekten, die alle LilyPond nutzen. Irgendwann kamen wir an den Punkt, dass es cool wäre, wenn man mehr Synergien untereinander hätte. Daraufhin haben wir das Konzept unseres Liederpools entwickelt, in dem sich nur der musikalische Inhalt eines Liedes befindet, den man dann in seinem Liederbuchprojekt spezifisch layouten kann. Das hat zwei riesige Vorteile: Einerseits kann man von dem profitieren, was andere schon gesetzt haben, und andererseits kann man von den Fehlerkorrekturen anderer profitieren.\nSo, jetzt genug der langen Vorrede. Los geht’s!"
  },
  {
    "objectID": "vorbereitung.html",
    "href": "vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "Zuerst richten wir alle Programme ein, die du brauchst. Du benötigst als erstes LilyPond und Frescobaldi. Dann Git und dann einen Account bei dem Git-Server von tux.\nWir erklären dir jetzt Schritt für Schritt, was du dafür tun musst.",
    "crumbs": [
      "Einführung",
      "Vorbereitung"
    ]
  }
]